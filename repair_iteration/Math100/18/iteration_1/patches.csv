bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  parameters);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  parameters);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(this,  parameters);	  WeightedMeasurement[]    wm    =    problem.getRMS(this);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
2	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  cost);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  cost);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(this,  cost);	  WeightedMeasurement[]    wm    =    problem.getRMS(this);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
3	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  metrics);  [CE]  cannot  find  symbol  metrics  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  metrics);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(this,  metrics);	  WeightedMeasurement[]    wm    =    problem.getRMS(this);    	non-compiled	[CE]  cannot  find  symbol  metrics	4	None	replace
4	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problems.getRows();  [CE]  cannot  find  symbol  problems  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problems.getRows();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problems.getRows();	  WeightedMeasurement[]    wm    =    problem.getRows();    	non-compiled	[CE]  cannot  find  symbol  problems	3	None	replace
5	[BUG]  [BUGGY]  int  cols  =  problem.getColumns()  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getColumns()  -  1;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumns()  -  1;	      int    cols    =    problem.getColumns();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
6	[BUG]  [BUGGY]  int  cols  =  problem.getRows();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getRows();  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getRows();	      int    cols    =    problem.getColumns();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
7	[BUG]  [BUGGY]  int  cols  =  problem.getColumns()  -  2;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getColumns()  -  2;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumns()  -  2;	      int    cols    =    problem.getColumns();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
8	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurement();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getMeasurement();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurement();	      	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	5	None	replace
9	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  wm  =  problem.getRMS();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getRMS();	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
10	[BUG]  [BUGGY]  int[]  measurements  =  problem.getStdMeasurements();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int[]  measurements  =  problem.getStdMeasurements();  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getStdMeasurements();	      int[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
11	[BUG]  [BUGGY]  int[]  measurements  =  problem.getStandardMeasurements();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int[]  measurements  =  problem.getStandardMeasurements();  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getStandardMeasurements();	      int[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
12	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  cols);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  cols);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  cols);	      int[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  ';'  expected	15	None	replace
13	[BUG]  [BUGGY]  int  cols  =  problem.getRowEvaluations();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getRowEvaluations();  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getRowEvaluations();	      int    cols    =    problem.getColumnEvaluations();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
14	[BUG]  [BUGGY]  int  cols  =  problem.getColumnEvaluations()  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getColumnEvaluations()  -  1;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnEvaluations()  -  1;	      int    cols    =    problem.getColumnEvaluations();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
15	[BUG]  [BUGGY]  int  cols  =  problem.getColumnEvaluations()  -  2;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getColumnEvaluations()  -  2;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnEvaluations()  -  2;	      int    cols    =    problem.getColumnEvaluations();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
16	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRsidualMeasurements();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRsidualMeasurements();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRsidualMeasurements();	  WeightedMeasurement[]    wm    =    problem.getResidualMeasurements();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
17	[BUG]  [BUGGY]  int  wm  =  problem.getMeasurements().length;  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  wm  =  problem.getMeasurements().length;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  wm  =  problem.getMeasurements().length;	      int    wm    =    problem.getMeasurements();    	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	replace
18	[BUG]  [BUGGY]  int  wm  =  problem.getMeasurements()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  wm  =  problem.getMeasurements()  +  1;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  wm  =  problem.getMeasurements()  +  1;	      int    wm    =    problem.getMeasurements();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	16	None	replace
19	[BUG]  [BUGGY]  int  wm  =  problem.getMeasurements()  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  wm  =  problem.getMeasurements()  -  1;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  wm  =  problem.getMeasurements()  -  1;	      int    wm    =    problem.getMeasurements();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	16	None	replace
20	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problems.getStandardMeasurements();  [CE]  cannot  find  symbol  problems  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problems.getStandardMeasurements();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problems.getStandardMeasurements();	  WeightedMeasurement[]    wm    =    problem.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  problems	2	None	replace
21	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.messages();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problem.messages();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.messages();	  WeightedMeasurement[]    wm    =    problem.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
22	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getRMS();  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS();	      EstimationProblem    problem    =    problem.getResidual();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	6	None	replace
23	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  costEvaluations);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  costEvaluations);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  costEvaluations);	      EstimationProblem    problem    =    problem.getResidual();    	non-compiled	[CE]  ';'  expected	6	None	replace
24	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations);	      EstimationProblem    problem    =    problem.getMeasurements();    	non-compiled	[CE]  ';'  expected	7	None	replace
25	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  /  2;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  /  2;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  /  2;	      EstimationProblem    problem    =    problem.getMeasurements();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	replace
26	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations);	      EstimationProblem    problem    =    problem.getRawStructure();    	non-compiled	[CE]  ';'  expected	9	None	replace
27	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(null);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(null);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(null);	  WeightedMeasurement[]    wm    =    problem.getRMS();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
28	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(result);  [CE]  cannot  find  symbol  result  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(result);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(result);	  WeightedMeasurement[]    wm    =    problem.getRMS();    	non-compiled	[CE]  cannot  find  symbol  result	1	None	replace
29	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problems.getRMS();  [CE]  cannot  find  symbol  problems  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problems.getRMS();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problems.getRMS();	  WeightedMeasurement[]    wm    =    problem.getRMS();    	non-compiled	[CE]  cannot  find  symbol  problems	1	None	replace
30	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getColumnCount()  -  1;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnCount()  -  1;	      int    cols    =    problem.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
31	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  -  2;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getColumnCount()  -  2;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnCount()  -  2;	      int    cols    =    problem.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
32	[BUG]  [BUGGY]  int  cols  =  problem.getRowCount();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getRowCount();  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getRowCount();	      int    cols    =    problem.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
33	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations);	      EstimationProblem    problem    =    problem.getStandardProblem();    	non-compiled	[CE]  ';'  expected	17	None	replace
34	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem()  /  2;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem()  /  2;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem()  /  2;	      EstimationProblem    problem    =    problem.getStandardProblem();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	17	None	replace
35	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  -  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getColumnsCount()  -  1;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnsCount()  -  1;	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
36	[BUG]  [BUGGY]  int  cols  =  problem.getRowsCount();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getRowsCount();  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getRowsCount();	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
37	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  +  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getColumnsCount()  +  1;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnsCount()  +  1;	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
38	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getErrors();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getErrors();  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getErrors();	      EstimationProblem    problem    =    problem.getStdErrors();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	10	None	replace
39	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  costEvaluations;  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  costEvaluations;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  costEvaluations;	      int[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  incompatible  types	15	None	replace
40	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(problem);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getRMS(problem);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(problem);	      EstimationProblem    problem    =    problem.getMeasurements();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	replace
41	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(this);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getRMS(this);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(this);	      EstimationProblem    problem    =    problem.getMeasurements();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	replace
42	[BUG]  [BUGGY]  int  cols  =  problem.getColumnSize();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getColumnSize();  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnSize();	      int    cols    =    problem.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
43	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(problem);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(problem);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(problem);	  WeightedMeasurement[]    wm    =    problem.getRMS();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
44	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getResidual();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  wm  =  problem.getResidual();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getResidual();	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
45	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getSyntheticProblem();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  wm  =  problem.getSyntheticProblem();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getSyntheticProblem();	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
46	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getSyntheticProblem();	      	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	5	None	replace
47	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(null);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(null);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(null);	      EstimationProblem    problem    =    problem.getStandardProblem();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	17	None	replace
48	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getColumns();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problem.getColumns();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getColumns();	  WeightedMeasurement[]    wm    =    problem.getRows();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
49	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(result);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getRMS(result);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(result);	      EstimationProblem    problem    =    problem.getRawStructure();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	9	None	replace
50	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problems.getRMS(this);  [CE]  cannot  find  symbol  problems  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problems.getRMS(this);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problems.getRMS(this);	  WeightedMeasurement[]    wm    =    problem.getRMS(this);    	non-compiled	[CE]  cannot  find  symbol  problems	4	None	replace
51	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  this.resiver.getRMS(problem);  [CE]  cannot  find  symbol  resiver  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  this.resiver.getRMS(problem);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  this.resiver.getRMS(problem);	  WeightedMeasurement[]    wm    =    problem.getRMS(this);    	non-compiled	[CE]  cannot  find  symbol  resiver	4	None	replace
52	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.messages.getStandardMeasurements();  [CE]  cannot  find  symbol  messages  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problem.messages.getStandardMeasurements();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.messages.getStandardMeasurements();	  WeightedMeasurement[]    wm    =    problem.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  messages	2	None	replace
53	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problems.getResidualMeasurements();  [CE]  cannot  find  symbol  problems  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problems.getResidualMeasurements();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problems.getResidualMeasurements();	  WeightedMeasurement[]    wm    =    problem.getResidualMeasurements();    	non-compiled	[CE]  cannot  find  symbol  problems	11	None	replace
54	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  costEvaluations);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  costEvaluations);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors(),  costEvaluations);	      EstimationProblem    problem    =    problem.getStdErrors();    	non-compiled	[CE]  ';'  expected	10	None	replace
55	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardErrors();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getStandardErrors();  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardErrors();	      EstimationProblem    problem    =    problem.getStdErrors();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	10	None	replace
56	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getStandardProblem();	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
57	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMean();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  wm  =  problem.getMean();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getMean();	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
58	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  cost);	      EstimationProblem    problem    =    problem.getResidual();    	non-compiled	[CE]  ';'  expected	6	None	replace
59	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  cost;	      EstimationProblem    problem    =    problem.getResidual();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	6	None	replace
60	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS2();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS2();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS2();	  WeightedMeasurement[]    wm    =    problem.getRMS();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
61	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getColumnCount()  +  1;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnCount()  +  1;	      int    cols    =    problem.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
62	[BUG]  [BUGGY]  int  cols  =  problem.getColumnEvaluations()  +  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getColumnEvaluations()  +  1;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnEvaluations()  +  1;	      int    cols    =    problem.getColumnEvaluations();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
63	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.metadata.getStandardMeasurements();  [CE]  cannot  find  symbol  metadata  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  problem.metadata.getStandardMeasurements();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.metadata.getStandardMeasurements();	  WeightedMeasurement[]    wm    =    problem.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  metadata	2	None	replace
64	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  cost);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  cost);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  cost);	      int[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  ';'  expected	15	None	replace
65	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [0];  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [0];  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [0];	      EstimationProblem    problem    =    problem.getMeasurements();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	replace
66	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  cost);	      EstimationProblem    problem    =    problem.getStandardProblem();    	non-compiled	[CE]  ';'  expected	17	None	replace
67	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  cost;	      EstimationProblem    problem    =    problem.getStandardProblem();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	17	None	replace
68	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors()  [0];  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors()  [0];  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors()  [0];	      EstimationProblem    problem    =    problem.getStdErrors();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	10	None	replace
69	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  cost);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  cost);  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors(),  cost);	      EstimationProblem    problem    =    problem.getStdErrors();    	non-compiled	[CE]  ';'  expected	10	None	replace
70	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  -  2;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problem.getColumnsCount()  -  2;  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnsCount()  -  2;	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
71	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(this);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(this);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.getRMS(this);	  WeightedMeasurement[]    wm    =    problem.getRMS(this);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
72	[BUG]  [BUGGY]  int  cols  =  problems.getColumns();  [CE]  cannot  find  symbol  problems  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {    [BUGGY]  int  cols  =  problems.getColumns();  [BUGGY]    WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problems.getColumns();	      int    cols    =    problem.getColumns();    	non-compiled	[CE]  cannot  find  symbol  problems	8	None	replace
