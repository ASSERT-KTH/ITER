bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS();  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS();	WeightedMeasurement[]  wm  =  problem.getMeasurements();  	non-compiled	[CE]  cannot  find  symbol	36	None	replace
2	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getStandardMeasurements();  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getStandardMeasurements();  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getStandardMeasurements();	WeightedMeasurement[]  wm  =  problem.getMeasurements();  	non-compiled	[CE]  cannot  find  symbol	36	None	replace
3	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRows();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRows();  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRows();	WeightedMeasurement[]  wm  =  problem.getMeasurements();  	non-compiled	[CE]  cannot  find  symbol	36	None	replace
4	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this);  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(this);	WeightedMeasurement[]  wm  =  problem.getMeasurements();  	non-compiled	[CE]  cannot  find  symbol	36	None	replace
5	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  wm  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]    [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	  	WeightedMeasurement[]  wm  =  problem.getMeasurements();  	non-compiled	[CE]  cannot  find  symbol  wm	36	None	replace
6	[BUG]  [BUGGY]    EstimationProblem  problem  =  problem.getResidual();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]    EstimationProblem  problem  =  problem.getResidual();  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	    EstimationProblem  problem  =  problem.getResidual();		non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	37	None	add
7	[BUG]  [BUGGY]    EstimationProblem  problem  =  problem.getMeasurements();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]    EstimationProblem  problem  =  problem.getMeasurements();  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	    EstimationProblem  problem  =  problem.getMeasurements();		non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	37	None	add
8	[BUG]  [BUGGY]    int  cols  =  problem.getColumns();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]    int  cols  =  problem.getColumns();  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	    int  cols  =  problem.getColumns();		non-compiled	[CE]  cannot  find  symbol	37	None	add
9	[BUG]  [BUGGY]    EstimationProblem  problem  =  problem.getRawStructure();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]    EstimationProblem  problem  =  problem.getRawStructure();  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	    EstimationProblem  problem  =  problem.getRawStructure();		non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	37	None	add
10	[BUG]  [BUGGY]    EstimationProblem  problem  =  problem.getStdErrors();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]    EstimationProblem  problem  =  problem.getStdErrors();  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	    EstimationProblem  problem  =  problem.getStdErrors();		non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	37	None	add
11	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getResidualMeasurements();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getResidualMeasurements();  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getResidualMeasurements();	WeightedMeasurement[]  wm  =  problem.getMeasurements();  	non-compiled	[CE]  cannot  find  symbol	36	None	replace
12	[BUG]  [BUGGY]    int  cols  =  problem.getColumnCount();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]    int  cols  =  problem.getColumnCount();  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	    int  cols  =  problem.getColumnCount();		non-compiled	[CE]  cannot  find  symbol	37	None	add
13	[BUG]  [BUGGY]    int  cols  =  problem.getColumnsCount();  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]    int  cols  =  problem.getColumnsCount();  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	    int  cols  =  problem.getColumnsCount();		non-compiled	[CE]  cannot  find  symbol	37	None	add
14	[BUG]  [BUGGY]    int  cols  =  problem.getColumnEvaluations();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]    int  cols  =  problem.getColumnEvaluations();  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	    int  cols  =  problem.getColumnEvaluations();		non-compiled	[CE]  cannot  find  symbol	37	None	add
15	[BUG]  [BUGGY]    int[]  measurements  =  problem.getMeasurements();  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]    int[]  measurements  =  problem.getMeasurements();  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	    int[]  measurements  =  problem.getMeasurements();		non-compiled	[CE]  incompatible  types	37	None	add
16	[BUG]  [BUGGY]    int  wm  =  problem.getMeasurements();  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]    int  wm  =  problem.getMeasurements();  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	    int  wm  =  problem.getMeasurements();		non-compiled	[CE]  incompatible  types	37	None	add
17	[BUG]  [BUGGY]    EstimationProblem  problem  =  problem.getStandardProblem();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  [BUGGY]    EstimationProblem  problem  =  problem.getStandardProblem();  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	    EstimationProblem  problem  =  problem.getStandardProblem();		non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	37	None	add
