bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  [BUGGY]  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	add	return  Math.sqrt(criterion  *  wm.length);	return  Math.sqrt(criterion  /  wm.length);  	compilable	  [FE]  AssertionFailedError  	46	2	replace
2	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  [BUGGY]  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  wm.length);	return  Math.sqrt(criterion  /  wm.length);  	compilable	  [FE]  AssertionFailedError  	46	2	replace
3	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  wm.length);  [CE]  cannot  find  symbol  remainder  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]  return  Math.sqrt(remainder  *  wm.length);  [BUGGY]  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remainder  *  wm.length);	return  Math.sqrt(criterion  /  wm.length);  	non-compiled	[CE]  cannot  find  symbol  remainder	46	None	replace
4	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  wm.length);  [CE]  cannot  find  symbol  remaining  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]  return  Math.sqrt(remaining  *  wm.length);  [BUGGY]  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remaining  *  wm.length);	return  Math.sqrt(criterion  /  wm.length);  	non-compiled	[CE]  cannot  find  symbol  remaining	46	None	replace
5	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  wm.length);  [CE]  cannot  find  symbol  remaining  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]  return  Math.sqrt(remaining  /  wm.length);  [BUGGY]  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remaining  /  wm.length);	return  Math.sqrt(criterion  /  wm.length);  	non-compiled	[CE]  cannot  find  symbol  remaining	46	None	replace
6	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    [BUGGY]  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	  	return  Math.sqrt(criterion  /  wm.length);  	non-compiled	[CE]  missing  return  statement	46	None	replace
7	[BUG]  [BUGGY]    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [BUGGY]  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *		non-compiled	[CE]  illegal  start  of  expression	47	None	add
8	[BUG]  [BUGGY]    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i];  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i];  criterion  +=  problem.getResidual()  *  [BUGGY]  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i];  criterion  +=  problem.getResidual()  *		non-compiled	[CE]  illegal  start  of  expression	47	None	add
9	[BUG]  [BUGGY]    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  residual  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  residual  [BUGGY]  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  residual		non-compiled	[CE]  ';'  expected	47	None	add
10	[BUG]  [BUGGY]    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }		non-compiled	[CE]  illegal  start  of  expression	47	None	add
11	[BUG]  [BUGGY]  return  Math.sqrt(result  /  wm.length);  [CE]  cannot  find  symbol  result  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]  return  Math.sqrt(result  /  wm.length);  [BUGGY]  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  /  wm.length);	return  Math.sqrt(criterion  /  wm.length);  	non-compiled	[CE]  cannot  find  symbol  result	46	None	replace
12	[BUG]  [BUGGY]  return  Math.sqrt(result  *  wm.length);  [CE]  cannot  find  symbol  result  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]  return  Math.sqrt(result  *  wm.length);  [BUGGY]  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  *  wm.length);	return  Math.sqrt(criterion  /  wm.length);  	non-compiled	[CE]  cannot  find  symbol  result	46	None	replace
13	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  wm.length);  [CE]  cannot  find  symbol  remainder  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]  return  Math.sqrt(remainder  /  wm.length);  [BUGGY]  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remainder  /  wm.length);	return  Math.sqrt(criterion  /  wm.length);  	non-compiled	[CE]  cannot  find  symbol  remainder	46	None	replace
14	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [BUGGY]  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	    for(int  i  =  0;  i  <  wm.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {		non-compiled	[CE]  illegal  start  of  expression	47	None	add
15	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	47	None	add
16	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	47	None	add
17	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	    for(int  i  =  0;  i  <  wm.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati		non-compiled	[CE]  not  a  statement	47	None	add
18	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }		non-compiled	[CE]  illegal  start  of  expression	47	None	add
19	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *		non-compiled	[CE]  illegal  start  of  expression	47	None	add
20	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  [BUGGY]  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual		non-compiled	[CE]  ';'  expected	47	None	add
21	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  [BUGGY]  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *		non-compiled	[CE]  illegal  start  of  expression	47	None	add
22	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  residual);  [CE]  cannot  find  symbol  residual  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]  return  Math.sqrt(criterion  /  residual);  [BUGGY]  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  /  residual);	return  Math.sqrt(criterion  /  wm.length);  	non-compiled	[CE]  cannot  find  symbol  residual	46	None	replace
