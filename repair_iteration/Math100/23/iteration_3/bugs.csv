bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Criterion  +=  wm[i].getResidual()  *  residual  *  factor;  [CE]  cannot  find  symbol  Criterion  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getResidual()  *  residual  *  factor;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getResidual()  *  residual  *  factor;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	121	None	replace
2	[BUG]  [BUGGY]  Criterion  +=  wm[i].getResidual()  *  result  *  factor;  [CE]  cannot  find  symbol  Criterion  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getResidual()  *  result  *  factor;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getResidual()  *  result  *  factor;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	121	None	replace
3	[BUG]  [BUGGY]  Criterion  +=  wm[i].getResidual()  *  residual  *  result;  [CE]  cannot  find  symbol  Criterion  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getResidual()  *  residual  *  result;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getResidual()  *  residual  *  result;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	121	None	replace
4	[BUG]  [BUGGY]  Criterion  +=  wm[i].getResidual()  *  remaining  *  factor;  [CE]  cannot  find  symbol  Criterion  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getResidual()  *  remaining  *  factor;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getResidual()  *  remaining  *  factor;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	121	None	replace
5	[BUG]  [BUGGY]  Criterion  +=  wm[i].getResidual()  *  residual  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getResidual()  *  residual  *  residual;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getResidual()  *  residual  *  residual;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	51	None	replace
6	[BUG]  [BUGGY]  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  [CE]  cannot  find  symbol  i  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	criterion  +=  wm[i].getResidual()  *  residual  *  residual;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  i	51	None	replace
7	[BUG]  [BUGGY]  Criterion  +=  wm[i].getResidual()  *  result  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getResidual()  *  result  *  residual;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getResidual()  *  result  *  residual;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	51	None	replace
8	[BUG]  [BUGGY]  Result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  not  a  statement	108	None	replace
9	[BUG]  [BUGGY]  foundRaw(result,  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  ';'  expected	108	None	replace
10	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  ';'  expected	108	None	replace
11	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  criterion.length);  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  criterion.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  criterion.length);	  return    Math.sqrt(result    *    criterion.length);    	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
12	[BUG]  [BUGGY]  return  Math.sqrt(result  *  criterion,  cost);  [CE]  cannot  find  symbol  result  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result  *  criterion,  cost);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  *  criterion,  cost);	  return    Math.sqrt(result    *    criterion.length);    	non-compiled	[CE]  cannot  find  symbol  result	7	None	replace
13	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  result.length);  [CE]  cannot  find  symbol  result  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  result.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  result.length);	  return    Math.sqrt(result    *    criterion.length);    	non-compiled	[CE]  cannot  find  symbol  result	7	None	replace
14	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	37	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
16	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  '.class'  expected	44	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
19	[BUG]  [BUGGY]  return  Math.sqrt(result  /  factor);  [CE]  cannot  find  symbol  result  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result  /  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  /  factor);	  return    Math.sqrt(remaining    /    criterion);    	non-compiled	[CE]  cannot  find  symbol  result	69	None	replace
20	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  factor);  [CE]  cannot  find  symbol  remaining  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remaining  /  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remaining  /  factor);	  return    Math.sqrt(remaining    /    criterion);    	non-compiled	[CE]  cannot  find  symbol  remaining	69	None	replace
21	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  [CE]  cannot  find  symbol  Criterion  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getWeight()  *  residual  *  criterion;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	72	None	replace
22	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  result  *  criterion;  [CE]  cannot  find  symbol  Criterion  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  result  *  criterion;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getWeight()  *  result  *  criterion;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	72	None	replace
23	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  remaining  *  criterion;  [CE]  cannot  find  symbol  Criterion  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  remaining  *  criterion;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getWeight()  *  remaining  *  criterion;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	72	None	replace
24	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  residual;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getWeight()  *  residual  *  residual;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	72	None	replace
25	[BUG]  [BUGGY]  int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    parameters.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	92	None	replace
26	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  Math.sqrt(criterion  /  cost);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  Math.sqrt(criterion  /  cost);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    /    cost);    Math.sqrt(criterion  /  cost);	  	non-compiled	[CE]  unreachable  statement	31	None	add
27	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  EstimationProblem  cost  =  problem.getMeasurements();  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  EstimationProblem  cost  =  problem.getMeasurements();  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    /    cost);    EstimationProblem  cost  =  problem.getMeasurements();	  	non-compiled	[CE]  incompatible  types	31	None	add
28	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  int  cols  =  parameters.length;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  int  cols  =  parameters.length;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    /    cost);    int  cols  =  parameters.length;	  	non-compiled	[CE]  unreachable  statement	31	None	add
29	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  int  cols  =  problem.getColumnCount();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  int  cols  =  problem.getColumnCount();  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    /    cost);    int  cols  =  problem.getColumnCount();	  	non-compiled	[CE]  cannot  find  symbol	31	None	add
30	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  EstimationProblem  cost  =  problem.getMeasurement();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  EstimationProblem  cost  =  problem.getMeasurement();  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    /    cost);    EstimationProblem  cost  =  problem.getMeasurement();	  	non-compiled	[CE]  cannot  find  symbol	31	None	add
31	[BUG]  [BUGGY]  Criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  [CE]  cannot  find  symbol  Criterion  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getResidual()  *  residual  *  criterion;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	75	None	replace
32	[BUG]  [BUGGY]  Criterion  +=  wm[i].getResidual()  *  result  *  criterion;  [CE]  cannot  find  symbol  Criterion  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getResidual()  *  result  *  criterion;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getResidual()  *  result  *  criterion;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	75	None	replace
33	[BUG]  [BUGGY]  GravedMeasurement[]  measurements  =  problem.getMeasurements();  [CE]  cannot  find  symbol  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  GravedMeasurement[]  measurements  =  problem.getMeasurements();  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	GravedMeasurement[]  measurements  =  problem.getMeasurements();	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
34	[BUG]  [BUGGY]  GravedMeasurement  criterion  =  Math.max(result,  0);  [CE]  cannot  find  symbol  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  GravedMeasurement  criterion  =  Math.max(result,  0);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	GravedMeasurement  criterion  =  Math.max(result,  0);	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
35	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  *  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  *	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    ref    *    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
36	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	criterion  +=  wm[i].getWeight()  *  residual  *	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    ref    *    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
37	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  factor);  [CE]  cannot  find  symbol  factor  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  factor);	  return    Math.sqrt(criterion    *    residual);    	non-compiled	[CE]  cannot  find  symbol  factor	34	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  cost);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	add	return  Math.sqrt(criterion  *  cost);	  return    Math.sqrt(criterion    *    residual);    	compilable	  [FE]  AssertionFailedError  	34	2	replace
39	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  cost);  [FE]  AssertionFailedError  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  cost);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  cost);	  return    Math.sqrt(criterion    *    residual);    	compilable	  [FE]  AssertionFailedError  	34	2	replace
40	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  result);  [CE]  cannot  find  symbol  result  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  result);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  result);	  return    Math.sqrt(criterion    *    residual);    	non-compiled	[CE]  cannot  find  symbol  result	34	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length  -  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  measurements.length  -  2;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
46	[BUG]  [BUGGY]  RectangleEdge  wm  =  problems[i].getResidual();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  problems[i].getResidual();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  problems[i].getResidual();	  RectangleEdge    wm    =    parameters[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
47	[BUG]  [BUGGY]  RectangleEdge  wm  =  problem.getResidual();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  problem.getResidual();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  problem.getResidual();	  RectangleEdge    wm    =    parameters[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
48	[BUG]  [BUGGY]  return  Math.sqrt(region  *  criterion.length);  [CE]  cannot  find  symbol  region  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(region  *  criterion.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(region  *  criterion.length);	  return    Math.sqrt(remaining    *    criterion.length);    	non-compiled	[CE]  cannot  find  symbol  region	40	None	replace
49	[BUG]  [BUGGY]  return  Math.sqrt(result  *  factor);  [CE]  cannot  find  symbol  result  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result  *  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  *  factor);	  return    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  result	83	None	replace
50	[BUG]  [BUGGY]  return  Math.sqrt(region  *  criterion);  [CE]  cannot  find  symbol  region  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(region  *  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(region  *  criterion);	  return    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  region	83	None	replace
51	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  criterion,  factor);  [CE]  cannot  find  symbol  remaining  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remaining  *  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remaining  *  criterion,  factor);	  return    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remaining	83	None	replace
52	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.sqrt(criterion  *  wm.length  -  1);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.sqrt(criterion  *  wm.length  -  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    -    1);    Math.sqrt(criterion  *  wm.length  -  1);	  	non-compiled	[CE]  unreachable  statement	113	None	add
53	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  SizedMeasurement[]  measurements  =  problem.getMeasurements();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  SizedMeasurement[]  measurements  =  problem.getMeasurements();  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    -    1);    SizedMeasurement[]  measurements  =  problem.getMeasurements();	  	non-compiled	[CE]  cannot  find  symbol	113	None	add
54	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.sqrt(remaining  *  wm.length  -  1);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.sqrt(remaining  *  wm.length  -  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    -    1);    Math.sqrt(remaining  *  wm.length  -  1);	  	non-compiled	[CE]  cannot  find  symbol  remaining	113	None	add
55	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.sqrt(criterion  *  wm.length  -  1);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.sqrt(criterion  *  wm.length  -  1);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    -    1);    Math.sqrt(criterion  *  wm.length  -  1);  }	  	non-compiled	[CE]  illegal  start  of  type	113	None	add
56	[BUG]  [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(remaining  *  wm.length);  [CE]  cannot  find  symbol  ger  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(remaining  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(remaining  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(remaining    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  ger	28	None	replace
57	[BUG]  [BUGGY]  rim(criterion  *  wm.length);  return  Math.sqrt(remaining  *  wm.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  rim(criterion  *  wm.length);  return  Math.sqrt(remaining  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	rim(criterion  *  wm.length);  return  Math.sqrt(remaining  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(remaining    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
58	[BUG]  [BUGGY]  Math.sqrt(remaining  *  wm.length);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(remaining  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(remaining  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(remaining    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  remaining	28	None	replace
59	[BUG]  [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(reciterion  *  wm.length);  [CE]  cannot  find  symbol  ger  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(reciterion  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(reciterion  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(remaining    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  ger	28	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length,  factor);  }  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length,  factor);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length,  factor);  }	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  factor	106	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(remaining  *  wm.length,  factor);  }  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(remaining  *  wm.length,  factor);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(remaining  *  wm.length,  factor);  }	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	106	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(c  *  wm.length,  factor);  }  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(c  *  wm.length,  factor);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(c  *  wm.length,  factor);  }	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  c	106	None	replace
63	[BUG]  [BUGGY]  Math.sqrt(remaining  *  wm.length,  factor);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(remaining  *  wm.length,  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(remaining  *  wm.length,  factor);	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	106	None	replace
64	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  residual.length);  [CE]  cannot  find  symbol  residual  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  residual.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  /  residual.length);	  return    Math.sqrt(result    /    criterion.length);    	non-compiled	[CE]  cannot  find  symbol  residual	4	None	replace
65	[BUG]  [BUGGY]  return  Math.sqrt(reciterion  /  criterion.length);  [CE]  cannot  find  symbol  reciterion  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(reciterion  /  criterion.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(reciterion  /  criterion.length);	  return    Math.sqrt(result    /    criterion.length);    	non-compiled	[CE]  cannot  find  symbol  reciterion	4	None	replace
66	[BUG]  [BUGGY]  return  Math.sqrt(result  /  criterion,  cost);  [CE]  cannot  find  symbol  result  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result  /  criterion,  cost);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  /  criterion,  cost);	  return    Math.sqrt(result    /    criterion.length);    	non-compiled	[CE]  cannot  find  symbol  result	4	None	replace
67	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
68	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
69	[BUG]  [BUGGY]  RectangleEdge  wm  =  problems[i].getMeasurements();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  problems[i].getMeasurements();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  problems[i].getMeasurements();	  RectangleEdge    wm    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
70	[BUG]  [BUGGY]  RectangleEdge  wm  =  problems.getMeasurements();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  problems.getMeasurements();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  problems.getMeasurements();	  RectangleEdge    wm    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
71	[BUG]  [BUGGY]  RectangleEdge  wm  =  problem.getStandardMeasurements();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  problem.getStandardMeasurements();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  problem.getStandardMeasurements();	  RectangleEdge    wm    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
72	[BUG]  [BUGGY]  if(result  >  0)  {  return  Math.sqrt(criterion  *  wm.length);  }  else  {  return  Math.sqrt(criterion  *  wm.length);  }  [CE]  cannot  find  symbol  result  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result  >  0)  {  return  Math.sqrt(criterion  *  wm.length);  }  else  {  return  Math.sqrt(criterion  *  wm.length);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  >  0)  {  return  Math.sqrt(criterion  *  wm.length);  }  else  {  return  Math.sqrt(criterion  *  wm.length);  }	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	26	None	replace
73	[BUG]  [BUGGY]  if(result  >  0)  {  return  Math.sqrt(criterion  *  wm.length);  }  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result  >  0)  {  return  Math.sqrt(criterion  *  wm.length);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  >  0)  {  return  Math.sqrt(criterion  *  wm.length);  }	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	26	None	replace
74	[BUG]  [BUGGY]  if(result  >  0)  {  return  Math.sqrt(criterion  *  wm.length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result  >  0)  {  return  Math.sqrt(criterion  *  wm.length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  >  0)  {  return  Math.sqrt(criterion  *  wm.length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	26	None	replace
75	[BUG]  [BUGGY]  Math.sqrt(remainder  *  wm.length);  return  Math.sqrt(remainder  *  wm.length);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(remainder  *  wm.length);  return  Math.sqrt(remainder  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(remainder  *  wm.length);  return  Math.sqrt(remainder  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  remainder	26	None	replace
76	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  '.class'  expected	119	None	replace
77	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	119	None	replace
78	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	119	None	replace
79	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [CE]  '.class'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  '.class'  expected	119	None	replace
80	[BUG]  [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  not  a  statement	21	None	replace
81	[BUG]  [BUGGY]  return  Math.sqrt(problem,  criterion  /  residual);  [CE]  cannot  find  symbol  residual  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(problem,  criterion  /  residual);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(problem,  criterion  /  residual);	  return    Math.sqrt(criterion    /    problem);    	non-compiled	[CE]  cannot  find  symbol  residual	87	None	replace
82	[BUG]  [BUGGY]  return  Math.sqrt(problem.sqrt  /  criterion);  [CE]  cannot  find  symbol  sqrt  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(problem.sqrt  /  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(problem.sqrt  /  criterion);	  return    Math.sqrt(criterion    /    problem);    	non-compiled	[CE]  cannot  find  symbol  sqrt	87	None	replace
83	[BUG]  [BUGGY]  return  Math.sqrt(problem  /  criterion);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(problem  /  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(problem  /  criterion);	  return    Math.sqrt(criterion    /    problem);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	87	None	replace
84	[BUG]  [BUGGY]  return  Math.sqrt(problem,  criterion  /  problem);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(problem,  criterion  /  problem);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(problem,  criterion  /  problem);	  return    Math.sqrt(criterion    /    problem);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	87	None	replace
85	[BUG]  [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].    	non-compiled	[CE]  not  a  statement	23	None	replace
86	[BUG]  [BUGGY]  result  >  3)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  >  3)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  >  3)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].    	non-compiled	[CE]  not  a  statement	23	None	replace
87	[BUG]  [BUGGY]  result  +=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  +=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  +=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].    	non-compiled	[CE]  ';'  expected	23	None	replace
88	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  wm.length,  residual);  [CE]  cannot  find  symbol  residual  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  wm.length,  residual);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  /  wm.length,  residual);	  return    Math.sqrt(result    /    wm.length,    criterion);    	non-compiled	[CE]  cannot  find  symbol  residual	6	None	replace
89	[BUG]  [BUGGY]  return  Math.sqrt(result  /  wm.length,  factor);  [CE]  cannot  find  symbol  result  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result  /  wm.length,  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  /  wm.length,  factor);	  return    Math.sqrt(result    /    wm.length,    criterion);    	non-compiled	[CE]  cannot  find  symbol  result	6	None	replace
90	[BUG]  [BUGGY]  return  Math.sqrt(result  *  wm.length,  criterion);  [CE]  cannot  find  symbol  result  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result  *  wm.length,  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  *  wm.length,  criterion);	  return    Math.sqrt(result    /    wm.length,    criterion);    	non-compiled	[CE]  cannot  find  symbol  result	6	None	replace
91	[BUG]  [BUGGY]  return  Math.sqrt(reciterion  /  wm.length,  criterion);  [CE]  cannot  find  symbol  reciterion  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(reciterion  /  wm.length,  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(reciterion  /  wm.length,  criterion);	  return    Math.sqrt(result    /    wm.length,    criterion);    	non-compiled	[CE]  cannot  find  symbol  reciterion	6	None	replace
92	[BUG]  [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight    	non-compiled	[CE]  not  a  statement	76	None	replace
93	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    Residue    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	117	None	replace
94	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    Residue    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	117	None	replace
95	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  factor  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  factor  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  factor	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    Residue    	non-compiled	[CE]  ';'  expected	117	None	replace
96	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion;  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion;	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    Residue    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	117	None	replace
97	[BUG]  [BUGGY]  return  Math.sqrt(reciterion  *  criterion.length);  [CE]  cannot  find  symbol  reciterion  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(reciterion  *  criterion.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(reciterion  *  criterion.length);	  return    Math.sqrt(reciterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  reciterion	45	None	replace
98	[BUG]  [BUGGY]  Math.rint(criterion  *  wm.length);  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.rint(criterion  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.rint(criterion  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.rint(criterion    *    wm.length);    	non-compiled	[CE]  missing  return  statement	61	None	replace
99	[BUG]  [BUGGY]  rint(criterion  *  wm.length);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  rint(criterion  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	rint(criterion  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.rint(criterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
100	[BUG]  [BUGGY]  ger.rint(criterion  *  wm.length);  [CE]  cannot  find  symbol  ger  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger.rint(criterion  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger.rint(criterion  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.rint(criterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  ger	61	None	replace
101	[BUG]  [BUGGY]  ger.sqrt(criterion  *  wm.length);  [CE]  cannot  find  symbol  ger  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger.sqrt(criterion  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger.sqrt(criterion  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.rint(criterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  ger	61	None	replace
102	[BUG]  [BUGGY]  Return  Math.sqrt(result  *  wm.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Return  Math.sqrt(result  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Return  Math.sqrt(result  *  wm.length);	  Return    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  ';'  expected	110	None	replace
103	[BUG]  [BUGGY]  Return  Math.rint(criterion  *  wm.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Return  Math.rint(criterion  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Return  Math.rint(criterion  *  wm.length);	  Return    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  ';'  expected	110	None	replace
104	[BUG]  [BUGGY]  Return  Math.sqrt(criterion  *  wm.length  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Return  Math.sqrt(criterion  *  wm.length  +  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Return  Math.sqrt(criterion  *  wm.length  +  1);	  Return    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  ';'  expected	110	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measures.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  measures.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measures.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    measures    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	79	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    measures    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
107	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  '.class'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    measures    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  '.class'  expected	79	None	replace
108	[BUG]  [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterion  *  wm.length);  [CE]  cannot  find  symbol  ger  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterion  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterion  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(criterian    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  ger	27	None	replace
109	[BUG]  [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterian  *  wm.length);  [CE]  cannot  find  symbol  ger  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterian  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterian  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(criterian    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  ger	27	None	replace
110	[BUG]  [BUGGY]  Math.sqrt(criterion  *  wm.length);  [CE]  missing  return  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(criterion  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(criterion  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(criterian    *    wm.length);    	non-compiled	[CE]  missing  return  statement	27	None	replace
111	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	73	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  samples.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  samples.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    samples    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	78	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  samples.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  samples.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  samples.length;  ++i)  {  Estimati	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    samples    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	78	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    samples    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
117	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *	  EstimationProblem    criterion    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
118	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements();  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements();  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements();  criterion  +=  problem.getResidual()  *	  EstimationProblem    criterion    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
119	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i];  criterion  +=  problem.getRow()  *  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i];  criterion  +=  problem.getRow()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i];  criterion  +=  problem.getRow()  *	  EstimationProblem    criterion    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
120	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	91	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
123	[BUG]  [BUGGY]  GravedMeasurement  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  GravedMeasurement  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	GravedMeasurement  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *	  if(result!=    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
124	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }  [CE]  '.class'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  '.class'  expected	20	None	replace
125	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  '.class'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  '.class'  expected	20	None	replace
126	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  '.class'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  '.class'  expected	20	None	replace
127	[BUG]  [BUGGY]  Return  Math.sqrt(result  /  wm.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Return  Math.sqrt(result  /  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Return  Math.sqrt(result  /  wm.length);	  Return    Math.sqrt(criterion    /    wm.length);    	non-compiled	[CE]  ';'  expected	97	None	replace
128	[BUG]  [BUGGY]  Return  Math.sqrt(criterion  /  residual);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Return  Math.sqrt(criterion  /  residual);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Return  Math.sqrt(criterion  /  residual);	  Return    Math.sqrt(criterion    /    wm.length);    	non-compiled	[CE]  ';'  expected	97	None	replace
129	[BUG]  [BUGGY]  Return  Math.sqrt(criterion  /  factor);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Return  Math.sqrt(criterion  /  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Return  Math.sqrt(criterion  /  factor);	  Return    Math.sqrt(criterion    /    wm.length);    	non-compiled	[CE]  ';'  expected	97	None	replace
130	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getError();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getError();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getError();  criterion  +=  problem.getWeight()  *	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
131	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getStandardError();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getStandardError();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getStandardError();  criterion  +=  problem.getWeight()  *	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
133	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	111	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(result  *  wm.length);  }  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(result  *  wm.length);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(result  *  wm.length);  }	  return    Math.sqrt(criterion    *    wm.length);    if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    cost    +=    Math.rint(criterion    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  result	105	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(criterion  *  wm.length);  }  [CE]  missing  return  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(criterion  *  wm.length);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(criterion  *  wm.length);  }	  return    Math.sqrt(criterion    *    wm.length);    if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    cost    +=    Math.rint(criterion    *    wm.length);    }    	non-compiled	[CE]  missing  return  statement	105	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(remainder  *  wm.length);  }  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(remainder  *  wm.length);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(remainder  *  wm.length);  }	  return    Math.sqrt(criterion    *    wm.length);    if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    cost    +=    Math.rint(criterion    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  remainder	105	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(reciterion  *  wm.length);  }  [CE]  cannot  find  symbol  reciterion  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(reciterion  *  wm.length);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(reciterion  *  wm.length);  }	  return    Math.sqrt(criterion    *    wm.length);    if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    cost    +=    Math.rint(criterion    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  reciterion	105	None	replace
139	[BUG]  [BUGGY]  Math.sqrt(result  *  wm.length);  [CE]  cannot  find  symbol  result  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(result  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(result  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  result	104	None	replace
140	[BUG]  [BUGGY]  Math.rint(result  *  wm.length);  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.rint(result  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.rint(result  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  result	104	None	replace
141	[BUG]  [BUGGY]  Result  result  =  Math.rint(result  *  wm.length);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Result  result  =  Math.rint(result  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Result  result  =  Math.rint(result  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
142	[BUG]  [BUGGY]  result  =  Math.rint(result  *  wm.length);  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  =  Math.rint(result  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  =  Math.rint(result  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  result	104	None	replace
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }  [CE]  cannot  find  symbol  residual  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  residual	18	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  cannot  find  symbol  factor  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  factor	18	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  criterion;  }  [CE]  missing  return  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  criterion;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  criterion;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  missing  return  statement	18	None	replace
146	[BUG]  [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(remainder  *  wm.length);  [CE]  cannot  find  symbol  ger  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(remainder  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(remainder  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(period    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  ger	29	None	replace
147	[BUG]  [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(period  *  wm.length);  [CE]  cannot  find  symbol  ger  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(period  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(period  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(period    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  ger	29	None	replace
148	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	115	None	replace
149	[BUG]  [BUGGY]  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	115	None	replace
150	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	115	None	replace
151	[BUG]  [BUGGY]  if(result  ==  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result  ==  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  ==  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	115	None	replace
152	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  SizedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	SizedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	  For(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	16	None	replace
153	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
154	[BUG]  [BUGGY]  foundRaw(result,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
155	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual,  wm.length);  [CE]  cannot  find  symbol  residual  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  residual,  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  residual,  wm.length);	  return    Math.sqrt(result    *    criterion,    wm.length);    	non-compiled	[CE]  cannot  find  symbol  residual	8	None	replace
156	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  criterion,  wm.length);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  criterion,  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  criterion,  wm.length);	  return    Math.sqrt(result    *    criterion,    wm.length);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	8	None	replace
157	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm,  wm.length);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm,  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  wm,  wm.length);	  return    Math.sqrt(result    *    criterion,    wm.length);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	8	None	replace
158	[BUG]  [BUGGY]  return  Math.sqrt(result  *  factor,  wm.length);  [CE]  cannot  find  symbol  result  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result  *  factor,  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  *  factor,  wm.length);	  return    Math.sqrt(result    *    criterion,    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	8	None	replace
159	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	38	None	replace
160	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost  //  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost  //  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost  //	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    //    	non-compiled	[CE]  ';'  expected	116	None	replace
161	[BUG]  [BUGGY]  if(result  ==  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  //  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result  ==  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  //  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  ==  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  //  }	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    //    	non-compiled	[CE]  ';'  expected	116	None	replace
162	[BUG]  [BUGGY]  if(result  ==  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  cannot  find  symbol  result  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result  ==  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  ==  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    //    	non-compiled	[CE]  cannot  find  symbol  result	116	None	replace
163	[BUG]  [BUGGY]  if(result!=  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  //  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result!=  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  //  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result!=  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  //  }	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    //    	non-compiled	[CE]  ';'  expected	116	None	replace
164	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  >  expected	71	None	replace
165	[BUG]  [BUGGY]  if(result!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  >  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  >  expected	71	None	replace
166	[BUG]  [BUGGY]  if(result  ==  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  >  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result  ==  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  ==  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  >  expected	71	None	replace
167	[BUG]  [BUGGY]  Result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  not  a  statement	107	None	replace
168	[BUG]  [BUGGY]  Math.rint(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.rint(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.rint(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  ';'  expected	107	None	replace
169	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  result;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  result;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  result;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  ';'  expected	107	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  cost  *  residual;  }  [CE]  cannot  find  symbol  residual  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  cost  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  cost  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  residual	19	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  cost  *  criterion;  }  [CE]  missing  return  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  cost  *  criterion;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  cost  *  criterion;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    residual;    }    	non-compiled	[CE]  missing  return  statement	19	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor  *  residual;  }  [CE]  cannot  find  symbol  factor  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  factor	19	None	replace
173	[BUG]  [BUGGY]  rim(criterion  *  wm.length);  Math.sqrt(result  *  wm.length);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  rim(criterion  *  wm.length);  Math.sqrt(result  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	rim(criterion  *  wm.length);  Math.sqrt(result  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(result    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
174	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	2	None	replace
175	[BUG]  [BUGGY]  Pr14fionProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Pr14fionProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Pr14fionProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *	  PrüfionProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
176	[BUG]  [BUGGY]  Pr14fionProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Pr14fionProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Pr14fionProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *	  PrüfionProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
177	[BUG]  [BUGGY]  Criterializer  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterializer  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterializer  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *	  PrüfionProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
178	[BUG]  [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	NeighborProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *	  PrüfionProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
179	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getRMS();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problems[i].getRMS();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problems[i].getRMS();	  EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	36	None	replace
180	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problems[i].getMeasurements();	  EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	36	None	replace
181	[BUG]  [BUGGY]  Problem  problem  =  problems[i].getMeasurements();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Problem  problem  =  problems[i].getMeasurements();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Problem  problem  =  problems[i].getMeasurements();	  EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
182	[BUG]  [BUGGY]  EstimationProblem  problem  =  parameters[i].getMeasurements();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  parameters[i].getMeasurements();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  parameters[i].getMeasurements();	  EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	36	None	replace
183	[BUG]  [BUGGY]  ger  }  else  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger  }  else  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger  }  else  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.	  ger    }    else    if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.    	non-compiled	[CE]  not  a  statement	84	None	replace
184	[BUG]  [BUGGY]  ger  }  else  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger  }  else  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger  }  else  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.	  ger    }    else    if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.    	non-compiled	[CE]  not  a  statement	84	None	replace
185	[BUG]  [BUGGY]  ger  }  else  if(problem.hasMeasurements())  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger  }  else  if(problem.hasMeasurements())  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger  }  else  if(problem.hasMeasurements())  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.	  ger    }    else    if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.    	non-compiled	[CE]  not  a  statement	84	None	replace
186	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
188	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getResidual();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problems[i].getResidual();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problems[i].getResidual();	  EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	3	None	replace
189	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *	  EstimationProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
190	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements();  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements();  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements();  criterion  +=  problem.getResidual()  *	  EstimationProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
191	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getRow()  *  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getRow()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getRow()  *	  EstimationProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
192	[BUG]  [BUGGY]  int  i  =  Math.min(result,  wm.length);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  Math.min(result,  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  Math.min(result,  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    int    i    =    Math.min(result,    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	64	None	replace
193	[BUG]  [BUGGY]  int  i  =  Math.min(criterion,  wm.length);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  Math.min(criterion,  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  Math.min(criterion,  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    int    i    =    Math.min(result,    wm.length);    	non-compiled	[CE]  possible  loss  of  precision	64	None	replace
194	[BUG]  [BUGGY]  int  i  =  Math.min(reciterion,  wm.length);  [CE]  cannot  find  symbol  reciterion  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  Math.min(reciterion,  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  Math.min(reciterion,  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    int    i    =    Math.min(result,    wm.length);    	non-compiled	[CE]  cannot  find  symbol  reciterion	64	None	replace
195	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  wm.length  +  1);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remainder  *  wm.length  +  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remainder  *  wm.length  +  1);	  return    Math.sqrt(criterion    *    wm.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  remainder	47	None	replace
196	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  wm.length  +  1);  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remaining  *  wm.length  +  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remaining  *  wm.length  +  1);	  return    Math.sqrt(criterion    *    wm.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  remaining	47	None	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  /  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	add	return  Math.sqrt(criterion  *  wm.length  /  1);	  return    Math.sqrt(criterion    *    wm.length    +    1);    	compilable	  [FE]  AssertionFailedError  	47	2	replace
198	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  /  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  /  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  wm.length  /  1);	  return    Math.sqrt(criterion    *    wm.length    +    1);    	compilable	  [FE]  AssertionFailedError  	47	2	replace
199	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	criterion  +=  wm[i].getWeight()  *	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
200	[BUG]  [BUGGY]  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
201	[BUG]  [BUGGY]  Criterion  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
204	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  '.class'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  '.class'  expected	56	None	replace
205	[BUG]  [BUGGY]  return  Math.sqrt(result  *  criterion,  factor);  [CE]  cannot  find  symbol  result  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result  *  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  *  criterion,  factor);	  return    Math.sqrt(result    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  result	9	None	replace
206	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurement.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  measurement.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurement.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	13	None	replace
207	[BUG]  [BUGGY]  rim(criterion  *  wm.length);  Math.sqrt(remaining  *  wm.length);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  rim(criterion  *  wm.length);  Math.sqrt(remaining  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	rim(criterion  *  wm.length);  Math.sqrt(remaining  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(remaining    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
208	[BUG]  [BUGGY]  EstimationProblem  problem  =  parameters[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  parameters[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  parameters[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }	  EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	57	None	replace
209	[BUG]  [BUGGY]  EstimationProblem  problem  =  wm[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  wm[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  wm[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }	  EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	57	None	replace
210	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }	  EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	57	None	replace
211	[BUG]  [BUGGY]  return  Math.sqrt(result.length  *  wm.length);  [CE]  cannot  find  symbol  result  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result.length  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result.length  *  wm.length);	  return    Math.sqrt(problem.length    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	82	None	replace
212	[BUG]  [BUGGY]  return  Math.sqrt(residun  *  wm.length);  [CE]  cannot  find  symbol  residun  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(residun  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(residun  *  wm.length);	  return    Math.sqrt(problem.length    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  residun	82	None	replace
213	[BUG]  [BUGGY]  GravedMeasurement  problem  =  wm.getMeasurements()  [i].getResidual();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  GravedMeasurement  problem  =  wm.getMeasurements()  [i].getResidual();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	GravedMeasurement  problem  =  wm.getMeasurements()  [i].getResidual();  criterion  +=  problem.getWeight()  *	  GravedMeasurement    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
214	[BUG]  [BUGGY]  GravedMeasurement  problem  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  GravedMeasurement  problem  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	GravedMeasurement  problem  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  problem.getWeight()  *	  GravedMeasurement    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
215	[BUG]  [BUGGY]  GravedMeasurement  problem  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  problem.getWeight()  *  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  GravedMeasurement  problem  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	GravedMeasurement  problem  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  problem.getWeight()  *	  GravedMeasurement    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  ';'  expected	53	None	replace
216	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  result;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  result;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  result;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
217	[BUG]  [BUGGY]  Math.rint(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.rint(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.rint(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
218	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	43	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	43	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  factor  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  factor  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  factor	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	43	None	replace
222	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {	  For(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	42	None	replace
223	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  parameters.length;  ++i)  {  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  parameters.length;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  parameters.length;  ++i)  {	  For(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	42	None	replace
224	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  measurements.length  -  2;  ++i)  {  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  measurements.length  -  2;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  measurements.length  -  2;  ++i)  {	  For(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	42	None	replace
225	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getRMS();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	55	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getRMS();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getRMS();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurement  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurement  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurement  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    measurement    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurement.length;  ++i)  {  WeightedMeasurement[]  measurement  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  measurement.length;  ++i)  {  WeightedMeasurement[]  measurement  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurement.length;  ++i)  {  WeightedMeasurement[]  measurement  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    measurement    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	15	None	replace
230	[BUG]  [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWe    	non-compiled	[CE]  not  a  statement	24	None	replace
231	[BUG]  [BUGGY]  result  >  3)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  >  3)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  >  3)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWe    	non-compiled	[CE]  not  a  statement	24	None	replace
232	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
233	[BUG]  [BUGGY]  Math.rint(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.rint(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.rint(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
234	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(wm.length  *  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	add	return  Math.sqrt(wm.length  *  criterion);	  return    Math.sqrt(remainder    *    criterion);    	compilable	  [FE]  AssertionFailedError  	89	2	replace
236	[BUG]  [BUGGY]  return  Math.sqrt(wm.length  *  criterion);  [FE]  AssertionFailedError  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(wm.length  *  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(wm.length  *  criterion);	  return    Math.sqrt(remainder    *    criterion);    	compilable	  [FE]  AssertionFailedError  	89	2	replace
237	[BUG]  [BUGGY]  Result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    ref    *    residual;    }    	non-compiled	[CE]  not  a  statement	109	None	replace
238	[BUG]  [BUGGY]  result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    ref    *    residual;    }    	non-compiled	[CE]  not  a  statement	109	None	replace
239	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  result;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  result;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  result;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    ref    *    residual;    }    	non-compiled	[CE]  ';'  expected	109	None	replace
240	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	80	None	replace
241	[BUG]  [BUGGY]  if(result  ==  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result  ==  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  ==  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	80	None	replace
242	[BUG]  [BUGGY]  if(result!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	80	None	replace
243	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length);  }	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
244	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(reciterion  *  wm.length);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(reciterion  *  wm.length);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(reciterion  *  wm.length);  }	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
245	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(c  *  wm.length);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(c  *  wm.length);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(c  *  wm.length);  }	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
246	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(region  *  wm.length);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(region  *  wm.length);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(region  *  wm.length);  }	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
247	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    measurement.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
248	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  result;  [CE]  cannot  find  symbol  Criterion  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  result;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getWeight()  *  residual  *  result;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	49	None	replace
249	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  result  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  result  *  residual;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getWeight()  *  result  *  residual;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	49	None	replace
250	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  remaining  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  remaining  *  residual;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getWeight()  *  remaining  *  residual;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	49	None	replace
251	[BUG]  [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    	non-compiled	[CE]  not  a  statement	35	None	replace
252	[BUG]  [BUGGY]  result  >  3)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  >  3)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  >  3)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    	non-compiled	[CE]  not  a  statement	35	None	replace
253	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getResidual();  criterion  +=  wm[i].getWeight()  *	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getResidual();    criterion    +=    criterion.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
254	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getError();  criterion  +=  criterion.getWeight()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getError();  criterion  +=  criterion.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getError();  criterion  +=  criterion.getWeight()  *	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getResidual();    criterion    +=    criterion.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
255	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.	  if(result!=    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.    	non-compiled	[CE]  <identifier>  expected	12	None	replace
256	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.	  if(result!=    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.    	non-compiled	[CE]  <identifier>  expected	12	None	replace
257	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  result;  [CE]  cannot  find  symbol  Criterion  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  result;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Criterion  +=  wm[i].getWeight()  *  result;	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	50	None	replace
258	[BUG]  [BUGGY]  Corrections.checkState(result  >  0);  [CE]  cannot  find  symbol  result  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Corrections.checkState(result  >  0);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Corrections.checkState(result  >  0);	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  cannot  find  symbol  result	50	None	replace
259	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  factor.length);  [CE]  cannot  find  symbol  factor  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  factor.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  factor.length);	  return    Math.sqrt(criterion    *    residual.length);    	non-compiled	[CE]  cannot  find  symbol  factor	39	None	replace
260	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  problem.length);  [CE]  cannot  find  symbol  length  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  problem.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  problem.length);	  return    Math.sqrt(criterion    *    residual.length);    	non-compiled	[CE]  cannot  find  symbol  length	39	None	replace
261	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  problem.getWeight()  *	  EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
262	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  problem.getWeight()  *  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  problem.getWeight()  *	  EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  ';'  expected	52	None	replace
263	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i].getError();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i].getError();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [i].getError();  criterion  +=  problem.getWeight()  *	  EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
264	[BUG]  [BUGGY]  Math.sqrt(remainder  *  wm.length);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(remainder  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(remainder  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  remainder	25	None	replace
265	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(criterion);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }  [CE]  illegal  start  of  expression  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(criterion);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
267	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(criterion);    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	74	None	replace
268	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  wm.length  -  1);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remainder  *  wm.length  -  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remainder  *  wm.length  -  1);	  return    Math.sqrt(criterion    *    wm.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  remainder	114	None	replace
269	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  wm.length  -  1);  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remaining  *  wm.length  -  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remaining  *  wm.length  -  1);	  return    Math.sqrt(criterion    *    wm.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  remaining	114	None	replace
270	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual  /  wm.length  -  1);  [CE]  cannot  find  symbol  residual  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  residual  /  wm.length  -  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  residual  /  wm.length  -  1);	  return    Math.sqrt(criterion    *    wm.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  residual	114	None	replace
271	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i];  criterion  +=  wm[i].getResidual()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i];  criterion  +=  wm[i].getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [i];  criterion  +=  wm[i].getResidual()  *	  if(problem!=    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
272	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  '.class'  expected	17	None	replace
273	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  '.class'  expected	17	None	replace
274	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  '.class'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  '.class'  expected	17	None	replace
275	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  Math.sqrt(criterion  *  wm.length  +  1);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  Math.sqrt(criterion  *  wm.length  +  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    +    1);    Math.sqrt(criterion  *  wm.length  +  1);	  	non-compiled	[CE]  unreachable  statement	46	None	add
276	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length  +  1);  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length  +  1);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    +    1);    for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length  +  1);  }	  	non-compiled	[CE]  unreachable  statement	46	None	add
277	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  Math.sqrt(criterion  *  wm.length  +  1);  return  Math.sqrt(criterion  *  wm.length  +  1);  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  Math.sqrt(criterion  *  wm.length  +  1);  return  Math.sqrt(criterion  *  wm.length  +  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    +    1);    Math.sqrt(criterion  *  wm.length  +  1);  return  Math.sqrt(criterion  *  wm.length  +  1);	  	non-compiled	[CE]  unreachable  statement	46	None	add
278	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm[i].getWeight()  *  residual);  }  [CE]  cannot  find  symbol  residual  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm[i].getWeight()  *  residual);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    +    1);    for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm[i].getWeight()  *  residual);  }	  	non-compiled	[CE]  cannot  find  symbol  residual	46	None	add
279	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  Math.sqrt(remaining  *  wm.length  +  1);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  Math.sqrt(remaining  *  wm.length  +  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    +    1);    Math.sqrt(remaining  *  wm.length  +  1);	  	non-compiled	[CE]  cannot  find  symbol  remaining	46	None	add
280	[BUG]  [BUGGY]  RectangleEdge  wm  =  problem.getRsidualEdges();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  problem.getRsidualEdges();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  problem.getRsidualEdges();	  RectangleEdge    wm    =    problem.getResidualEdges();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
281	[BUG]  [BUGGY]  RectangleEdge  wm  =  problem.getResidualEdges()  +  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  problem.getResidualEdges()  +  1;  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  problem.getResidualEdges()  +  1;	  RectangleEdge    wm    =    problem.getResidualEdges();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
282	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	70	None	replace
283	[BUG]  [BUGGY]  if(result  ==  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result  ==  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  ==  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	70	None	replace
284	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
285	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  factor;  }  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  factor;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
286	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  remaining  *  factor;  }  [CE]  not  a  statement  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  remaining  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  remaining  *  factor;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
287	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  component);  [CE]  cannot  find  symbol  component  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  component);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  /  component);	  return    Math.sqrt(criterion    /    result);    	non-compiled	[CE]  cannot  find  symbol  component	33	None	replace
288	[BUG]  [BUGGY]  return  Math.sqrt(result  *  criterion  +  1);  [CE]  cannot  find  symbol  result  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result  *  criterion  +  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  *  criterion  +  1);	  return    Math.sqrt(result    *    wm.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  result	81	None	replace
289	[BUG]  [BUGGY]  return  Math.sqrt(reciterion  *  wm.length  +  1);  [CE]  cannot  find  symbol  reciterion  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(reciterion  *  wm.length  +  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(reciterion  *  wm.length  +  1);	  return    Math.sqrt(result    *    wm.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  reciterion	81	None	replace
290	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    parameters.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	112	None	replace
291	[BUG]  [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  problem.getWeight()  *  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	NeighborProblem  problem  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  problem.getWeight()  *	  NeighborProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  ';'  expected	85	None	replace
292	[BUG]  [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	NeighborProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *	  NeighborProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
293	[BUG]  [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()  [i].getStandardErrors();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()  [i].getStandardErrors();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	NeighborProblem  problem  =  problem.getMeasurements()  [i].getStandardErrors();  criterion  +=  problem.getWeight()  *	  NeighborProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
294	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  coefficient  *  residual;  }  [CE]  cannot  find  symbol  coefficient  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  coefficient  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  coefficient  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  coefficient	18	None	replace
295	[BUG]  [BUGGY]  result  =  Math.sqrt(result  *  wm.length);  [CE]  cannot  find  symbol  result  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  =  Math.sqrt(result  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  =  Math.sqrt(result  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  result	104	None	replace
296	[BUG]  [BUGGY]  Math.rint(result)*  wm.length);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.rint(result)*  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.rint(result)*  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  not  a  statement	104	None	replace
297	[BUG]  [BUGGY]  Math.rint(result)*  wm.length;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.rint(result)*  wm.length;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.rint(result)*  wm.length;	  return    Math.sqrt(criterion    *    wm.length);    if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  not  a  statement	104	None	replace
298	[BUG]  [BUGGY]  Math.rint(remainder  *  wm.length);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.rint(remainder  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.rint(remainder  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.rint(criterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  remainder	61	None	replace
299	[BUG]  [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem	  if(result!=    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.    	non-compiled	[CE]  ';'  expected	12	None	replace
300	[BUG]  [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  }  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  }	  if(result!=    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.    	non-compiled	[CE]  <identifier>  expected	12	None	replace
301	[BUG]  [BUGGY]  return  Math.sqrt(result  /  criterion,  factor);  [CE]  cannot  find  symbol  result  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result  /  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  /  criterion,  factor);	  return    Math.sqrt(result    /    criterion.length);    	non-compiled	[CE]  cannot  find  symbol  result	4	None	replace
302	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  criterion,  factor);  [CE]  cannot  find  symbol  remaining  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remaining  /  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remaining  /  criterion,  factor);	  return    Math.sqrt(remaining    /    criterion.length);    	non-compiled	[CE]  cannot  find  symbol  remaining	48	None	replace
303	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	91	None	replace
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
305	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  criterion.getWeight()  *  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  criterion.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  criterion.getWeight()  *	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getResidual();    criterion    +=    criterion.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
306	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getErrors();  criterion  +=  criterion.getWeight()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getErrors();  criterion  +=  criterion.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getErrors();  criterion  +=  criterion.getWeight()  *	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getResidual();    criterion    +=    criterion.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
307	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i],  criterion  +=  problem.getResidual()  *  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i],  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [i],  criterion  +=  problem.getResidual()  *	  EstimationProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  ';'  expected	58	None	replace
308	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [0];  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [0];  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [0];  criterion  +=  problem.getResidual()  *	  EstimationProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  metrics.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  metrics.length;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  metrics.length;  ++i)  {	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
310	[BUG]  [BUGGY]  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(remaining  *  wm.length);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(remaining  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(remaining  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(remaining    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  remaining	28	None	replace
311	[BUG]  [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
312	[BUG]  [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
313	[BUG]  [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
314	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }  [CE]  >  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(criterion);    }    	non-compiled	[CE]  >  expected	74	None	replace
315	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  metrics.length;  ++i)  {  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  metrics.length;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  metrics.length;  ++i)  {	  For(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	42	None	replace
316	[BUG]  [BUGGY]  Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  '.class'  expected	17	None	replace
317	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
318	[BUG]  [BUGGY]  return  Math.sqrt(variable  /  criterion);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(variable  /  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(variable  /  criterion);	  return    Math.sqrt(remaining    /    criterion);    	non-compiled	[CE]  cannot  find  symbol  	69	None	replace
319	[BUG]  [BUGGY]  EstimationProblem  problem  =  parameters[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  parameters[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  parameters[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	3	None	replace
320	[BUG]  [BUGGY]  RectangleEdge  wm  =  problematic.getMeasurements();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  problematic.getMeasurements();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  problematic.getMeasurements();	  RectangleEdge    wm    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
321	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [CE]  cannot  find  symbol  residual  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol  residual	120	None	replace
322	[BUG]  [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
323	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	120	None	replace
324	[BUG]  [BUGGY]  return  Math.sqrt(problem.length  *  criterion);  [CE]  cannot  find  symbol  length  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(problem.length  *  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(problem.length  *  criterion);	  return    Math.sqrt(problem.length    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  length	82	None	replace
325	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  *  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  *	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
326	[BUG]  [BUGGY]  Result  result  =  Math.sqrt(result  *  wm.length);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Result  result  =  Math.sqrt(result  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Result  result  =  Math.sqrt(result  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    cost    +=    Math.rint(criterion    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
327	[BUG]  [BUGGY]  result  +=  Math.sqrt(result  *  wm.length);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  +=  Math.sqrt(result  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  +=  Math.sqrt(result  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    cost    +=    Math.rint(criterion    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  result	105	None	replace
328	[BUG]  [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	NeighborProblem  problem  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  problem.getWeight()  *	  NeighborProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  wm.length  +  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	add	return  Math.sqrt(criterion  /  wm.length  +  1);	  return    Math.sqrt(criterion    *    wm.length    +    1);    	compilable	  [FE]  AssertionFailedError  	47	9	replace
330	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  wm.length  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  wm.length  +  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  /  wm.length  +  1);	  return    Math.sqrt(criterion    *    wm.length    +    1);    	compilable	  [FE]  AssertionFailedError  	47	9	replace
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  2);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	add	return  Math.sqrt(criterion  *  wm.length  +  2);	  return    Math.sqrt(criterion    *    wm.length    +    1);    	compilable	  [FE]  AssertionFailedError  	47	9	replace
332	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  2);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  2);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  wm.length  +  2);	  return    Math.sqrt(criterion    *    wm.length    +    1);    	compilable	  [FE]  AssertionFailedError  	47	9	replace
333	[BUG]  [BUGGY]  result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWe    	non-compiled	[CE]  ';'  expected	24	None	replace
334	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWe    	non-compiled	[CE]  not  a  statement	24	None	replace
335	[BUG]  [BUGGY]  GravedMeasurement  problem  =  wm[i].getMeasurements();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  GravedMeasurement  problem  =  wm[i].getMeasurements();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	GravedMeasurement  problem  =  wm[i].getMeasurements();  criterion  +=  problem.getWeight()  *	  GravedMeasurement    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
336	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  //  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  //  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  //	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    //    	non-compiled	[CE]  ';'  expected	116	None	replace
337	[BUG]  [BUGGY]  if(result!=  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  cannot  find  symbol  result  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result!=  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result!=  null)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    //    	non-compiled	[CE]  cannot  find  symbol  result	116	None	replace
338	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidule();  criterion  +=  wm[i].getWeight()  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidule();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidule();  criterion  +=  wm[i].getWeight()  *	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
339	[BUG]  [BUGGY]  result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight    	non-compiled	[CE]  ';'  expected	76	None	replace
340	[BUG]  [BUGGY]  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(period  *  wm.length);  [CE]  cannot  find  symbol  period  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(period  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(period  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(period    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  period	29	None	replace
341	[BUG]  [BUGGY]  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(remainder  *  wm.length);  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(remainder  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(remainder  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(period    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  remainder	29	None	replace
342	[BUG]  [BUGGY]  Return  Math.sqrt(remainder  *  wm.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Return  Math.sqrt(remainder  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Return  Math.sqrt(remainder  *  wm.length);	  Return    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  ';'  expected	110	None	replace
343	[BUG]  [BUGGY]  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result  *	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    result    *    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
344	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(p  *  wm.length,  factor);  }  [CE]  cannot  find  symbol  p  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(p  *  wm.length,  factor);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(p  *  wm.length,  factor);  }	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  p	106	None	replace
345	[BUG]  [BUGGY]  return  Math.sqrt(result  /  problem);  [CE]  cannot  find  symbol  result  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result  /  problem);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  /  problem);	  return    Math.sqrt(criterion    /    problem);    	non-compiled	[CE]  cannot  find  symbol  result	87	None	replace
346	[BUG]  [BUGGY]  return  Math.sqrt(result,  criterion  /  problem);  [CE]  cannot  find  symbol  result  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result,  criterion  /  problem);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result,  criterion  /  problem);	  return    Math.sqrt(criterion    /    problem);    	non-compiled	[CE]  cannot  find  symbol  result	87	None	replace
347	[BUG]  [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
348	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  result;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  result;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  result;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
349	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }  [CE]  cannot  find  symbol  result  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  result	20	None	replace
350	[BUG]  [BUGGY]  Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }  [CE]  '.class'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  '.class'  expected	20	None	replace
351	[BUG]  [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(result  *  wm.length);  [CE]  cannot  find  symbol  ger  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(result  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger.sqrt(criterion  *  wm.length);  return  Math.sqrt(result  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(criterian    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  ger	27	None	replace
352	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	43	None	replace
353	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }  [CE]  cannot  find  symbol  residual  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol  residual	75	None	replace
354	[BUG]  [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }  [CE]  not  a  statement  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	75	None	replace
355	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    criterion;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
356	[BUG]  [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  [CE]  not  a  statement  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	75	None	replace
357	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	111	None	replace
358	[BUG]  [BUGGY]  foundRaw(result,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    ref    *    residual;    }    	non-compiled	[CE]  ';'  expected	109	None	replace
359	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [CE]  '.class'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  For(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {	  For(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  '.class'  expected	16	None	replace
360	[BUG]  [BUGGY]  EstimationProblem  problem  =  parameters[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  parameters[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  parameters[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	36	None	replace
361	[BUG]  [BUGGY]  ger  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	13	None	replace
362	[BUG]  [BUGGY]  int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    parameters.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	112	None	replace
363	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS()  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS()  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS()	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  >  expected	71	None	replace
364	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  wm);	  return    Math.sqrt(criterion    *    residual);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	34	None	replace
365	[BUG]  [BUGGY]  Integer  i  =  Math.min(result,  wm.length);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Integer  i  =  Math.min(result,  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Integer  i  =  Math.min(result,  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    int    i    =    Math.min(result,    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	64	None	replace
366	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measures.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  measures.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measures.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    measures    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	79	None	replace
367	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].    	non-compiled	[CE]  not  a  statement	23	None	replace
368	[BUG]  [BUGGY]  result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].    	non-compiled	[CE]  ';'  expected	23	None	replace
369	[BUG]  [BUGGY]  ger  }  else  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger  }  else  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger  }  else  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem	  ger    }    else    if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.    	non-compiled	[CE]  not  a  statement	84	None	replace
370	[BUG]  [BUGGY]  ger  }  else  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger  }  else  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger  }  else  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem	  ger    }    else    if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.    	non-compiled	[CE]  not  a  statement	84	None	replace
371	[BUG]  [BUGGY]  if(result!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	70	None	replace
372	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  cannot  find  symbol  residual  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol  residual	119	None	replace
373	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  ';'  expected	119	None	replace
374	[BUG]  [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	119	None	replace
375	[BUG]  [BUGGY]  return  Math.sqrt(variable  /  wm.length,  criterion);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(variable  /  wm.length,  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(variable  /  wm.length,  criterion);	  return    Math.sqrt(result    /    wm.length,    criterion);    	non-compiled	[CE]  cannot  find  symbol  	6	None	replace
376	[BUG]  [BUGGY]  return  Math.sqrt(result  /  wm.length,  coefficient);  [CE]  cannot  find  symbol  result  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result  /  wm.length,  coefficient);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  /  wm.length,  coefficient);	  return    Math.sqrt(result    /    wm.length,    criterion);    	non-compiled	[CE]  cannot  find  symbol  result	6	None	replace
377	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getRMS();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  >  expected	55	None	replace
378	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS()  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS()  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS()	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getRMS();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  ';'  expected	55	None	replace
379	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [0];  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [0];  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [0];  criterion  +=  problem.getResidual()  *	  EstimationProblem    criterion    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
380	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i],  criterion  +=  problem.getResidual()  *  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i],  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i],  criterion  +=  problem.getResidual()  *	  EstimationProblem    criterion    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  ';'  expected	59	None	replace
381	[BUG]  [BUGGY]  return  Math.sqrt(problem.remaining  *  criterion);  [CE]  cannot  find  symbol  remaining  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(problem.remaining  *  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(problem.remaining  *  criterion);	  return    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remaining	83	None	replace
382	[BUG]  [BUGGY]  foundRaw(result,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  ';'  expected	108	None	replace
383	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  int  costEvaluations  =  parameters.size();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  int  costEvaluations  =  parameters.size();  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    /    cost);    int  costEvaluations  =  parameters.size();	  	non-compiled	[CE]  cannot  find  symbol	31	None	add
384	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  EstimationProblem  cost  =  problem.getResidual();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  EstimationProblem  cost  =  problem.getResidual();  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    /    cost);    EstimationProblem  cost  =  problem.getResidual();	  	non-compiled	[CE]  cannot  find  symbol	31	None	add
385	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  int  costEvaluations  =  parameters.length;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  int  costEvaluations  =  parameters.length;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    /    cost);    int  costEvaluations  =  parameters.length;	  	non-compiled	[CE]  unreachable  statement	31	None	add
386	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  samples.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  samples.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    samples    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
387	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  result;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  result;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  result;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
388	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  result;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  result;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  result;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
389	[BUG]  [BUGGY]  Pr14fionProblem  problem  =  problem.getMeasurements()  [i],  criterion  +=  problem.getResidual()  *  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Pr14fionProblem  problem  =  problem.getMeasurements()  [i],  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Pr14fionProblem  problem  =  problem.getMeasurements()  [i],  criterion  +=  problem.getResidual()  *	  PrüfionProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  ';'  expected	60	None	replace
390	[BUG]  [BUGGY]  Pr14fionProblem  problem  =  problem.getMeasurements()  [i  +  1];  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Pr14fionProblem  problem  =  problem.getMeasurements()  [i  +  1];  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Pr14fionProblem  problem  =  problem.getMeasurements()  [i  +  1];  criterion  +=  problem.getResidual()  *	  PrüfionProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
391	[BUG]  [BUGGY]  RectangleEdge  wm  =  problems.getResidualEdges();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  problems.getResidualEdges();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  problems.getResidualEdges();	  RectangleEdge    wm    =    problem.getResidualEdges();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
392	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  result;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  result;  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  result;	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    Residue    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	117	None	replace
393	[BUG]  [BUGGY]  if(result  >  0.0)  {  return  Math.sqrt(criterion  *  wm.length);  }  else  {  return  Math.sqrt(criterion  *  wm.length);  }  [CE]  cannot  find  symbol  result  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result  >  0.0)  {  return  Math.sqrt(criterion  *  wm.length);  }  else  {  return  Math.sqrt(criterion  *  wm.length);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  >  0.0)  {  return  Math.sqrt(criterion  *  wm.length);  }  else  {  return  Math.sqrt(criterion  *  wm.length);  }	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	26	None	replace
394	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS()  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS()  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS()	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  ';'  expected	56	None	replace
395	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  >  expected	93	None	replace
396	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getRMS();  criterion  +=  problem.getWeight()  *	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
397	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getErrors();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getErrors();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getErrors();  criterion  +=  problem.getWeight()  *	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
398	[BUG]  [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    residual;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
399	[BUG]  [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  [CE]  not  a  statement  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    residual;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
400	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	73	None	replace
401	[BUG]  [BUGGY]  return  Math.sqrt(result  *  residual);  [CE]  cannot  find  symbol  result  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(result  *  residual);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  *  residual);	  return    Math.sqrt(criterion    /    cost);    	non-compiled	[CE]  cannot  find  symbol  result	32	None	replace
402	[BUG]  [BUGGY]  RectangleEdge  wm  =  parameters[i].getMeasurements();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  parameters[i].getMeasurements();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  parameters[i].getMeasurements();	  RectangleEdge    wm    =    parameters[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
403	[BUG]  [BUGGY]  RectangleEdge  wm  =  variables[i].getResidual();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  variables[i].getResidual();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  variables[i].getResidual();	  RectangleEdge    wm    =    parameters[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
404	[BUG]  [BUGGY]  ger  }  else  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger  }  else  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger  }  else  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *	  if(problem!=    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  not  a  statement	123	None	replace
405	[BUG]  [BUGGY]  ger  }  else  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResi  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  ger  }  else  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResi  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger  }  else  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResi	  if(problem!=    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  not  a  statement	123	None	replace
406	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.sqrt(remainder  *  wm.length  -  1);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.sqrt(remainder  *  wm.length  -  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    -    1);    Math.sqrt(remainder  *  wm.length  -  1);	  	non-compiled	[CE]  cannot  find  symbol  remainder	113	None	add
407	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.rint(result  *  wm.length  -  1);  [CE]  cannot  find  symbol  result  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.rint(result  *  wm.length  -  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    -    1);    Math.rint(result  *  wm.length  -  1);	  	non-compiled	[CE]  cannot  find  symbol  result	113	None	add
408	[BUG]  [BUGGY]  Math.rint(remaining  *  wm.length);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.rint(remaining  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.rint(remaining  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	103	None	replace
409	[BUG]  [BUGGY]  Math.rint(remaining  /  wm.length);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.rint(remaining  /  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.rint(remaining  /  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	103	None	replace
410	[BUG]  [BUGGY]  Math.rint(remaining)*  wm.length);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.rint(remaining)*  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.rint(remaining)*  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  not  a  statement	103	None	replace
411	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  Math.sqrt(remainder  *  wm.length  +  1);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  Math.sqrt(remainder  *  wm.length  +  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    +    1);    Math.sqrt(remainder  *  wm.length  +  1);	  	non-compiled	[CE]  cannot  find  symbol  remainder	46	None	add
412	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  Math.sqrt(criterion  *  wm.length  +  2);  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  Math.sqrt(criterion  *  wm.length  +  2);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    +    1);    Math.sqrt(criterion  *  wm.length  +  2);	  	non-compiled	[CE]  unreachable  statement	46	None	add
413	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  Math.sqrt(remaining  *  wm.length  +  2);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  Math.sqrt(remaining  *  wm.length  +  2);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    +    1);    Math.sqrt(remaining  *  wm.length  +  2);	  	non-compiled	[CE]  cannot  find  symbol  remaining	46	None	add
414	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  not  a  statement	21	None	replace
415	[BUG]  [BUGGY]  result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  ';'  expected	21	None	replace
416	[BUG]  [BUGGY]  result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  ';'  expected	21	None	replace
417	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  residual	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
418	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  wm.length  -  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	add	return  Math.sqrt(criterion  /  wm.length  -  1);	  return    Math.sqrt(criterion    *    wm.length    -    1);    	compilable	  [FE]  AssertionFailedError  	114	10	replace
420	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  wm.length  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  wm.length  -  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  /  wm.length  -  1);	  return    Math.sqrt(criterion    *    wm.length    -    1);    	compilable	  [FE]  AssertionFailedError  	114	10	replace
421	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i].getResidual();  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i].getResidual();  criterion  +=  problem.getResidual()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [i].getResidual();  criterion  +=  problem.getResidual()  *	  if(result!=    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
422	[BUG]  [BUGGY]  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	115	None	replace
423	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidule();  criterion  +=  wm[i].getWeight()  *  factor  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidule();  criterion  +=  wm[i].getWeight()  *  factor  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidule();  criterion  +=  wm[i].getWeight()  *  factor	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	115	None	replace
424	[BUG]  [BUGGY]  result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    	non-compiled	[CE]  ';'  expected	35	None	replace
425	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    	non-compiled	[CE]  not  a  statement	35	None	replace
426	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  /  cost);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  /  cost);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    /    cost);    if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  /  cost);  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
427	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    /    cost);    if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor;  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
428	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    /    cost);    if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
429	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  if(result  >  0)  {  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  parameters[i]  =  parameters[i].getMeasurements();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  /  cost);  if(result  >  0)  {  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  parameters[i]  =  parameters[i].getMeasurements();  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    /    cost);    if(result  >  0)  {  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  parameters[i]  =  parameters[i].getMeasurements();  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
430	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  ';'  expected	108	None	replace
431	[BUG]  [BUGGY]  result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  not  a  statement	108	None	replace
432	[BUG]  [BUGGY]  if(result  ==  0.0)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  Residue  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result  ==  0.0)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  Residue  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  ==  0.0)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  Residue	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    Residue    	non-compiled	[CE]  ';'  expected	117	None	replace
433	[BUG]  [BUGGY]  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  factor  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  factor  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  factor	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    Residue    	non-compiled	[CE]  ';'  expected	117	None	replace
434	[BUG]  [BUGGY]  Math.sqrt(criterion  *  wm.length,  residual);  return  Math.sqrt(remainder  *  wm.length);  [CE]  cannot  find  symbol  residual  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(criterion  *  wm.length,  residual);  return  Math.sqrt(remainder  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(criterion  *  wm.length,  residual);  return  Math.sqrt(remainder  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(period    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  residual	29	None	replace
435	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
436	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  criterion;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  criterion;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  criterion;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    criterion;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
437	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  criterion;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  criterion;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  criterion;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    criterion;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
438	[BUG]  [BUGGY]  RectangleEdge  wm  =  problem.getResidualEdges(criterion);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  problem.getResidualEdges(criterion);  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  problem.getResidualEdges(criterion);	  RectangleEdge    wm    =    problem.getResidualEdges();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
439	[BUG]  [BUGGY]  RectangleEdge  wm  =  problem.getResidualEdges(result);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  problem.getResidualEdges(result);  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  problem.getResidualEdges(result);	  RectangleEdge    wm    =    problem.getResidualEdges();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
440	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i].getStandardErrors();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i].getStandardErrors();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [i].getStandardErrors();  criterion  +=  problem.getWeight()  *	  EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
441	[BUG]  [BUGGY]  RectangleEdge  wm  =  this.problem.getMeasurements();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  this.problem.getMeasurements();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  this.problem.getMeasurements();	  RectangleEdge    wm    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
442	[BUG]  [BUGGY]  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    remaining    *    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
443	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  issues[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  issues[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  issues[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getRMS();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
444	[BUG]  [BUGGY]  int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  >  expected	13	None	replace
445	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	13	None	replace
446	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ".);  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
447	[BUG]  [BUGGY]  result[i]  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result[i]  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result[i]  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].    	non-compiled	[CE]  not  a  statement	23	None	replace
448	[BUG]  [BUGGY]  return  Math.sqrt(problem.remaining  /  criterion);  [CE]  cannot  find  symbol  remaining  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(problem.remaining  /  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(problem.remaining  /  criterion);	  return    Math.sqrt(remaining    /    criterion);    	non-compiled	[CE]  cannot  find  symbol  remaining	69	None	replace
449	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  criterion,  wm.length);  [CE]  cannot  find  symbol  remainder  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remainder  *  criterion,  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remainder  *  criterion,  wm.length);	  return    Math.sqrt(result    *    criterion,    wm.length);    	non-compiled	[CE]  cannot  find  symbol  remainder	8	None	replace
450	[BUG]  [BUGGY]  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  }	  if(problem!=    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
451	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  cost  *  factor;  }  [CE]  cannot  find  symbol  factor  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  cost  *  factor;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  cost  *  factor;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  factor	19	None	replace
452	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  coefficient  *  residual;  }  [CE]  cannot  find  symbol  coefficient  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  coefficient  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  coefficient  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  coefficient	19	None	replace
453	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost  *  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  cost  *	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
454	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  +  factor  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  +  factor  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  +  factor	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	43	None	replace
455	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
456	[BUG]  [BUGGY]  Corrections.checkState(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Corrections.checkState(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Corrections.checkState(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
457	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  result;  }  [CE]  not  a  statement  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  result;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  result;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
458	[BUG]  [BUGGY]  GravedMeasurement  problem  =  wm[i].getMeasurements()  [i].getResidual();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  GravedMeasurement  problem  =  wm[i].getMeasurements()  [i].getResidual();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	GravedMeasurement  problem  =  wm[i].getMeasurements()  [i].getResidual();  criterion  +=  problem.getWeight()  *	  GravedMeasurement    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
459	[BUG]  [BUGGY]  GravedMeasurement  problem  =  problems[i].getMeasurements();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  GravedMeasurement  problem  =  problems[i].getMeasurements();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	GravedMeasurement  problem  =  problems[i].getMeasurements();  criterion  +=  problem.getWeight()  *	  GravedMeasurement    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
460	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    ref    *    residual;    }    	non-compiled	[CE]  ';'  expected	109	None	replace
461	[BUG]  [BUGGY]  foundRaw(result,  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    ref    *    residual;    }    	non-compiled	[CE]  ';'  expected	109	None	replace
462	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  amount  *  residual;  }  [CE]  cannot  find  symbol  amount  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  amount  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  amount  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  amount	18	None	replace
463	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  criterion,  factor);  [CE]  cannot  find  symbol  remainder  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remainder  *  criterion,  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remainder  *  criterion,  factor);	  return    Math.sqrt(remainder    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	89	None	replace
464	[BUG]  [BUGGY]  return  Math.sqrt(problem.getRMS()  *  criterion);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(problem.getRMS()  *  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(problem.getRMS()  *  criterion);	  return    Math.sqrt(remainder    *    criterion);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
465	[BUG]  [BUGGY]  return  Math.sqrt(problem.getRMS(remainder)*  criterion);  [CE]  cannot  find  symbol  remainder  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(problem.getRMS(remainder)*  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(problem.getRMS(remainder)*  criterion);	  return    Math.sqrt(remainder    *    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	89	None	replace
466	[BUG]  [BUGGY]  Math.sqrt(criterion  *  wm.length,  residual);  return  Math.sqrt(remaining  *  wm.length);  [CE]  cannot  find  symbol  residual  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(criterion  *  wm.length,  residual);  return  Math.sqrt(remaining  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(criterion  *  wm.length,  residual);  return  Math.sqrt(remaining  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(remaining    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  residual	28	None	replace
467	[BUG]  [BUGGY]  angle2D  -=  wm[i].getResidual();  [CE]  cannot  find  symbol  angle2D  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  angle2D  -=  wm[i].getResidual();  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	angle2D  -=  wm[i].getResidual();	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol  angle2D	119	None	replace
468	[BUG]  [BUGGY]  Corrections.checkState(remaining  >  0);  [CE]  cannot  find  symbol  remaining  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Corrections.checkState(remaining  >  0);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Corrections.checkState(remaining  >  0);	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol  remaining	119	None	replace
469	[BUG]  [BUGGY]  RectangleEdge  rect  =  problem.getResidualEdges();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  rect  =  problem.getResidualEdges();  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  rect  =  problem.getResidualEdges();	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
470	[BUG]  [BUGGY]  angle2D  -=  wm[i].getResidual()  *  criterion;  [CE]  cannot  find  symbol  angle2D  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  angle2D  -=  wm[i].getResidual()  *  criterion;  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	angle2D  -=  wm[i].getResidual()  *  criterion;	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol  angle2D	119	None	replace
471	[BUG]  [BUGGY]  Math.sqrt(criterion  /  wm.length);  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(criterion  /  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(criterion  /  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  missing  return  statement	25	None	replace
472	[BUG]  [BUGGY]  Math.sqrt(criterion  *  wm.length,  residual);  [CE]  cannot  find  symbol  residual  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(criterion  *  wm.length,  residual);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(criterion  *  wm.length,  residual);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  residual	25	None	replace
473	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    measures    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	79	None	replace
474	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length  +  1);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length  +  1);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length  +  1);  }	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
475	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.cos(criterion  *  wm.length);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.cos(criterion  *  wm.length);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.cos(criterion  *  wm.length);  }	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
476	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  factor;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  factor;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	121	None	replace
477	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	121	None	replace
478	[BUG]  [BUGGY]  Return  Math.sqrt(criterion  *  wm.length  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Return  Math.sqrt(criterion  *  wm.length  -  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Return  Math.sqrt(criterion  *  wm.length  -  1);	  Return    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  ';'  expected	110	None	replace
479	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.rint(criterion  *  wm.length  -  1);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.rint(criterion  *  wm.length  -  1);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    -    1);    Math.rint(criterion  *  wm.length  -  1);	  	non-compiled	[CE]  unreachable  statement	113	None	add
480	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.sqrt(criterion  *  wm.length  -  1));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  Math.sqrt(criterion  *  wm.length  -  1));  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    -    1);    Math.sqrt(criterion  *  wm.length  -  1));	  	non-compiled	[CE]  ';'  expected	113	None	add
481	[BUG]  [BUGGY]  Corrections.checkState(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Corrections.checkState(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Corrections.checkState(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
482	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  criterion;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  criterion;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  criterion;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
483	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight    	non-compiled	[CE]  not  a  statement	76	None	replace
484	[BUG]  [BUGGY]  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  }	  if(problem!=    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
485	[BUG]  [BUGGY]  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getWeight()  *  }	  if(problem!=    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
486	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    samples    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	78	None	replace
487	[BUG]  [BUGGY]  int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    WeightedMeasurement[]    samples    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  >  expected	78	None	replace
488	[BUG]  [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  }	  if(result!=    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()    [i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
489	[BUG]  [BUGGY]  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterian  *  wm.length);  [CE]  cannot  find  symbol  criterian  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterian  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterian  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion    *    wm.length);    return    Math.sqrt(criterian    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  criterian	27	None	replace
490	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    parameters.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
491	[BUG]  [BUGGY]  return  Math.sqrt(problem.length  *  criterion.length);  [CE]  cannot  find  symbol  length  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(problem.length  *  criterion.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(problem.length  *  criterion.length);	  return    Math.sqrt(remaining    *    criterion.length);    	non-compiled	[CE]  cannot  find  symbol  length	40	None	replace
492	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.remainder);  [CE]  cannot  find  symbol  remainder  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.remainder);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  wm.remainder);	  return    Math.sqrt(criterion    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remainder	34	None	replace
493	[BUG]  [BUGGY]  if(result  >  0.0)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result  >  0.0)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  >  0.0)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	115	None	replace
494	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	115	None	replace
495	[BUG]  [BUGGY]  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.	  if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.    	non-compiled	[CE]  <identifier>  expected	11	None	replace
496	[BUG]  [BUGGY]  NeighborProblem  problem  =  wm.getMeasurements()  [i].getResidual();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  NeighborProblem  problem  =  wm.getMeasurements()  [i].getResidual();  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	NeighborProblem  problem  =  wm.getMeasurements()  [i].getResidual();  criterion  +=  problem.getWeight()  *	  NeighborProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
497	[BUG]  [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  wm[i].getWeight()  *  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	NeighborProblem  problem  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  wm[i].getWeight()  *	  NeighborProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  ';'  expected	85	None	replace
498	[BUG]  [BUGGY]  return  Math.sqrt(region  *  wm.length,  criterion);  [CE]  cannot  find  symbol  region  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(region  *  wm.length,  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(region  *  wm.length,  criterion);	  return    Math.sqrt(region    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  region	88	None	replace
499	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  problem.getWeight()  *  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  problem.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  problem.getWeight()  *	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  ';'  expected	54	None	replace
500	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  wm.length,  criterion);  [CE]  cannot  find  symbol  remainder  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remainder  *  wm.length,  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remainder  *  wm.length,  criterion);	  return    Math.sqrt(result    /    wm.length,    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	6	None	replace
501	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  wm.length,  criterion);  [CE]  cannot  find  symbol  remainder  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remainder  /  wm.length,  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remainder  /  wm.length,  criterion);	  return    Math.sqrt(result    /    wm.length,    criterion);    	non-compiled	[CE]  cannot  find  symbol  remainder	6	None	replace
502	[BUG]  [BUGGY]  n  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  n  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	n  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
503	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(remainder  *  wm[i].getResidual()  >  0)  {  return  Math.sqrt(criterion  *  wm.length  +  1);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(remainder  *  wm[i].getResidual()  >  0)  {  return  Math.sqrt(criterion  *  wm.length  +  1);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    +    1);    for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(remainder  *  wm[i].getResidual()  >  0)  {  return  Math.sqrt(criterion  *  wm.length  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
504	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(remainder  *  wm[i].getResidual()  >  factor)  {  return  Math.sqrt(criterion  *  wm.length  +  1);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(remainder  *  wm[i].getResidual()  >  factor)  {  return  Math.sqrt(criterion  *  wm.length  +  1);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    +    1);    for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(remainder  *  wm[i].getResidual()  >  factor)  {  return  Math.sqrt(criterion  *  wm.length  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
505	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(remainder  *  wm[i].getResidual()!=  factor)  {  return  Math.sqrt(criterion  *  wm.length  +  1);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(remainder  *  wm[i].getResidual()!=  factor)  {  return  Math.sqrt(criterion  *  wm.length  +  1);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length    +    1);    for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(remainder  *  wm[i].getResidual()!=  factor)  {  return  Math.sqrt(criterion  *  wm.length  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
506	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    parameters.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
507	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  wm[i].getWeight()  *  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  wm[i].getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getResidual(),  criterion  +=  wm[i].getWeight()  *	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getResidual();    criterion    +=    criterion.getWeight()    *    	non-compiled	[CE]  ';'  expected	86	None	replace
508	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getStandardResidual();  criterion  +=  criterion.getWeight()  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getStandardResidual();  criterion  +=  criterion.getWeight()  *  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getStandardResidual();  criterion  +=  criterion.getWeight()  *	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getResidual();    criterion    +=    criterion.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
509	[BUG]  [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  >  expected	71	None	replace
510	[BUG]  [BUGGY]  Corrections.checkState(remaining  >  0);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [CE]  cannot  find  symbol  remaining  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Corrections.checkState(remaining  >  0);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Corrections.checkState(remaining  >  0);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol  remaining	120	None	replace
511	[BUG]  [BUGGY]  Corrections.checkState(remaining  >  0);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  factor;  }  [CE]  cannot  find  symbol  remaining  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Corrections.checkState(remaining  >  0);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Corrections.checkState(remaining  >  0);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  result  *  factor;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol  remaining	120	None	replace
512	[BUG]  [BUGGY]  Corrections.checkState(remaining  >  0);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor;  }  [CE]  cannot  find  symbol  remaining  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Corrections.checkState(remaining  >  0);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Corrections.checkState(remaining  >  0);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol  remaining	120	None	replace
513	[BUG]  [BUGGY]  Corrections.checkState(remaining  >  0);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  ref  *  factor;  }  [CE]  cannot  find  symbol  remaining  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Corrections.checkState(remaining  >  0);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  ref  *  factor;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Corrections.checkState(remaining  >  0);  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  ref  *  factor;  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getResidual()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol  remaining	120	None	replace
514	[BUG]  [BUGGY]  Return  Math.sqrt(remainder  /  wm.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Return  Math.sqrt(remainder  /  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Return  Math.sqrt(remainder  /  wm.length);	  Return    Math.sqrt(criterion    /    wm.length);    	non-compiled	[CE]  ';'  expected	97	None	replace
515	[BUG]  [BUGGY]  Math.sqrt(reciterion  *  wm.length);  [CE]  cannot  find  symbol  reciterion  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(reciterion  *  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(reciterion  *  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(remaining    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  reciterion	63	None	replace
516	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  factor);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remainder  /  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remainder  /  factor);	  return    Math.sqrt(criterion    /    cost);    	non-compiled	[CE]  cannot  find  symbol  remainder	32	None	replace
517	[BUG]  [BUGGY]  Corrections.checkState(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Corrections.checkState(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Corrections.checkState(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	  if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
518	[BUG]  [BUGGY]  return  Math.sqrt(problem.getRMS()  /  criterion);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(problem.getRMS()  /  criterion);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(problem.getRMS()  /  criterion);	  return    Math.sqrt(remainder    /    criterion);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
519	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ".);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
520	[BUG]  [BUGGY]  return  Math.sqrt(problem.sqrt(criterion)/  problem);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(problem.sqrt(criterion)/  problem);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(problem.sqrt(criterion)/  problem);	  return    Math.sqrt(criterion    /    problem);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
521	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  problem);  [CE]  cannot  find  symbol  remainder  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remainder  /  problem);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remainder  /  problem);	  return    Math.sqrt(criterion    /    problem);    	non-compiled	[CE]  cannot  find  symbol  remainder	87	None	replace
522	[BUG]  [BUGGY]  Math.rint(criterion  /  wm.length);  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.rint(criterion  /  wm.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.rint(criterion  /  wm.length);	  return    Math.sqrt(criterion    *    wm.length);    Math.rint(criterion    *    wm.length);    	non-compiled	[CE]  missing  return  statement	61	None	replace
523	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  /  2);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	add	return  Math.sqrt(criterion  *  wm.length  /  2);	  return    Math.sqrt(criterion    *    wm.length    +    1);    	compilable	  [FE]  AssertionFailedError  	47	2	replace
524	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  /  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(criterion  *  wm.length  /  2);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  wm.length  /  2);	  return    Math.sqrt(criterion    *    wm.length    +    1);    	compilable	  [FE]  AssertionFailedError  	47	2	replace
525	[BUG]  [BUGGY]  Math.rint(criterion,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.rint(criterion,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.rint(criterion,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
526	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  criterion.length);  [CE]  cannot  find  symbol  remainder  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  return  Math.sqrt(remainder  *  criterion.length);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remainder  *  criterion.length);	  return    Math.sqrt(result    *    criterion.length);    	non-compiled	[CE]  cannot  find  symbol  remainder	7	None	replace
527	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length,  factor);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length,  factor);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length,  factor);  }	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length,    factor);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
528	[BUG]  [BUGGY]  Math.sqrt(criterion  *  wm.length,  factor);  [CE]  cannot  find  symbol  factor  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  Math.sqrt(criterion  *  wm.length,  factor);  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Math.sqrt(criterion  *  wm.length,  factor);	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length,    factor);    }    	non-compiled	[CE]  cannot  find  symbol  factor	106	None	replace
529	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm,  factor);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm,  factor);  }  [BUGGY]      }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm,  factor);  }	  return    Math.sqrt(criterion    *    wm.length);    if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    Math.sqrt(criterion    *    wm.length,    factor);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
530	[BUG]  [BUGGY]  if(remainder  >  0.0)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  cannot  find  symbol  remainder  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(remainder  >  0.0)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(remainder  >  0.0)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    //    	non-compiled	[CE]  cannot  find  symbol  remainder	116	None	replace
531	[BUG]  [BUGGY]  if(result  >  0.0)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  cannot  find  symbol  result  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  if(result  >  0.0)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  >  0.0)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    //    	non-compiled	[CE]  cannot  find  symbol  result	116	None	replace
532	[BUG]  [BUGGY]  RectangleEdge  wm  =  measurements[i].getResidual();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  measurements[i].getResidual();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  measurements[i].getResidual();	  RectangleEdge    wm    =    parameters[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
533	[BUG]  [BUGGY]  RectangleEdge  wm  =  parameters[i].getRsidual();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  RectangleEdge  wm  =  parameters[i].getRsidual();  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  parameters[i].getRsidual();	  RectangleEdge    wm    =    parameters[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
534	[BUG]  [BUGGY]  result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }      [BUGGY]  result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  not  a  statement	107	None	replace
