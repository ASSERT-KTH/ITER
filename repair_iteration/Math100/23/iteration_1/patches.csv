bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
3	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
4	[BUG]  [BUGGY]  return  Math.sqrt(result  /  criterion.length);  [CE]  cannot  find  symbol  result  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(result  /  criterion.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  /  criterion.length);	  return    Math.sqrt(remainder    /    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	13	None	replace
5	[BUG]  [BUGGY]  return  Math.sqrt(reciterion  /  wm.length);  [CE]  cannot  find  symbol  reciterion  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(reciterion  /  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(reciterion  /  wm.length);	  return    Math.sqrt(remainder    /    wm.length);    	non-compiled	[CE]  cannot  find  symbol  reciterion	13	None	replace
6	[BUG]  [BUGGY]  return  Math.sqrt(result  /  wm.length,  criterion);  [CE]  cannot  find  symbol  result  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(result  /  wm.length,  criterion);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  /  wm.length,  criterion);	  return    Math.sqrt(remainder    /    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	13	None	replace
7	[BUG]  [BUGGY]  return  Math.sqrt(result  *  criterion.length);  [CE]  cannot  find  symbol  result  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(result  *  criterion.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  *  criterion.length);	  return    Math.sqrt(result    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	12	None	replace
8	[BUG]  [BUGGY]  return  Math.sqrt(result  *  criterion,  wm.length);  [CE]  cannot  find  symbol  result  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(result  *  criterion,  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  *  criterion,  wm.length);	  return    Math.sqrt(result    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	12	None	replace
9	[BUG]  [BUGGY]  return  Math.sqrt(result  *  criterion);  [CE]  cannot  find  symbol  result  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(result  *  criterion);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  *  criterion);	  return    Math.sqrt(result    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	12	None	replace
10	[BUG]  [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    residual    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
11	[BUG]  [BUGGY]  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    residual    	non-compiled	[CE]  <identifier>  expected	9	None	replace
12	[BUG]  [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    residual    	non-compiled	[CE]  <identifier>  expected	9	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	17	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurement  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurement  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurement  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	17	None	replace
16	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  For(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measurements  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  '.class'  expected	17	None	replace
17	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  '.class'  expected	10	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  cannot  find  symbol  residual  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  residual	10	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [CE]  cannot  find  symbol  residual  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  residual	10	None	replace
20	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  '.class'  expected	10	None	replace
21	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    	non-compiled	[CE]  not  a  statement	21	None	replace
22	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
23	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    	non-compiled	[CE]  not  a  statement	21	None	replace
24	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWe	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    	non-compiled	[CE]  not  a  statement	21	None	replace
25	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(criterion  *  wm.length);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(criterion  *  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion  *  wm.length);	  	non-compiled	[CE]  unreachable  statement	1	None	add
26	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterion  *  wm.length);  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterion  *  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterion  *  wm.length);	  	non-compiled	[CE]  unreachable  statement	1	None	add
27	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterian  *  wm.length);  [CE]  cannot  find  symbol  criterian  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterian  *  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(criterian  *  wm.length);	  	non-compiled	[CE]  cannot  find  symbol  criterian	1	None	add
28	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(remaining  *  wm.length);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(remaining  *  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(remaining  *  wm.length);	  	non-compiled	[CE]  cannot  find  symbol  remaining	1	None	add
29	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(period  *  wm.length);  [CE]  cannot  find  symbol  period  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(period  *  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(criterion  *  wm.length);  return  Math.sqrt(period  *  wm.length);	  	non-compiled	[CE]  cannot  find  symbol  period	1	None	add
30	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  factor);  [CE]  cannot  find  symbol  factor  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  /  factor);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  /  factor);	  return    Math.sqrt(criterion    /    residual);    	non-compiled	[CE]  cannot  find  symbol  factor	22	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  /  cost);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	add	return  Math.sqrt(criterion  /  cost);	  return    Math.sqrt(criterion    /    residual);    	compilable	  [FE]  AssertionFailedError  	22	9	replace
32	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  cost);  [FE]  AssertionFailedError  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  /  cost);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  /  cost);	  return    Math.sqrt(criterion    /    residual);    	compilable	  [FE]  AssertionFailedError  	22	9	replace
33	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  result);  [CE]  cannot  find  symbol  result  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  /  result);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  /  result);	  return    Math.sqrt(criterion    /    residual);    	non-compiled	[CE]  cannot  find  symbol  result	22	None	replace
34	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual);  [CE]  cannot  find  symbol  residual  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  residual);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  residual);	  return    Math.sqrt(criterion    /    residual);    	non-compiled	[CE]  cannot  find  symbol  residual	22	None	replace
35	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  not  a  statement	19	None	replace
36	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	15	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
39	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  residual.length);  [CE]  cannot  find  symbol  residual  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  residual.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  residual.length);	  return    Math.sqrt(remaining    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  residual	4	None	replace
40	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  criterion.length);  [CE]  cannot  find  symbol  remaining  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(remaining  *  criterion.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remaining  *  criterion.length);	  return    Math.sqrt(remaining    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  remaining	4	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length;  ++i)  {	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
42	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  measurements.length;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  For(int  i  =  0;  i  <  measurements.length;  ++i)  {  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	For(int  i  =  0;  i  <  measurements.length;  ++i)  {	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	14	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	20	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
45	[BUG]  [BUGGY]  return  Math.sqrt(reciterion  *  wm.length);  [CE]  cannot  find  symbol  reciterion  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(reciterion  *  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(reciterion  *  wm.length);	  return    Math.sqrt(remainder    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  reciterion	3	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	add	return  Math.sqrt(criterion  *  wm.length  +  1);	  return    Math.sqrt(criterion    *    wm.length);    	compilable	  [FE]  AssertionFailedError  	2	9	replace
47	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length  +  1);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  wm.length  +  1);	  return    Math.sqrt(criterion    *    wm.length);    	compilable	  [FE]  AssertionFailedError  	2	9	replace
48	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  criterion.length);  [CE]  cannot  find  symbol  remaining  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(remaining  /  criterion.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remaining  /  criterion.length);	  return    Math.sqrt(remaining    /    wm.length);    	non-compiled	[CE]  cannot  find  symbol  remaining	5	None	replace
49	[BUG]  [BUGGY]  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
50	[BUG]  [BUGGY]  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
51	[BUG]  [BUGGY]  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  residual;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
52	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
53	[BUG]  [BUGGY]  GravedMeasurement  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  GravedMeasurement  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	GravedMeasurement  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
54	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS();  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
57	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	18	None	replace
58	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
59	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
60	[BUG]  [BUGGY]  PrüfionProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  PrüfionProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	PrüfionProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
61	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.rint(criterion  *  wm.length);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.rint(criterion  *  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length);    Math.rint(criterion  *  wm.length);	  	non-compiled	[CE]  unreachable  statement	1	None	add
62	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(result  *  wm.length);  [CE]  cannot  find  symbol  result  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(result  *  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(result  *  wm.length);	  	non-compiled	[CE]  cannot  find  symbol  result	1	None	add
63	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(remaining  *  wm.length);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  Math.sqrt(remaining  *  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length);    Math.sqrt(remaining  *  wm.length);	  	non-compiled	[CE]  cannot  find  symbol  remaining	1	None	add
64	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  int  i  =  Math.min(result,  wm.length);  [CE]  cannot  find  symbol  result  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  int  i  =  Math.min(result,  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length);    int  i  =  Math.min(result,  wm.length);	  	non-compiled	[CE]  cannot  find  symbol  result	1	None	add
65	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
66	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
67	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
68	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
69	[BUG]  [BUGGY]  return  Math.sqrt(remaining  /  criterion);  [CE]  cannot  find  symbol  remaining  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(remaining  /  criterion);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remaining  /  criterion);	  return    Math.sqrt(remaining    /    wm.length);    	non-compiled	[CE]  cannot  find  symbol  remaining	5	None	replace
70	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	15	None	replace
71	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  return  problem.getRMS();  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  >  expected	18	None	replace
72	[BUG]  [BUGGY]  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(criterion);  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
75	[BUG]  [BUGGY]  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
76	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    	non-compiled	[CE]  not  a  statement	21	None	replace
77	[BUG]  [BUGGY]  return  Math.sqrt(result  /  criterion);  [CE]  cannot  find  symbol  result  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(result  /  criterion);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  /  criterion);	  return    Math.sqrt(result    /    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	11	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  samples  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	17	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurements.length;  ++i)  {  WeightedMeasurement[]  measures  =  problem.getMeasurements();  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  Estimati	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    Estimati    	non-compiled	[CE]  not  a  statement	17	None	replace
80	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	16	None	replace
81	[BUG]  [BUGGY]  return  Math.sqrt(result  *  wm.length  +  1);  [CE]  cannot  find  symbol  result  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(result  *  wm.length  +  1);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(result  *  wm.length  +  1);	  return    Math.sqrt(criterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  result	2	None	replace
82	[BUG]  [BUGGY]  return  Math.sqrt(problem.length  *  wm.length);  [CE]  cannot  find  symbol  length  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(problem.length  *  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(problem.length  *  wm.length);	  return    Math.sqrt(remaining    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  length	4	None	replace
83	[BUG]  [BUGGY]  return  Math.sqrt(remaining  *  criterion);  [CE]  cannot  find  symbol  remaining  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(remaining  *  criterion);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remaining  *  criterion);	  return    Math.sqrt(remaining    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  remaining	4	None	replace
84	[BUG]  [BUGGY]  ger  }  else  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  ger  }  else  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	ger  }  else  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    residual    	non-compiled	[CE]  not  a  statement	9	None	replace
85	[BUG]  [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  NeighborProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	NeighborProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
86	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()[i].getResidual();  criterion  +=  criterion.getWeight()  *  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()[i].getResidual();  criterion  +=  criterion.getWeight()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()[i].getResidual();  criterion  +=  criterion.getWeight()  *	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
87	[BUG]  [BUGGY]  return  Math.sqrt(criterion  /  problem);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  /  problem);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  /  problem);	  return    Math.sqrt(criterion    /    residual);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	22	None	replace
88	[BUG]  [BUGGY]  return  Math.sqrt(region  *  wm.length);  [CE]  cannot  find  symbol  region  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(region  *  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(region  *  wm.length);	  return    Math.sqrt(remainder    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  region	3	None	replace
89	[BUG]  [BUGGY]  return  Math.sqrt(remainder  *  criterion);  [CE]  cannot  find  symbol  remainder  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(remainder  *  criterion);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remainder  *  criterion);	  return    Math.sqrt(remainder    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  remainder	3	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurement.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  measurement.length;  ++i)  {  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  measurement.length;  ++i)  {	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    WeightedMeasurement[]    measurements    =    problem.getMeasurements();    for(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS();  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    return    problem.getRMS();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
94	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result  *	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
95	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  remaining  *  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  remaining  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  remaining  *	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
96	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  ref  *  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  ref  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  ref  *	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
97	[BUG]  [BUGGY]  Return  Math.sqrt(criterion  /  wm.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  Return  Math.sqrt(criterion  /  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Return  Math.sqrt(criterion  /  wm.length);	  return    Math.sqrt(remaining    /    wm.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
98	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
99	[BUG]  [BUGGY]  RectangleEdge  wm  =  parameters[i].getResidual();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  RectangleEdge  wm  =  parameters[i].getResidual();  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  parameters[i].getResidual();	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
100	[BUG]  [BUGGY]  RectangleEdge  wm  =  problem.getResidualEdges();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  RectangleEdge  wm  =  problem.getResidualEdges();  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  problem.getResidualEdges();	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
101	[BUG]  [BUGGY]  RectangleEdge  wm  =  problem.getMeasurements();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  RectangleEdge  wm  =  problem.getMeasurements();  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	RectangleEdge  wm  =  problem.getMeasurements();	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
102	[BUG]  [BUGGY]  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()[i].getResidual();  criterion  +=  problem.getWeight()  *	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i].getResidual();    criterion    +=    problem.getWeight()    *    residual    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
103	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length);  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length);    if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
104	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length);  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length);    if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
105	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(criterion  *  wm.length);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(criterion  *  wm.length);  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length);    if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  Math.rint(criterion  *  wm.length);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
106	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length,  factor);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length);  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length,  factor);  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return    Math.sqrt(criterion    *    wm.length);    if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  Math.sqrt(criterion  *  wm.length,  factor);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
107	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
108	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
109	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
110	[BUG]  [BUGGY]  Return  Math.sqrt(criterion  *  wm.length);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  Return  Math.sqrt(criterion  *  wm.length);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	Return  Math.sqrt(criterion  *  wm.length);	  return    Math.sqrt(remaining    *    wm.length);    	non-compiled	[CE]  ';'  expected	4	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	add	return  Math.sqrt(criterion  *  wm.length  -  1);	  return    Math.sqrt(criterion    *    wm.length);    	compilable	  [FE]  AssertionFailedError  	2	10	replace
114	[BUG]  [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(criterion  *  wm.length  -  1);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(criterion  *  wm.length  -  1);	  return    Math.sqrt(criterion    *    wm.length);    	compilable	  [FE]  AssertionFailedError  	2	10	replace
115	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	20	None	replace
116	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  //  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  //  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  //	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	20	None	replace
117	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  Residue  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  Residue  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  Residue	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    	non-compiled	[CE]  ';'  expected	20	None	replace
118	[BUG]  [BUGGY]  return  Math.sqrt(remainder  /  criterion);  [CE]  cannot  find  symbol  remainder  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  return  Math.sqrt(remainder  /  criterion);  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	return  Math.sqrt(remainder  /  criterion);	  return    Math.sqrt(remainder    /    wm.length);    	non-compiled	[CE]  cannot  find  symbol  remainder	13	None	replace
119	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
120	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
121	[BUG]  [BUGGY]  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }  [BUGGY]    }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  factor;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
122	[BUG]  [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
123	[BUG]  [BUGGY]  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }    [BUGGY]  if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *  [BUGGY]    return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	if(problem!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getMeasurements()  [i];  criterion  +=  problem.getResidual()  *	      if(result    ==    null)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problem.getMeasurements()[i];    criterion    +=    problem.getResidual()    *    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
