bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  max  =  problem.getAllParameters().length  /  max;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getAllParameters().length  /  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getAllParameters().length  /  max;	  final    int    max    =    problem.getAllParameters().length    *    max;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	70	None	replace
2	[BUG]  [BUGGY]  final  int  max  =  problem.getAllParameters().length  *  cols;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getAllParameters().length  *  cols;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getAllParameters().length  *  cols;	  final    int    max    =    problem.getAllParameters().length    *    max;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	70	None	replace
3	[BUG]  [BUGGY]  final  int  max  =  problem.getAllParameters().length  -  max;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getAllParameters().length  -  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getAllParameters().length  -  max;	  final    int    max    =    problem.getAllParameters().length    *    max;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	70	None	replace
4	[BUG]  [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  /  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  /  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  problem.getAllParameters().length  /  max;	  double[][]    cols    =    problem.getAllParameters().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	42	None	replace
5	[BUG]  [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  *  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  *  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  problem.getAllParameters().length  *  max;	  double[][]    cols    =    problem.getAllParameters().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	42	None	replace
6	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  /  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getMeasurements().length  /  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getMeasurements().length  /  1;	  int    cols    =    problem.getMeasurements().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	1	None	replace
7	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1  +  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1  +  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getMeasurements().length  -  1  +  max;	  int    cols    =    problem.getMeasurements().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	1	None	replace
8	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  /  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getColumns().length  /  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getColumns().length  /  max;	  int    cols    =    problem.getColumns().length    -    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	27	None	replace
9	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  -  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getColumns().length  -  rows;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getColumns().length  -  rows;	  int    cols    =    problem.getColumns().length    -    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	27	None	replace
10	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[cols][max];  [CE]  possible  loss  of  precision  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  jTj  =  new  int[cols][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  jTj  =  new  int[cols][max];	  double[][]    jTj    =    new    double[cols][max];    double[][]    jTj    =    new    double[cols][max];    	non-compiled	[CE]  possible  loss  of  precision	43	None	replace
11	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  jTj  =  new  double[cols][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	final  double[][]  jTj  =  new  double[cols][max];	  double[][]    jTj    =    new    double[cols][max];    double[][]    jTj    =    new    double[cols][max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	replace
12	[BUG]  [BUGGY]  final  double[][]  jTj  =  new  double[cols][max];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  jTj  =  new  double[cols][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  jTj  =  new  double[cols][max];	  double[][]    jTj    =    new    double[cols][max];    double[][]    jTj    =    new    double[cols][max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	replace
13	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getAllParameters().length;	  double[][]    jTj    =    new    double[rows][cols];    int    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	64	None	replace
14	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  double[][]  jTj  =  new  double[rows][cols  +  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  double[][]  jTj  =  new  double[rows][cols  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    1];    double[][]  jTj  =  new  double[rows][cols  +  1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	21	None	add
15	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  int[][]  jTj  =  new  double[rows][cols  +  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  int[][]  jTj  =  new  double[rows][cols  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    1];    int[][]  jTj  =  new  double[rows][cols  +  1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	21	None	add
16	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  Double[][]  jTj  =  new  double[rows][cols  +  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  Double[][]  jTj  =  new  double[rows][cols  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    1];    Double[][]  jTj  =  new  double[rows][cols  +  1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	21	None	add
17	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  final  double[][]  jTj  =  new  double[rows][cols  +  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  final  double[][]  jTj  =  new  double[rows][cols  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    1];    final  double[][]  jTj  =  new  double[rows][cols  +  1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	21	None	add
18	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  double[][]  jTj  =  new  double[rows][Cols  +  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  double[][]  jTj  =  new  double[rows][Cols  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    1];    double[][]  jTj  =  new  double[rows][Cols  +  1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	21	None	add
19	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][max  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[rows][max  -  1];	  double[][]    jTj    =    new    double[rows][cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
20	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][max  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][max  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][max  -  1];	  double[][]    jTj    =    new    double[rows][cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
21	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[rows][cols  *  1];	  double[][]    jTj    =    new    double[rows][cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
22	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][cols  *  1];	  double[][]    jTj    =    new    double[rows][cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
23	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  /  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[rows][cols  /  1];	  double[][]    jTj    =    new    double[rows][cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
24	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  /  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  /  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][cols  /  1];	  double[][]    jTj    =    new    double[rows][cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
25	[BUG]  [BUGGY]  int  jTj  =  new  double[rows][max];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  jTj  =  new  double[rows][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  jTj  =  new  double[rows][max];	  double[][]    jTj    =    new    double[rows][max];    int    jTj    =    new    double[rows][max];    	non-compiled	[CE]  incompatible  types	58	None	replace
26	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  /  1;  [CE]  cannot  assign  a  value  to  final  variable  cols  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  cols  =  problem.getAllParameters().length  /  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	cols  =  problem.getAllParameters().length  /  1;	  cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  cols	54	None	replace
27	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  -  2;  [CE]  cannot  assign  a  value  to  final  variable  cols  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  cols  =  problem.getAllParameters().length  -  2;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	cols  =  problem.getAllParameters().length  -  2;	  cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  cols	54	None	replace
28	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  +  1;  [CE]  cannot  assign  a  value  to  final  variable  cols  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	cols  =  problem.getAllParameters().length  +  1;	  cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  cols	54	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols];  }  [CE]  cannot  find  symbol  jTj  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jTj    =    new    double[rows][cols];    }    	non-compiled	[CE]  cannot  find  symbol  jTj	78	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  }  [CE]  cannot  find  symbol  jTj  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jTj    =    new    double[rows][cols];    }    	non-compiled	[CE]  cannot  find  symbol  jTj	78	None	replace
31	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  double[][]  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  double[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][0];    double[][]  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
32	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  int[][]  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  int[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][0];    int[][]  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
33	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  Double[][]  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  Double[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][0];    Double[][]  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
34	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  final  double[][]  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  final  double[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][0];    final  double[][]  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
35	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][0];    ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][max];	  double[][]    jTj    =    new    double[rows][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jTj    =    new    double[rows][max];    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
37	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  jTj  =  new  double[rows][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	final  double[][]  jTj  =  new  double[rows][max];	  double[][]    jTj    =    new    double[rows][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jTj    =    new    double[rows][max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
38	[BUG]  [BUGGY]  final  double[][]  jTj  =  new  double[rows][max];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  jTj  =  new  double[rows][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  jTj  =  new  double[rows][max];	  double[][]    jTj    =    new    double[rows][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jTj    =    new    double[rows][max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
39	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  new  double[rows][cols];	  double[][]    cols    =    new    double[rows][max];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	15	None	replace
40	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][0];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  new  double[rows][0];	  double[][]    cols    =    new    double[rows][max];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	15	None	replace
41	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  double[][]  jTj  =  new  double[rows][cols  +  max];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  double[][]  jTj  =  new  double[rows][cols  +  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    max];    double[][]  jTj  =  new  double[rows][cols  +  max];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	add
42	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  int[][]  jTj  =  new  double[rows][cols  +  max];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  int[][]  jTj  =  new  double[rows][cols  +  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    max];    int[][]  jTj  =  new  double[rows][cols  +  max];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	add
43	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  Double[][]  jTj  =  new  double[rows][cols  +  max];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  Double[][]  jTj  =  new  double[rows][cols  +  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    max];    Double[][]  jTj  =  new  double[rows][cols  +  max];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	add
44	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  max];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  max];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    max];    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  max];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	add
45	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  max];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  max];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    max];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  max];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	add
46	[BUG]  [BUGGY]  final  int  max  =  problem.getMeasurements().length  /  max;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getMeasurements().length  /  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getMeasurements().length  /  max;	  final    int    max    =    problem.getMeasurements().length    *    max;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	74	None	replace
47	[BUG]  [BUGGY]  final  int  max  =  problem.getMeasurements().length  *  cols;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getMeasurements().length  *  cols;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getMeasurements().length  *  cols;	  final    int    max    =    problem.getMeasurements().length    *    max;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	74	None	replace
48	[BUG]  [BUGGY]  final  int  max  =  problem.getMeasurements().length  -  max;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getMeasurements().length  -  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getMeasurements().length  -  max;	  final    int    max    =    problem.getMeasurements().length    *    max;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	74	None	replace
49	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][max];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][max];	  double[][]    jTj    =    new    double[rows][max];    ArrayIndexOutOfBoundsException    jTj    =    new    double[rows][max];    	non-compiled	[CE]  incompatible  types	57	None	replace
50	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][max];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][max];	  double[][]    jTj    =    new    double[rows][max];    ArrayIndexOutOfBoundsException    jTj    =    new    double[rows][max];    	non-compiled	[CE]  incompatible  types	57	None	replace
51	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[rows][2];	  double[][]    jTj    =    new    double[rows][0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
52	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][2];	  double[][]    jTj    =    new    double[rows][0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
53	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  double[][]  jTj  =  new  double[cols][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  double[][]  jTj  =  new  double[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[cols][0];    double[][]  jTj  =  new  double[cols][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
54	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  Double[][]  jTj  =  new  double[cols][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  Double[][]  jTj  =  new  double[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[cols][0];    Double[][]  jTj  =  new  double[cols][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
55	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  int[][]  jTj  =  new  double[cols][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  int[][]  jTj  =  new  double[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[cols][0];    int[][]  jTj  =  new  double[cols][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
56	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  final  double[][]  jTj  =  new  double[cols][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  final  double[][]  jTj  =  new  double[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[cols][0];    final  double[][]  jTj  =  new  double[cols][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
57	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  double[][]  jTj  =  new  double[cols][1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  double[][]  jTj  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[cols][0];    double[][]  jTj  =  new  double[cols][1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
58	[BUG]  [BUGGY]  final  double[][]  cols  =  new  double[cols][rows];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  cols  =  new  double[cols][rows];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  cols  =  new  double[cols][rows];	  double[][]    cols    =    new    double[cols][rows];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	17	None	replace
59	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];	  double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][max];    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];	  double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][max];    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }  [CE]  cannot  find  symbol  jTj  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }	  double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][max];    	non-compiled	[CE]  cannot  find  symbol  jTj	47	None	replace
62	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }	  double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][max];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	46	None	replace
63	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[cols][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  jTj  =  new  int[cols][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  jTj  =  new  int[cols][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }	  double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][max];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	46	None	replace
64	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  j  =  0;  j  <  max;  ++j)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
65	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  j  =  0;  j  <  columns;  ++j)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
66	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  /  2;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getAllParameters().length  /  2;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getAllParameters().length  /  2;	  int    cols    =    problem.getAllParameters().length    -    2;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
67	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[rows][cols];  [CE]  possible  loss  of  precision  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  jTj  =  new  int[rows][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  jTj  =  new  int[rows][cols];	  double[][]    jTj    =    new    double[rows][cols];    Double[][]    jTj    =    new    double[rows][cols];    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
68	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  jTj  =  new  double[rows][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	final  double[][]  jTj  =  new  double[rows][cols];	  double[][]    jTj    =    new    double[rows][cols];    Double[][]    jTj    =    new    double[rows][cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	replace
69	[BUG]  [BUGGY]  final  double[][]  jTj  =  new  double[rows][cols];  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  jTj  =  new  double[rows][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  jTj  =  new  double[rows][cols];	  double[][]    jTj    =    new    double[rows][cols];    Double[][]    jTj    =    new    double[rows][cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	replace
70	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[rows][cols  *  max  +  1];	  double[][]    jTj    =    new    double[rows][cols    *    max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
71	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][cols  *  max  +  1];	  double[][]    jTj    =    new    double[rows][cols    *    max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
72	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[rows][cols  *  2];	  double[][]    jTj    =    new    double[rows][cols    *    max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
73	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][cols  *  2];	  double[][]    jTj    =    new    double[rows][cols    *    max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
74	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length  /  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getColumns().length  /  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getColumns().length  /  1;	  final    int    cols    =    problem.getColumns().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	37	None	replace
75	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length  -  1  +  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getColumns().length  -  1  +  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getColumns().length  -  1  +  max;	  final    int    cols    =    problem.getColumns().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	37	None	replace
76	[BUG]  [BUGGY]  int[][]  jTj  =  new  double[rows][max];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  jTj  =  new  double[rows][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  jTj  =  new  double[rows][max];	  double[][]    jTj    =    new    double[rows][max];    int[][]    jTj    =    new    double[rows][max];    	non-compiled	[CE]  incompatible  types	49	None	replace
77	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[rows][max];  [CE]  possible  loss  of  precision  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  jTj  =  new  int[rows][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  jTj  =  new  int[rows][max];	  double[][]    jTj    =    new    double[rows][max];    int[][]    jTj    =    new    double[rows][max];    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
78	[BUG]  [BUGGY]  final  int  max  =  problem.getMeasurements().length  -  1;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getMeasurements().length  -  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getMeasurements().length  -  1;	  final    int    max    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	35	None	replace
79	[BUG]  [BUGGY]  final  int  max  =  problem.getMeasurements().length  +  1;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getMeasurements().length  +  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getMeasurements().length  +  1;	  final    int    max    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	35	None	replace
80	[BUG]  [BUGGY]  final  int  max  =  problem.getMeasurements().length  -  2;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getMeasurements().length  -  2;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getMeasurements().length  -  2;	  final    int    max    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	35	None	replace
81	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[rows][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  jTj  =  new  int[rows][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  jTj  =  new  int[rows][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  }	  double[][]    jTj    =    new    double[rows][max];    for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[rows][max];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	52	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  }  [CE]  cannot  find  symbol  jTj  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  }	  double[][]    jTj    =    new    double[rows][max];    for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[rows][max];    }    	non-compiled	[CE]  cannot  find  symbol  jTj	52	None	replace
83	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][max];  for(int  i  =  0;  i  <  cols;  ++i)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
84	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][max  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[rows][max  +  1];	  double[][]    jTj    =    new    double[rows][cols    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
85	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][max  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][max  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][max  +  1];	  double[][]    jTj    =    new    double[rows][cols    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
86	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[rows][cols  +  2];	  double[][]    jTj    =    new    double[rows][cols    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
87	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][cols  +  2];	  double[][]    jTj    =    new    double[rows][cols    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
88	[BUG]  [BUGGY]  final  int  cols  =  problem.getMeasurements().length  -  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getMeasurements().length  -  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getMeasurements().length  -  1;	  final    int    cols    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	36	None	replace
89	[BUG]  [BUGGY]  final  int  cols  =  problem.getMeasurements().length  +  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getMeasurements().length  +  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getMeasurements().length  +  max;	  final    int    cols    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	36	None	replace
90	[BUG]  [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  /  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  /  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  problem.getAllParameters().length  /  1;	  double[][]    cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	41	None	replace
91	[BUG]  [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  -  2;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  -  2;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  problem.getAllParameters().length  -  2;	  double[][]    cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	41	None	replace
92	[BUG]  [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  problem.getAllParameters().length  +  1;	  double[][]    cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	41	None	replace
93	[BUG]  [BUGGY]  Double[][]  jTj  =  new  double[cols][max];  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  Double[][]  jTj  =  new  double[cols][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	Double[][]  jTj  =  new  double[cols][max];	  double[][]    jTj    =    new    double[cols][max];    Double[][]    jTj    =    new    double[cols][max];    	non-compiled	[CE]  incompatible  types	45	None	replace
94	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  double[][]  jTj  =  new  double[rows][cols  -  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  double[][]  jTj  =  new  double[rows][cols  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    -    1];    double[][]  jTj  =  new  double[rows][cols  -  1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	85	None	add
95	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  int[][]  jTj  =  new  double[rows][cols  -  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  int[][]  jTj  =  new  double[rows][cols  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    -    1];    int[][]  jTj  =  new  double[rows][cols  -  1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	85	None	add
96	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  Double[][]  jTj  =  new  double[rows][cols  -  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  Double[][]  jTj  =  new  double[rows][cols  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    -    1];    Double[][]  jTj  =  new  double[rows][cols  -  1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	85	None	add
97	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  final  double[][]  jTj  =  new  double[rows][cols  -  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  final  double[][]  jTj  =  new  double[rows][cols  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    -    1];    final  double[][]  jTj  =  new  double[rows][cols  -  1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	85	None	add
98	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  int  cols  =  problem.getColumns().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  int  cols  =  problem.getColumns().length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    -    1];    int  cols  =  problem.getColumns().length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	85	None	add
99	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  jTj  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	final  double[][]  jTj  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][1];    Double[][]    jTj    =    new    double[cols][1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	replace
100	[BUG]  [BUGGY]  final  double[][]  jTj  =  new  double[cols][1];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  jTj  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  jTj  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][1];    Double[][]    jTj    =    new    double[cols][1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	replace
101	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  +  cols;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getColumns().length  +  cols;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getColumns().length  +  cols;	  int    cols    =    problem.getColumns().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	26	None	replace
102	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getColumns().length  +  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getColumns().length  +  1;	  int    cols    =    problem.getColumns().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	26	None	replace
103	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[rows][cols  +  cols];	  double[][]    jTj    =    new    double[rows][cols    +    max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	1	replace
104	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  cols];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][cols  +  cols];	  double[][]    jTj    =    new    double[rows][cols    +    max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	1	replace
105	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][max];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][max];	  double[][]    jTj    =    new    double[cols][max];    ArrayIndexOutOfBoundsException    jTj    =    new    double[cols][max];    	non-compiled	[CE]  incompatible  types	59	None	replace
106	[BUG]  [BUGGY]  jTj  =  new  double[cols][max];  [CE]  cannot  find  symbol  jTj  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  jTj  =  new  double[cols][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	jTj  =  new  double[cols][max];	  double[][]    jTj    =    new    double[cols][max];    ArrayIndexOutOfBoundsException    jTj    =    new    double[cols][max];    	non-compiled	[CE]  cannot  find  symbol  jTj	59	None	replace
107	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[cols][1];  [CE]  possible  loss  of  precision  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  jTj  =  new  int[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  jTj  =  new  int[cols][1];	  double[][]    jTj    =    new    double[cols][1];    int[][]    jTj    =    new    double[cols][1];    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
108	[BUG]  [BUGGY]  int[][]  cols  =  new  int[cols][1];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  cols  =  new  int[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  cols  =  new  int[cols][1];	  double[][]    jTj    =    new    double[cols][1];    int[][]    jTj    =    new    double[cols][1];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	29	None	replace
109	[BUG]  [BUGGY]  int[][]  jTj  =  new  double[cols][1];  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  jTj  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  jTj  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][1];    int[][]    jTj    =    new    double[cols][1];    	non-compiled	[CE]  incompatible  types	29	None	replace
110	[BUG]  [BUGGY]  int[][]  jTj  =  new  double[cols][max];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  jTj  =  new  double[cols][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  jTj  =  new  double[cols][max];	  double[][]    jTj    =    new    double[cols][max];    int[][]    jTj    =    new    double[cols][max];    	non-compiled	[CE]  incompatible  types	44	None	replace
111	[BUG]  [BUGGY]  int[][]  cols  =  new  double[cols][max];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  cols  =  new  double[cols][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  cols  =  new  double[cols][max];	  double[][]    jTj    =    new    double[cols][max];    int[][]    jTj    =    new    double[cols][max];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	44	None	replace
112	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  jTj  =  new  double[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	final  double[][]  jTj  =  new  double[cols][0];	  double[][]    jTj    =    new    double[cols][1];    final    double[][]    jTj    =    new    double[cols][1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
113	[BUG]  [BUGGY]  final  double[][]  jTj  =  new  double[cols][0];  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  jTj  =  new  double[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  jTj  =  new  double[cols][0];	  double[][]    jTj    =    new    double[cols][1];    final    double[][]    jTj    =    new    double[cols][1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
114	[BUG]  [BUGGY]  final  double[][]  cols  =  new  double[cols][1];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  cols  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  cols  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][1];    final    double[][]    jTj    =    new    double[cols][1];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	31	None	replace
115	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][1];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  new  double[rows][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  new  double[rows][1];	  double[][]    cols    =    new    double[cols][1];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	16	None	replace
116	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][2];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  new  double[cols][2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  new  double[cols][2];	  double[][]    cols    =    new    double[cols][1];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	16	None	replace
117	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  /  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getAllParameters().length  /  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getAllParameters().length  /  1;	  int    cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	replace
118	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1  +  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1  +  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getAllParameters().length  -  1  +  max;	  int    cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	replace
119	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length  +  cols;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getColumns().length  +  cols;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getColumns().length  +  cols;	  final    int    cols    =    problem.getColumns().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	38	None	replace
120	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length  /  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getColumns().length  /  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getColumns().length  /  max;	  final    int    cols    =    problem.getColumns().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	38	None	replace
121	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getColumns().length  +  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getColumns().length  +  1;	  final    int    cols    =    problem.getColumns().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	38	None	replace
122	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
123	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][max];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[cols][max];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
124	[BUG]  [BUGGY]  final  double[][]  jTj  =  new  double[cols][max];  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  jTj  =  new  double[cols][max];  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  jTj  =  new  double[cols][max];  for(int  i  =  0;  i  <  rows;  ++i)  {	  double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
125	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  +  cols;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getMeasurements().length  +  cols;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getMeasurements().length  +  cols;	  int    cols    =    problem.getMeasurements().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	2	None	replace
126	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getMeasurements().length  +  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getMeasurements().length  +  1;	  int    cols    =    problem.getMeasurements().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	2	None	replace
127	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  +  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getMeasurements().length  +  rows;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getMeasurements().length  +  rows;	  int    cols    =    problem.getMeasurements().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	2	None	replace
128	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  /  2;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getColumns().length  /  2;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getColumns().length  /  2;	  int    cols    =    problem.getColumns().length    -    2;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	75	None	replace
129	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  int  cols  =  problem.getAllParameters().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][1];  int  cols  =  problem.getAllParameters().length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[cols][1];  int  cols  =  problem.getAllParameters().length;	  double[][]    jTj    =    new    double[cols][max];    int    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	60	None	replace
130	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols  *  max];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  new  double[rows][cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  new  double[rows][cols  *  max];	  double[][]    jTj    =    new    double[rows][cols    *    cols];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	84	None	replace
131	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0]  *  cols];  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][0]  *  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][0]  *  cols];	  double[][]    jTj    =    new    double[rows][cols    *    cols];    	non-compiled	[CE]  ';'  expected	84	None	replace
132	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][1  *  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[rows][1  *  cols];	  double[][]    jTj    =    new    double[rows][cols    *    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
133	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1  *  cols];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][1  *  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][1  *  cols];	  double[][]    jTj    =    new    double[rows][cols    *    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
134	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  double[][]  jTj  =  new  double[rows][1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][1];  double[][]  jTj  =  new  double[rows][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][1];    double[][]  jTj  =  new  double[rows][1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
135	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  int[][]  jTj  =  new  double[rows][1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][1];  int[][]  jTj  =  new  double[rows][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][1];    int[][]  jTj  =  new  double[rows][1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
136	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  Double[][]  jTj  =  new  double[rows][1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][1];  Double[][]  jTj  =  new  double[rows][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][1];    Double[][]  jTj  =  new  double[rows][1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
137	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  final  double[][]  jTj  =  new  double[rows][1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][1];  final  double[][]  jTj  =  new  double[rows][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][1];    final  double[][]  jTj  =  new  double[rows][1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
138	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  double[][]  jTj  =  new  double[rows][2];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][1];  double[][]  jTj  =  new  double[rows][2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][1];    double[][]  jTj  =  new  double[rows][2];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
139	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  -  rows;  [CE]  cannot  assign  a  value  to  final  variable  cols  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  cols  =  problem.getAllParameters().length  -  rows;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	cols  =  problem.getAllParameters().length  -  rows;	  cols    =    problem.getAllParameters().length    -    max;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  cols	55	None	replace
140	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  /  max;  [CE]  cannot  assign  a  value  to  final  variable  cols  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  cols  =  problem.getAllParameters().length  /  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	cols  =  problem.getAllParameters().length  /  max;	  cols    =    problem.getAllParameters().length    -    max;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  cols	55	None	replace
141	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
145	[BUG]  [BUGGY]  final  double[][]  cols  =  problem.getAllParameters();  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  cols  =  problem.getAllParameters();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  cols  =  problem.getAllParameters();	  double[][]    cols    =    problem.getAllParameters();    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	73	None	replace
146	[BUG]  [BUGGY]  double[][]  cols  =  problem.getAllCols();  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  problem.getAllCols();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  problem.getAllCols();	  double[][]    cols    =    problem.getAllParameters();    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	73	None	replace
147	[BUG]  [BUGGY]  double[][]  cols  =  problem.getColumns();  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  problem.getColumns();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  problem.getColumns();	  double[][]    cols    =    problem.getAllParameters();    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	73	None	replace
148	[BUG]  [BUGGY]  final  double[][]  cols  =  problem.getAllParameters().length  -  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  cols  =  problem.getAllParameters().length  -  1;	  final    double[][]    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	40	None	replace
149	[BUG]  [BUGGY]  final  double[][]  cols  =  problem.getAllParameters().length  +  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  cols  =  problem.getAllParameters().length  +  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  cols  =  problem.getAllParameters().length  +  max;	  final    double[][]    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	40	None	replace
150	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  cols;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  cols;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getAllParameters().length  +  cols;	  int    cols    =    problem.getAllParameters().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	34	None	replace
151	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getAllParameters().length  +  1;	  int    cols    =    problem.getAllParameters().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	34	None	replace
152	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  /  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getAllParameters().length  /  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getAllParameters().length  /  max;	  int    cols    =    problem.getAllParameters().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	34	None	replace
153	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  double[][]  jTj  =  new  double[rows][cols  *  cols];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  double[][]  jTj  =  new  double[rows][cols  *  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    cols];    double[][]  jTj  =  new  double[rows][cols  *  cols];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	add
154	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  int[][]  jTj  =  new  double[rows][cols  *  cols];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  int[][]  jTj  =  new  double[rows][cols  *  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    cols];    int[][]  jTj  =  new  double[rows][cols  *  cols];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	add
155	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  Double[][]  jTj  =  new  double[rows][cols  *  cols];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  Double[][]  jTj  =  new  double[rows][cols  *  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    cols];    Double[][]  jTj  =  new  double[rows][cols  *  cols];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	add
156	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  final  double[][]  jTj  =  new  double[rows][cols  *  cols];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  final  double[][]  jTj  =  new  double[rows][cols  *  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    cols];    final  double[][]  jTj  =  new  double[rows][cols  *  cols];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	add
157	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  double[][]  jTj  =  new  double[rows][cols  *  max];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  double[][]  jTj  =  new  double[rows][cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    cols];    double[][]  jTj  =  new  double[rows][cols  *  max];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	add
158	[BUG]  [BUGGY]  int[][]  jTj  =  new  double[rows][cols];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  jTj  =  new  double[rows][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  jTj  =  new  double[rows][cols];	  double[][]    jTj    =    new    double[rows][cols];    int[][]    jTj    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	4	None	replace
159	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][3];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[rows][3];	  double[][]    jTj    =    new    double[rows][1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
160	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][3];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][3];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][3];	  double[][]    jTj    =    new    double[rows][1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
161	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  /  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getColumns().length  /  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getColumns().length  /  1;	  int    cols    =    problem.getColumns().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	25	None	replace
162	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  -  1  +  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getColumns().length  -  1  +  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getColumns().length  -  1  +  max;	  int    cols    =    problem.getColumns().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	25	None	replace
163	[BUG]  [BUGGY]  final  double[][]  cols  =  new  double[rows][cols];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  cols  =  new  double[rows][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  cols  =  new  double[rows][cols];	  double[][]    jTj    =    new    double[rows][cols];    final    double[][]    jTj    =    new    double[rows][cols];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	6	None	replace
164	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length  /  2;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getColumns().length  /  2;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getColumns().length  /  2;	  final    int    cols    =    problem.getColumns().length    -    2;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	72	None	replace
165	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols];  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols];	  double[][]    jTj    =    new    double[rows][cols];    ArrayIndexOutOfBoundsException    jTj    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	7	None	replace
166	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  /  2;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getMeasurements().length  /  2;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getMeasurements().length  /  2;	  int    cols    =    problem.getMeasurements().length    -    2;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	71	None	replace
167	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  double[][]  jTj  =  new  double[rows][cols  *  max];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  double[][]  jTj  =  new  double[rows][cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    max];    double[][]  jTj  =  new  double[rows][cols  *  max];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	23	None	add
168	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  int[][]  jTj  =  new  double[rows][cols  *  max];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  int[][]  jTj  =  new  double[rows][cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    max];    int[][]  jTj  =  new  double[rows][cols  *  max];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	23	None	add
169	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  Double[][]  jTj  =  new  double[rows][cols  *  max];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  Double[][]  jTj  =  new  double[rows][cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    max];    Double[][]  jTj  =  new  double[rows][cols  *  max];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	23	None	add
170	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  final  double[][]  jTj  =  new  double[rows][cols  *  max];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  final  double[][]  jTj  =  new  double[rows][cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    max];    final  double[][]  jTj  =  new  double[rows][cols  *  max];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	23	None	add
171	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  double[][]  jTj  =  new  double[rows][Cols  *  max];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  double[][]  jTj  =  new  double[rows][Cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    max];    double[][]  jTj  =  new  double[rows][Cols  *  max];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	23	None	add
172	[BUG]  [BUGGY]  final  int  cols  =  problem.getRows().length  -  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getRows().length  -  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getRows().length  -  1;	  final    int    cols    =    problem.getRows().length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	39	None	replace
173	[BUG]  [BUGGY]  final  int  cols  =  problem.getCols().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getCols().length;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getCols().length;	  final    int    cols    =    problem.getRows().length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	39	None	replace
174	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][1];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][1];    ArrayIndexOutOfBoundsException    jTj    =    new    double[cols][1];    	non-compiled	[CE]  incompatible  types	65	None	replace
175	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][1];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  new  double[cols][1];  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  new  double[cols][1];  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][1];    ArrayIndexOutOfBoundsException    jTj    =    new    double[cols][1];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	65	None	replace
176	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][0];  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][0];	  double[][]    jTj    =    new    double[cols][1];    ArrayIndexOutOfBoundsException    jTj    =    new    double[cols][1];    	non-compiled	[CE]  incompatible  types	65	None	replace
177	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][1];  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][1];    ArrayIndexOutOfBoundsException    jTj    =    new    double[cols][1];    	non-compiled	[CE]  incompatible  types	65	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols];  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols];	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jTj    =    new    double[rows][cols];    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
179	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[rows][max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  jTj  =  new  int[rows][max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  jTj  =  new  int[rows][max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][max];  }	  double[][]    jTj    =    new    double[rows][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jTj    =    new    double[rows][max];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
180	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }	  double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jTj    =    new    double[cols][max];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	77	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }  [CE]  cannot  find  symbol  jTj  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }	  double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jTj    =    new    double[cols][max];    }    	non-compiled	[CE]  cannot  find  symbol  jTj	77	None	replace
182	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[cols][max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  jTj  =  new  int[cols][max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  jTj  =  new  int[cols][max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][max];  }	  double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jTj    =    new    double[cols][max];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	77	None	replace
183	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length  -  max  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getColumns().length  -  max  +  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getColumns().length  -  max  +  1;	  final    int    cols    =    problem.getColumns().length    -    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	56	None	replace
184	[BUG]  [BUGGY]  Double[][]  jTj  =  new  double[rows][max];  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  Double[][]  jTj  =  new  double[rows][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	Double[][]  jTj  =  new  double[rows][max];	  double[][]    jTj    =    new    double[rows][max];    Double[][]    jTj    =    new    double[rows][max];    	non-compiled	[CE]  incompatible  types	50	None	replace
185	[BUG]  [BUGGY]  final  double[][]  cols  =  new  double[max][cols];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  cols  =  new  double[max][cols];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  cols  =  new  double[max][cols];	  double[][]    cols    =    new    double[max][cols];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	8	None	replace
186	[BUG]  [BUGGY]  final  int  max  =  problem.getAllParameters().length;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getAllParameters().length;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getAllParameters().length;	  int    cols    =    problem.getAllParameters().length;    final    int    max    =    cols    *    max;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	69	None	replace
187	[BUG]  [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  /  cols;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  /  cols;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  problem.getAllParameters().length  /  cols;	  double[][]    cols    =    problem.getAllParameters().length    +    cols;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	61	None	replace
188	[BUG]  [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  *  cols;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  *  cols;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  problem.getAllParameters().length  *  cols;	  double[][]    cols    =    problem.getAllParameters().length    +    cols;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	61	None	replace
189	[BUG]  [BUGGY]  [][]  cols  =  problem.getAllParameters().length  +  max;  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  [][]  cols  =  problem.getAllParameters().length  +  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	[][]  cols  =  problem.getAllParameters().length  +  max;	  double[][]    cols    =    problem.getAllParameters().length    +    cols;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
190	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[cols][2];	  double[][]    jTj    =    new    double[cols][1];    double[][]    jTj    =    new    double[cols][2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
191	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][2];  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[cols][2];	  double[][]    jTj    =    new    double[cols][1];    double[][]    jTj    =    new    double[cols][2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
192	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  +  cols;  [CE]  cannot  assign  a  value  to  final  variable  cols  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  cols  =  problem.getAllParameters().length  +  cols;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	cols  =  problem.getAllParameters().length  +  cols;	  cols    =    problem.getAllParameters().length    +    max;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  cols	53	None	replace
193	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  +  rows;  [CE]  cannot  assign  a  value  to  final  variable  cols  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  cols  =  problem.getAllParameters().length  +  rows;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	cols  =  problem.getAllParameters().length  +  rows;	  cols    =    problem.getAllParameters().length    +    max;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  cols	53	None	replace
194	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  +  jTj;  [CE]  cannot  assign  a  value  to  final  variable  cols  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  cols  =  problem.getAllParameters().length  +  jTj;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	cols  =  problem.getAllParameters().length  +  jTj;	  cols    =    problem.getAllParameters().length    +    max;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  cols	53	None	replace
195	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  +  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getColumns().length  +  rows;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getColumns().length  +  rows;	  int    cols    =    problem.getColumns().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	26	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
197	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getAllParameters().length  -  max;	  int    cols    =    problem.getAllParameters().length    -    2;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
198	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  rows;  ++i)  {	  double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
199	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length  -  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getColumns().length  -  rows;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getColumns().length  -  rows;	  final    int    cols    =    problem.getColumns().length    -    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	56	None	replace
200	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][max  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[cols][max  +  1];	  double[][]    jTj    =    new    double[rows][cols    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
201	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][max  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][max  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[cols][max  +  1];	  double[][]    jTj    =    new    double[rows][cols    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
202	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][3];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[cols][3];	  double[][]    jTj    =    new    double[cols][1];    double[][]    jTj    =    new    double[cols][2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
203	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][3];  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][3];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[cols][3];	  double[][]    jTj    =    new    double[cols][1];    double[][]    jTj    =    new    double[cols][2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
204	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[cols][0];    ArrayIndexOutOfBoundsException  jTj  =  new  double[cols][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
205	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  int  cols  =  problem.getAllParameters().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  int  cols  =  problem.getAllParameters().length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[cols][0];    int  cols  =  problem.getAllParameters().length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
206	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  +  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    1];    ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  +  1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	21	None	add
207	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  int  cols  =  problem.getAllParameters().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  int  cols  =  problem.getAllParameters().length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    1];    int  cols  =  problem.getAllParameters().length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	21	None	add
208	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  int  cols  =  problem.getAllParameters().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  int  cols  =  problem.getAllParameters().length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    -    1];    int  cols  =  problem.getAllParameters().length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	85	None	add
209	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  double[][]  jTj  =  new  double[rows][max  -  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  double[][]  jTj  =  new  double[rows][max  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    -    1];    double[][]  jTj  =  new  double[rows][max  -  1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	85	None	add
210	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length  *  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getColumns().length  *  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getColumns().length  *  max;	  final    int    cols    =    problem.getColumns().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	38	None	replace
211	[BUG]  [BUGGY]  Double[][]  cols  =  problem.getAllParameters().length  +  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  Double[][]  cols  =  problem.getAllParameters().length  +  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	Double[][]  cols  =  problem.getAllParameters().length  +  max;	  double[][]    cols    =    problem.getAllParameters().length    +    cols;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	61	None	replace
212	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  -  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getMeasurements().length  -  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getMeasurements().length  -  max;	  int    cols    =    problem.getMeasurements().length    -    2;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	71	None	replace
213	[BUG]  [BUGGY]  final  int  max  =  problem.getAllParameters().length  *  rows;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getAllParameters().length  *  rows;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getAllParameters().length  *  rows;	  final    int    max    =    problem.getAllParameters().length    *    max;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	70	None	replace
214	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[cols][max];  [CE]  possible  loss  of  precision  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  long[][]  jTj  =  new  long[cols][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	long[][]  jTj  =  new  long[cols][max];	  double[][]    jTj    =    new    double[cols][max];    int[][]    jTj    =    new    double[cols][max];    	non-compiled	[CE]  possible  loss  of  precision	44	None	replace
215	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  int  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  int  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][0];    int  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
216	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][max  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[cols][max  -  1];	  double[][]    jTj    =    new    double[rows][cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
217	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][max  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][max  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[cols][max  -  1];	  double[][]    jTj    =    new    double[rows][cols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
218	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
219	[BUG]  [BUGGY]  double[][]  cols  =  problem.getRows();  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  problem.getRows();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  problem.getRows();	  double[][]    cols    =    problem.getAllParameters();    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	73	None	replace
220	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[cols][cols  *  max];	  double[][]    jTj    =    new    double[rows][cols    *    max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
221	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  *  max];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[cols][cols  *  max];	  double[][]    jTj    =    new    double[rows][cols    *    max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
222	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getAllParameters().length  +  rows;	  int    cols    =    problem.getAllParameters().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	34	None	replace
223	[BUG]  [BUGGY]  final  double[][]  cols  =  problem.getAllParameters().length  +  cols;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  double[][]  cols  =  problem.getAllParameters().length  +  cols;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  double[][]  cols  =  problem.getAllParameters().length  +  cols;	  final    double[][]    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	40	None	replace
224	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][max];  int  cols  =  problem.getAllParameters().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][max];  int  cols  =  problem.getAllParameters().length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][max];  int  cols  =  problem.getAllParameters().length;	  double[][]    jTj    =    new    double[rows][cols];    int    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	64	None	replace
225	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  -  cols;  [CE]  cannot  assign  a  value  to  final  variable  cols  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  cols  =  problem.getAllParameters().length  -  cols;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	cols  =  problem.getAllParameters().length  -  cols;	  cols    =    problem.getAllParameters().length    -    max;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  cols	55	None	replace
226	[BUG]  [BUGGY]  final  int  cols  =  problem.getRows().length  +  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getRows().length  +  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getRows().length  +  max;	  final    int    cols    =    problem.getRows().length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	39	None	replace
227	[BUG]  [BUGGY]  double[][]  cols  =  new  double[max][rows];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  new  double[max][rows];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  new  double[max][rows];	  double[][]    cols    =    new    double[cols][rows];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	17	None	replace
228	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  new  double[cols][cols];	  double[][]    cols    =    new    double[max][cols];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	8	None	replace
229	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  double[][]  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][1];  double[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][1];    double[][]  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
230	[BUG]  [BUGGY]  final  int  max  =  problem.getMeasurements().length  *  rows;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getMeasurements().length  *  rows;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getMeasurements().length  *  rows;	  final    int    max    =    problem.getMeasurements().length    *    max;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	74	None	replace
231	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][max  *  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[cols][max  *  cols];	  double[][]    jTj    =    new    double[rows][cols    *    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
232	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][max  *  cols];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][max  *  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[cols][max  *  cols];	  double[][]    jTj    =    new    double[rows][cols    *    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
233	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][max  *  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[rows][max  *  cols];	  double[][]    jTj    =    new    double[rows][cols    *    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
234	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][max  *  cols];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][max  *  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][max  *  cols];	  double[][]    jTj    =    new    double[rows][cols    *    cols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
235	[BUG]  [BUGGY]  final  int  max  =  problem.getMeasurements().length  +  cols;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getMeasurements().length  +  cols;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getMeasurements().length  +  cols;	  final    int    max    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	35	None	replace
236	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  /  max;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getMeasurements().length  /  max;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getMeasurements().length  /  max;	  int    cols    =    problem.getMeasurements().length    +    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	2	None	replace
237	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  +  max];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  +  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    max];    ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  +  max];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	add
238	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  int  cols  =  problem.getAllParameters().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  int  cols  =  problem.getAllParameters().length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    max];    int  cols  =  problem.getAllParameters().length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	add
239	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  *  cols];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  *  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    cols];    ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  *  cols];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	add
240	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  *  max];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    cols];    ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  *  max];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	add
241	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  *  max];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    max];    ArrayIndexOutOfBoundsException  jTj  =  new  double[rows][cols  *  max];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	23	None	add
242	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  int  cols  =  problem.getAllParameters().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  int  cols  =  problem.getAllParameters().length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    max];    int  cols  =  problem.getAllParameters().length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	23	None	add
243	[BUG]  [BUGGY]  Double[][]  jTj  =  new  double[rows][cols];  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  Double[][]  jTj  =  new  double[rows][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	Double[][]  jTj  =  new  double[rows][cols];	  double[][]    jTj    =    new    double[rows][cols];    Double[][]    jTj    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	5	None	replace
244	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][max];  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  rows  =  new  double[rows][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  rows  =  new  double[rows][max];	  double[][]    jTj    =    new    double[rows][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jTj    =    new    double[rows][max];    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	82	None	replace
245	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  -  row;  [CE]  cannot  assign  a  value  to  final  variable  cols  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  cols  =  problem.getAllParameters().length  -  row;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	cols  =  problem.getAllParameters().length  -  row;	  cols    =    problem.getAllParameters().length    -    max;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  cols	55	None	replace
246	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols  -  1];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  new  double[rows][cols  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  new  double[rows][cols  -  1];	  double[][]    cols    =    new    double[cols][rows];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	17	None	replace
247	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][cols];  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  rows  =  new  double[rows][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  rows  =  new  double[rows][cols];	  double[][]    jTj    =    new    double[rows][cols];    ArrayIndexOutOfBoundsException    jTj    =    new    double[rows][cols];    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	replace
248	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  max];  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    max];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  max];	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
249	[BUG]  [BUGGY]  final  int  max  =  problem.getMeasurements().length  -  rows;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getMeasurements().length  -  rows;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getMeasurements().length  -  rows;	  final    int    max    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	35	None	replace
250	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length;  final  int  max  =  cols  *  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int  cols  =  problem.getAllParameters().length;  final  int  max  =  cols  *  rows;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int  cols  =  problem.getAllParameters().length;  final  int  max  =  cols  *  rows;	  int    cols    =    problem.getAllParameters().length;    final    int    max    =    cols    *    max;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	69	None	replace
251	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][max];  for(int  i  =  0;  i  <  rows;  ++i)  {	  double[][]    jTj    =    new    double[cols][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
252	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[1][cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	double[][]  jTj  =  new  double[1][cols  *  max];	  double[][]    jTj    =    new    double[rows][cols    *    max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
253	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[1][cols  *  max];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[1][cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[1][cols  *  max];	  double[][]    jTj    =    new    double[rows][cols    *    max];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
254	[BUG]  [BUGGY]  final  int  cols  =  problem.getMeasurements().length  -  2;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  cols  =  problem.getMeasurements().length  -  2;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  cols  =  problem.getMeasurements().length  -  2;	  final    int    cols    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	36	None	replace
255	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][0];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][0];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[cols][0];    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][0];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
256	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][0];  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[cols][0];    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][0];	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
257	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols].doubleValue();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols].doubleValue();  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  jTj  =  new  double[rows][cols].doubleValue();	  double[][]    jTj    =    new    double[rows][cols];    double[][]    jTj    =    new    double[rows][cols];    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
258	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  *  max];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  *  max];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    max];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  *  max];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	23	None	add
259	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  *  max];  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  max];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  *  max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    max];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  *  max];	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
260	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  +  row;  [CE]  cannot  assign  a  value  to  final  variable  cols  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  cols  =  problem.getAllParameters().length  +  row;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	cols  =  problem.getAllParameters().length  +  row;	  cols    =    problem.getAllParameters().length    +    max;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  cols	53	None	replace
261	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][0];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
262	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][0];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
263	[BUG]  [BUGGY]  final  int  max  =  problem.getAllParameters().length  *  row;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getAllParameters().length  *  row;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getAllParameters().length  *  row;	  final    int    max    =    problem.getAllParameters().length    *    max;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	70	None	replace
264	[BUG]  [BUGGY]  double[][]  rows  =  problem.getRows();  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  rows  =  problem.getRows();  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  rows  =  problem.getRows();	  double[][]    jTj    =    new    double[rows][max];    for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jTj    =    new    double[rows][max];    }    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
265	[BUG]  [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  +  min;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  problem.getAllParameters().length  +  min;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  problem.getAllParameters().length  +  min;	  double[][]    cols    =    problem.getAllParameters().length    +    cols;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	61	None	replace
266	[BUG]  [BUGGY]  final  int  max  =  problem.getMeasurements().length  *  row;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  final  int  max  =  problem.getMeasurements().length  *  row;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	final  int  max  =  problem.getMeasurements().length  *  row;	  final    int    max    =    problem.getMeasurements().length    *    max;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	74	None	replace
267	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  *  cols];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  *  cols];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    cols];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  *  cols];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	add
268	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  *  cols];  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  *  cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  *  cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    *    cols];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  *  cols];	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
269	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  1];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  1];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    1];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  1];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	21	None	add
270	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  1];  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    +    1];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  +  1];	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
271	[BUG]  [BUGGY]  double[][]  cols  =  problem.getAllParameters(max);  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  cols  =  problem.getAllParameters(max);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]  cols  =  problem.getAllParameters(max);	  double[][]    cols    =    problem.getAllParameters();    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	73	None	replace
272	[BUG]  [BUGGY]  Double[][]  cols  =  problem.getAllParameters();  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  Double[][]  cols  =  problem.getAllParameters();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	Double[][]  cols  =  problem.getAllParameters();	  double[][]    cols    =    problem.getAllParameters();    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	73	None	replace
273	[BUG]  [BUGGY]  long[][]  jTj  =  new  double[rows][max];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  long[][]  jTj  =  new  double[rows][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	long[][]  jTj  =  new  double[rows][max];	  double[][]    jTj    =    new    double[rows][max];    int[][]    jTj    =    new    double[rows][max];    	non-compiled	[CE]  incompatible  types	49	None	replace
274	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  -  1];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  -  1];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    -    1];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  -  1];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	85	None	add
275	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  -  1];  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  -  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	double[][]    jTj    =    new    double[rows][cols    -    1];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][cols  -  1];	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
276	[BUG]  [BUGGY]  int[][]  cols  =  new  double[cols][1];  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;      [BUGGY]  int[][]  cols  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	int[][]  cols  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][1];    int[][]    jTj    =    new    double[cols][1];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	29	None	replace
