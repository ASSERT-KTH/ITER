bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  for(int  i  =  rows;  i  <  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  for(int  i  =  rows;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    rows;    i    <    0;    ++i)    {    for(int  i  =  rows;  i  <  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
2	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  For(int  i  =  rows;  i  <  0;  ++i)  {  [CE]  '.class'  expected  [FE]      EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  For(int  i  =  rows;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    rows;    i    <    0;    ++i)    {    For(int  i  =  rows;  i  <  0;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	43	None	add
3	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  int  i  =  rows;  i  <  0;  ++i)  {  [CE]  illegal  start  of  type  [FE]        EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  int  i  =  rows;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    rows;    i    <    0;    ++i)    {    int  i  =  rows;  i  <  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	43	None	add
4	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  for(int  i  =  columns;  i  <  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  for(int  i  =  columns;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    rows;    i    <    0;    ++i)    {    for(int  i  =  columns;  i  <  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
5	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  /  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getColumns().length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getColumns().length  /  1;	  int    cols    =    problem.getColumns().length    +    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
6	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  +  2;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getColumns().length  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getColumns().length  +  2;	  int    cols    =    problem.getColumns().length    +    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ((  int  i  =  rows;  i  <  cols;  ++i)  {  [CE]  ')'  expected  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ((  int  i  =  rows;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  ((  int  i  =  rows;  i  <  cols;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    ((    int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  ')'  expected	55	None	replace
8	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  '.class'  expected  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	For(int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    ((    int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  '.class'  expected	55	None	replace
9	[BUG]  [BUGGY]  int  i  =  cols;  i  <  0;  ++i)  {  [CE]  illegal  start  of  type  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  i  =  cols;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  i  =  cols;  i  <  0;  ++i)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    int    i    =    cols;    i    <    0;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  int  i  =  cols;  i  <  0;  ++i)  {  [CE]  illegal  start  of  type  [FE]              EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  int  i  =  cols;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  <  0;  ++i)  {  int  i  =  cols;  i  <  0;  ++i)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    int    i    =    cols;    i    <    0;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  int  i  =  cols;  i  <  0;  ++i)  {  [CE]  illegal  start  of  type  [FE]                EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  int  i  =  cols;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  cols;  i  <  rows;  ++i)  {  int  i  =  cols;  i  <  0;  ++i)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    int    i    =    cols;    i    <    0;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  int  cols  =  cols;  i  <  0;  ++i)  {  [CE]  illegal  start  of  type  [FE]                  EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  int  cols  =  cols;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  <  0;  ++i)  {  int  cols  =  cols;  i  <  0;  ++i)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    int    i    =    cols;    i    <    0;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  rows;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  >  expected	34	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  int  i  =  0;  i  <  rows;  ++i)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  int  i  =  0;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  >  expected	34	None	replace
15	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  +  1;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getColumnCount()  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getColumnCount()  +  1;	  int    cols    =    problem.getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
16	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  *  max;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getColumnCount()  *  max;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getColumnCount()  *  max;	  int    cols    =    problem.getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
17	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  max;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  cols;  i  <  max;  ++i)  {	  for(int    i    =    cols;    i    <    rows;    ++i)    {    	compilable	  [FE]  EstimationException  	8	1	replace
18	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  max;  ++i)  {  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  max;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  cols;  i  <  max;  ++i)  {	  for(int    i    =    cols;    i    <    rows;    ++i)    {    	compilable	  [FE]  EstimationException  	8	1	replace
19	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  for(int  i  =  cols;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  for(int  i  =  cols;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i    <    rows;    ++i)    {    for(int  i  =  cols;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
20	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  For(int  i  =  cols;  i  <  rows;  ++i)  {  [CE]  '.class'  expected  [FE]      EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  For(int  i  =  cols;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i    <    rows;    ++i)    {    For(int  i  =  cols;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
21	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  for(int  i  =  cols;  i  <  rows);  ++i)  {  [CE]  ';'  expected  [FE]        EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  for(int  i  =  cols;  i  <  rows);  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i    <    rows;    ++i)    {    for(int  i  =  cols;  i  <  rows);  ++i)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
22	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  int  i  =  cols;  i  <  rows;  ++i)  {  [CE]  >  expected  [FE]          EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  int  i  =  cols;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i    <    rows;    ++i)    {    int  i  =  cols;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  >  expected	7	None	add
23	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  /  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getAllParameters().length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getAllParameters().length  /  1;	  int    cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i!=  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  rows;  i!=  0;  ++i)  {	  for(int    i    =    cols;    i!=    0;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	62	1	replace
25	[BUG]  [BUGGY]  for(int  i  =  rows;  i!=  0;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i!=  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i!=  0;  ++i)  {	  for(int    i    =    cols;    i!=    0;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	62	1	replace
26	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  >=  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  rows;  i  >=  0;  ++i)  {	  for(int    i    =    cols;    i!=    0;    ++i)    {    	compilable	  [FE]  EstimationException  	62	1	replace
27	[BUG]  [BUGGY]  for(int  i  =  rows;  i  >=  0;  ++i)  {  [FE]  EstimationException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  >=  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  >=  0;  ++i)  {	  for(int    i    =    cols;    i!=    0;    ++i)    {    	compilable	  [FE]  EstimationException  	62	1	replace
28	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	double[][]  cols  =  new  double[rows][cols];	  double[][]    cols    =    new    double[max][cols];    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
29	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	double[][]  cols  =  new  double[cols][jTj];	  double[][]    cols    =    new    double[max][cols];    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
30	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  double[][]  cols  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	double[][]  cols  =  new  double[cols][1];	  double[][]    cols    =    new    double[max][cols];    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
31	[BUG]  [BUGGY]  int  i  =  rows;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  i  =  rows;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  i  =  rows;  i  <  cols;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	39	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  rows;  i  <  0;  ++i)  {  [CE]  illegal  start  of  type  [FE]              EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  rows;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  rows;  i  <  0;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  rows;  i  <  max;  ++i)  {  [CE]  >  expected  [FE]                EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  rows;  i  <  max;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  rows;  i  <  max;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	39	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  rows;  i  <  jTj;  ++i)  {  [CE]  >  expected  [FE]                  EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  rows;  i  <  jTj;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  rows;  i  <  jTj;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	39	None	replace
35	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  /  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getMeasurements().length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getMeasurements().length  /  1;	  int    cols    =    problem.getMeasurements().length    +    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  +  2;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getMeasurements().length  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getMeasurements().length  +  2;	  int    cols    =    problem.getMeasurements().length    +    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
37	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  /  2;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getMeasurements().length  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getMeasurements().length  /  2;	  int    cols    =    problem.getMeasurements().length    -    2;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  /  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  cols  =  problem.getAllParameters().length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	cols  =  problem.getAllParameters().length  /  1;	  cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
39	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	double[][]  jTj  =  new  double[rows][0];	  double[][]    jTj    =    new    double[cols][0];    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
40	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  double[][]  cols  =  new  double[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	double[][]  cols  =  new  double[cols][0];	  double[][]    jTj    =    new    double[cols][0];    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  for(int  i  =  1;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  for(int  i  =  1;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    1;    i    <    rows;    ++i)    {    for(int  i  =  1;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
42	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  int  i  =  1;  i  <  rows;  ++i)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  int  i  =  1;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    1;    i    <    rows;    ++i)    {    int  i  =  1;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  >  expected	19	None	add
43	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  For(int  i  =  1;  i  <  rows;  ++i)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  For(int  i  =  1;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    1;    i    <    rows;    ++i)    {    For(int  i  =  1;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	19	None	add
44	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  for(int  i  =  1;  i  <  rows);  ++i)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  for(int  i  =  1;  i  <  rows);  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    1;    i    <    rows;    ++i)    {    for(int  i  =  1;  i  <  rows);  ++i)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
45	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  for(int  i  =  1;  i  <  columns;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  for(int  i  =  1;  i  <  columns;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    1;    i    <    rows;    ++i)    {    for(int  i  =  1;  i  <  columns;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
46	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  /  1;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getColumnCount()  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getColumnCount()  /  1;	  int    cols    =    problem.getRowCount()    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
47	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1  +  max;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1  +  max;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getMeasurements().length  -  1  +  max;	  int    cols    =    problem.getMeasurements().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
48	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  /  2;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getColumns().length  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getColumns().length  /  2;	  int    cols    =    problem.getColumns().length    -    2;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  for(int  i  =  0;  i  <  max;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  for(int  i  =  0;  i  <  max;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    0;    i    <    max;    ++i)    {    for(int  i  =  0;  i  <  max;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  int  i  =  0;  i  <  max;  ++i)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  int  i  =  0;  i  <  max;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    0;    i    <    max;    ++i)    {    int  i  =  0;  i  <  max;  ++i)  {	  	non-compiled	[CE]  >  expected	40	None	add
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  For(int  i  =  0;  i  <  max;  ++i)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  For(int  i  =  0;  i  <  max;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    0;    i    <    max;    ++i)    {    For(int  i  =  0;  i  <  max;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	40	None	add
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  (int  i  =  0;  i  <  max;  ++i)  {  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  (int  i  =  0;  i  <  max;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    0;    i    <    max;    ++i)    {    (int  i  =  0;  i  <  max;  ++i)  {	  	non-compiled	[CE]  ')'  expected	40	None	add
53	[BUG]  [BUGGY]  For(int  i  =  rows;  i  <  cols;  ++i)  {  [CE]  '.class'  expected  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  For(int  i  =  rows;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	For(int  i  =  rows;  i  <  cols;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    For(int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  '.class'  expected	38	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  cols;  i!=  0;  ++i)  {  for(int  i  =  cols;  i!=  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i!=  0;  ++i)  {  for(int  i  =  cols;  i!=  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i!=    0;    ++i)    {    for(int  i  =  cols;  i!=  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
55	[BUG]  [BUGGY]  for(int  i  =  cols;  i!=  0;  ++i)  {  for(int  i  =  cols;  i  >=  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i!=  0;  ++i)  {  for(int  i  =  cols;  i  >=  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i!=    0;    ++i)    {    for(int  i  =  cols;  i  >=  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
56	[BUG]  [BUGGY]  for(int  i  =  cols;  i!=  0;  ++i)  {  for(int  i  =  cols;  i  >>  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i!=  0;  ++i)  {  for(int  i  =  cols;  i  >>  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i!=    0;    ++i)    {    for(int  i  =  cols;  i  >>  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
57	[BUG]  [BUGGY]  for(int  i  =  cols;  i!=  0;  ++i)  {  for(int  i  =  cols;  i  ==  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i!=  0;  ++i)  {  for(int  i  =  cols;  i  ==  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i!=    0;    ++i)    {    for(int  i  =  cols;  i  ==  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
58	[BUG]  [BUGGY]  for(int  i  =  cols;  i!=  0;  ++i)  {  int  i  =  cols;  i!=  0;  ++i)  {  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i!=  0;  ++i)  {  int  i  =  cols;  i!=  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i!=    0;    ++i)    {    int  i  =  cols;  i!=  0;  ++i)  {	  	non-compiled	[CE]  not  a  statement	61	None	add
59	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  for(int  i  =  2;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  for(int  i  =  2;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    2;    i    <    cols;    ++i)    {    for(int  i  =  2;  i  <  cols;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
60	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  For(int  i  =  2;  i  <  cols;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  For(int  i  =  2;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    2;    i    <    cols;    ++i)    {    For(int  i  =  2;  i  <  cols;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	21	None	add
61	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  int  i  =  2;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  int  i  =  2;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    2;    i    <    cols;    ++i)    {    int  i  =  2;  i  <  cols;  ++i)  {	  	non-compiled	[CE]  >  expected	21	None	add
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows,  cols);	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows,    cols);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)	48	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  }	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows,    cols);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
64	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	For(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows,  cols);	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows,    cols);    	non-compiled	[CE]  '.class'  expected	48	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(jTj,  cols);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[][],int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(jTj,  cols);  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  1;  i  <  rows;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(jTj,  cols);	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows,    cols);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[][],int)	48	None	replace
66	[BUG]  [BUGGY]  int  cols  =  problem.getRows().length  -  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getRows().length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getRows().length  -  1;	  int    cols    =    problem.getRows().length;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
67	[BUG]  [BUGGY]  int  cols  =  problem.getCols().length;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getCols().length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getCols().length;	  int    cols    =    problem.getRows().length;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  ((  int  i  =  cols;  i  <  0;  ++i)  {  [CE]  ')'  expected  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  ((  int  i  =  cols;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  cols;  i  <  rows;  ++i)  {  ((  int  i  =  cols;  i  <  0;  ++i)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    ((    int    i    =    cols;    i    <    0;    ++i)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  ((  int  i  =  cols;  i  <  0;  ++i)  {  [CE]  ')'  expected  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  ((  int  i  =  cols;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  <  0;  ++i)  {  ((  int  i  =  cols;  i  <  0;  ++i)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    ((    int    i    =    cols;    i    <    0;    ++i)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
70	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  2;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  2;  i  <  rows;  ++i)  {	  for(int    i    =    2;    i    <    cols;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
71	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  rows;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  2;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  2;  i  <  rows;  ++i)  {	  for(int    i    =    2;    i    <    cols;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
72	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  +  2;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  cols  =  problem.getAllParameters().length  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	cols  =  problem.getAllParameters().length  +  2;	  cols    =    problem.getAllParameters().length    +    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
73	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  -  1  +  max;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getColumns().length  -  1  +  max;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getColumns().length  -  1  +  max;	  int    cols    =    problem.getColumns().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i1)  {  [CE]  cannot  find  symbol  i1  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i1)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i1)  {	  for(int    i    =    1;    i    <    cols;    ++i)    {    for(int    i    =    1;    i    <    cols;    ++i1)    {    	non-compiled	[CE]  cannot  find  symbol  i1	66	None	replace
75	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  2;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getAllParameters().length  +  2;	  int    cols    =    problem.getAllParameters().length    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  rows;  i  <  max;  ++i)  {  [CE]  ')'  expected  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  rows;  i  <  max;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  rows;  i  <  max;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    (int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  rows;  i  <  0;  ++i)  {  [CE]  ')'  expected  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  rows;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  rows;  i  <  0;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    (int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  rows;  i  <  cols;  ++i)  {  [CE]  ')'  expected  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  rows;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  rows;  i  <  cols;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    (int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  rows;  i  <  +  cols;  ++i)  {  [CE]  ')'  expected  [FE]              EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  rows;  i  <  +  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  rows;  i  <  +  cols;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    (int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
80	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][rows];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  double[][]  cols  =  new  double[cols][rows];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	double[][]  cols  =  new  double[cols][rows];	  double[][]    cols    =    new    double[cols][max];    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
81	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  1;  i  <  max;  ++i)  {	  for(int    i    =    0;    i    <    max;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	replace
82	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {	  for(int    i    =    0;    i    <    max;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	replace
83	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  /  jTj.length;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  cols  =  problem.getAllParameters().length  /  jTj.length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	cols  =  problem.getAllParameters().length  /  jTj.length;	  cols    =    problem.getAllParameters().length    +    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
84	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  *  jTj.length;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  cols  =  problem.getAllParameters().length  *  jTj.length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	cols  =  problem.getAllParameters().length  *  jTj.length;	  cols    =    problem.getAllParameters().length    +    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
85	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  +  jTj,  cols.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  cols  =  problem.getAllParameters().length  +  jTj,  cols.length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	cols  =  problem.getAllParameters().length  +  jTj,  cols.length;	  cols    =    problem.getAllParameters().length    +    jTj.length;    	non-compiled	[CE]  ';'  expected	58	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    i    =    1;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	47	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  1;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  1;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  1;  i  <  cols;  ++i)  {	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    i    =    1;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	47	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  0;  i  <  cols;  ++i)  {  }  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  0;  i  <  cols;  ++i)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  0;  i  <  cols;  ++i)  {  }	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    i    =    1;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	47	None	replace
89	[BUG]  [BUGGY]  For(int  i  =  cols;  i  <  0;  ++i)  {  [CE]  '.class'  expected  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  For(int  i  =  cols;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	For(int  i  =  cols;  i  <  0;  ++i)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    For(int    i    =    cols;    i    <    0;    ++i)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
90	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  }	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
93	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(cols);  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(cols);	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(cols);  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(cols);	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	replace
95	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	For(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows);    	non-compiled	[CE]  '.class'  expected	49	None	replace
96	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  /  2;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getAllParameters().length  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getAllParameters().length  /  2;	  int    cols    =    problem.getAllParameters().length    -    2;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  0;  i  <  rows;  ++i)  {  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  (int  i  =  0;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    (int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  ')'  expected	56	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  int  i  =  0;  i  <  rows;  ++i)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  int  i  =  0;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    (int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  >  expected	56	None	replace
99	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][max];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  double[][]  jTj  =  new  double[rows][max];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	double[][]  jTj  =  new  double[rows][max];	  double[][]    jTj    =    new    double[rows][cols];    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
100	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	double[][]  jTj  =  new  double[rows][cols  +  1];	  double[][]    jTj    =    new    double[rows][cols];    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
101	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  /  2;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  cols  =  problem.getAllParameters().length  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	cols  =  problem.getAllParameters().length  /  2;	  cols    =    problem.getAllParameters().length    -    2;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }	  for(int    i    =    rows;    i    <    cols;    ++i)    {    if(cols    <    rows)    {    for(int    i    =    rows;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  i  =  rows;  i  <  cols;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  i  =  rows;  i  <  cols;  ++i)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  i  =  rows;  i  <  cols;  ++i)  {  }	  for(int    i    =    rows;    i    <    cols;    ++i)    {    if(cols    <    rows)    {    for(int    i    =    rows;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
104	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  max)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  max)  {  }	  for(int    i    =    rows;    i    <    cols;    ++i)    {    if(cols    <    rows)    {    for(int    i    =    rows;    i    <    cols;    ++i)    {    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	68	1	replace
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  max)  {  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  max)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  max)  {  }	  for(int    i    =    rows;    i    <    cols;    ++i)    {    if(cols    <    rows)    {    for(int    i    =    rows;    i    <    cols;    ++i)    {    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	68	1	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  }  [CE]  illegal  start  of  expression  [FE]              EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  }	  for(int    i    =    rows;    i    <    cols;    ++i)    {    if(cols    <    rows)    {    for(int    i    =    rows;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	52	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  cols;  i  >=  0;  ++i)  {  for(int  i  =  cols;  i  >=  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  >=  0;  ++i)  {  for(int  i  =  cols;  i  >=  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i    >=    0;    ++i)    {    for(int  i  =  cols;  i  >=  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
109	[BUG]  [BUGGY]  for(int  i  =  cols;  i  >=  0;  ++i)  {  for(int  i  =  cols;  i!=  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  >=  0;  ++i)  {  for(int  i  =  cols;  i!=  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i    >=    0;    ++i)    {    for(int  i  =  cols;  i!=  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
110	[BUG]  [BUGGY]  for(int  i  =  cols;  i  >=  0;  ++i)  {  for(int  i  =  cols;  i  >>  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  >=  0;  ++i)  {  for(int  i  =  cols;  i  >>  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i    >=    0;    ++i)    {    for(int  i  =  cols;  i  >>  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
111	[BUG]  [BUGGY]  for(int  i  =  cols;  i  >=  0;  ++i)  {  for(int  i  =  cols;  i  ==  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  >=  0;  ++i)  {  for(int  i  =  cols;  i  ==  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i    >=    0;    ++i)    {    for(int  i  =  cols;  i  ==  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
112	[BUG]  [BUGGY]  for(int  i  =  cols;  i  >=  0;  ++i)  {  int  i  =  cols;  i  >=  0;  ++i)  {  [CE]  not  a  statement  [FE]            EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  >=  0;  ++i)  {  int  i  =  cols;  i  >=  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i    >=    0;    ++i)    {    int  i  =  cols;  i  >=  0;  ++i)  {	  	non-compiled	[CE]  not  a  statement	59	None	add
113	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  (int  i  =  cols;  i  <  0;  ++i)  {  [CE]  ')'  expected  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  (int  i  =  cols;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  <  0;  ++i)  {  (int  i  =  cols;  i  <  0;  ++i)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    (int    i    =    cols;    i    <    0;    ++i)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  (int  i  =  cols;  i  <  0;  ++i)  {  [CE]  ')'  expected  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  (int  i  =  cols;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  cols;  i  <  rows;  ++i)  {  (int  i  =  cols;  i  <  0;  ++i)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    (int    i    =    cols;    i    <    0;    ++i)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  final  int  i  =  cols;  i  <  0;  ++i)  {  [CE]  illegal  start  of  type  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  final  int  i  =  cols;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  <  0;  ++i)  {  final  int  i  =  cols;  i  <  0;  ++i)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    (int    i    =    cols;    i    <    0;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    1;    i    <    cols;    ++i)    {    int    i    =    1;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	27	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  1;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  1;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  int  i  =  1;  i  <  cols;  ++i)  {	  for(int    i    =    1;    i    <    cols;    ++i)    {    int    i    =    1;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	27	None	replace
118	[BUG]  [BUGGY]  int  i  =  1;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  i  =  1;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  i  =  1;  i  <  cols;  ++i)  {	  for(int    i    =    1;    i    <    cols;    ++i)    {    int    i    =    1;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	27	None	replace
119	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
120	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  }  [FE]  EstimationException  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
121	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  if(cols  <  0)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  cols;  i  <  rows;  ++i)  {  if(cols  <  0)  {  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
122	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  if(cols  <  0)  {  }  [FE]  EstimationException  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  if(cols  <  0)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  cols;  i  <  rows;  ++i)  {  if(cols  <  0)  {  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
123	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  cols;  ++i)  {  if(cols  <  0)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  rows;  i  <  cols;  ++i)  {  if(cols  <  0)  {  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
124	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  cols;  ++i)  {  if(cols  <  0)  {  }  [FE]  EstimationException  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  cols;  ++i)  {  if(cols  <  0)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  <  cols;  ++i)  {  if(cols  <  0)  {  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
125	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]              EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  continue;  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  continue;  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
126	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  continue;  }  [FE]  EstimationException  [FE]              EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  continue;  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  continue;  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
127	[BUG]  [BUGGY]  int  cols  =  problem.getRowCount()  /  1;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getRowCount()  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getRowCount()  /  1;	  int    cols    =    problem.getRowCount()    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
128	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];	  double[][]    cols    =    new    double[cols][max];    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  =  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  =  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  cols;  i  <  =  rows;  ++i)  {	  for(int    i    =    cols;    i    <    rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  (int  i  =  rows;  i  <  0;  ++i)  {  [CE]  ')'  expected  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  (int  i  =  rows;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    rows;    i    <    0;    ++i)    {    (int  i  =  rows;  i  <  0;  ++i)  {	  	non-compiled	[CE]  ')'  expected	43	None	add
131	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  ((  EstimationProblem)problem).setMeasurements(cols);  [CE]  illegal  start  of  expression  [FE]      EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  ((  EstimationProblem)problem).setMeasurements(cols);  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    rows;    i    <    0;    ++i)    {    ((  EstimationProblem)problem).setMeasurements(cols);	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
132	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  +  jTj;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  cols  =  problem.getAllParameters().length  +  jTj;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	cols  =  problem.getAllParameters().length  +  jTj;	  cols    =    problem.getAllParameters().length    +    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  For(int  i  =  cols;  i  <  0;  ++i)  {  [CE]  '.class'  expected  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  For(int  i  =  cols;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  <  0;  ++i)  {  For(int  i  =  cols;  i  <  0;  ++i)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    For(int    i    =    cols;    i    <    0;    ++i)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
134	[BUG]  [BUGGY]  int  cols  =  problem.getColumnSize()  -  1;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getColumnSize()  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getColumnSize()  -  1;	  int    cols    =    problem.getColumnCount()    -    1;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
135	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    For(int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  '.class'  expected	33	None	replace
136	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1  +  max;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1  +  max;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getAllParameters().length  -  1  +  max;	  int    cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
137	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	For(int  i  =  0;  i  <  rows.length;  ++i)  {	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	52	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  (int  i  =  2;  i  <  cols;  ++i)  {  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  (int  i  =  2;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    2;    i    <    cols;    ++i)    {    (int  i  =  2;  i  <  cols;  ++i)  {	  	non-compiled	[CE]  ')'  expected	21	None	add
139	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  ((  int  i  =  2;  i  <  cols;  ++i)  {  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  ((  int  i  =  2;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    2;    i    <    cols;    ++i)    {    ((  int  i  =  2;  i  <  cols;  ++i)  {	  	non-compiled	[CE]  ')'  expected	21	None	add
140	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  1;  i  <  rows;  ++i)  {  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  1;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    1;    i    <    rows;    ++i)    {    ArrayIndexOutOfBoundsException  i  =  1;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  >  expected	19	None	add
141	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  ArrayIndexOutOfBoundsException  jTj  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  ArrayIndexOutOfBoundsException  jTj  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    1;    i    <    rows;    ++i)    {    ArrayIndexOutOfBoundsException  jTj  =  new  ArrayIndexOutOfBoundsException(rows,  cols);	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
142	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  ArrayIndexOutOfBoundsException  jTj  =  new  ArrayIndexOutOfBoundsException(rows);  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  ArrayIndexOutOfBoundsException  jTj  =  new  ArrayIndexOutOfBoundsException(rows);  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    1;    i    <    rows;    ++i)    {    ArrayIndexOutOfBoundsException  jTj  =  new  ArrayIndexOutOfBoundsException(rows);	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  ((  int  i  =  cols;  i  <  0;  ++i)  {  [CE]  ')'  expected  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  ((  int  i  =  cols;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  ((  int  i  =  cols;  i  <  0;  ++i)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    ((    int    i    =    cols;    i    <    0;    ++i)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  if(cols  <  rows)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  }  [CE]  illegal  start  of  expression  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  if(cols  <  rows)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  cols;  i  <  rows;  ++i)  {  if(cols  <  rows)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  }	  for(int    i    =    rows;    i    <    cols;    ++i)    {    if(cols    <    rows)    {    for(int    i    =    rows;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  1;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  1;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  }	  for(int    i    =    rows;    i    <    cols;    ++i)    {    if(cols    <    rows)    {    for(int    i    =    rows;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
146	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  -  1  +  rows;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  cols  =  problem.getAllParameters().length  -  1  +  rows;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	cols  =  problem.getAllParameters().length  -  1  +  rows;	  cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  [CE]  illegal  start  of  expression  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
148	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  max;  ++i)  {  if(cols  <  0)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  cols;  i  <  max;  ++i)  {  if(cols  <  0)  {  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
149	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  max;  ++i)  {  if(cols  <  0)  {  }  [FE]  EstimationException  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  max;  ++i)  {  if(cols  <  0)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  cols;  i  <  max;  ++i)  {  if(cols  <  0)  {  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
150	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  0;  ++i)  {  if(rows  >  0)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  cols;  i  <  0;  ++i)  {  if(rows  >  0)  {  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
151	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  0;  ++i)  {  if(rows  >  0)  {  }  [FE]  EstimationException  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  0;  ++i)  {  if(rows  >  0)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  cols;  i  <  0;  ++i)  {  if(rows  >  0)  {  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  0;  i  <  rows;  ++i)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  0;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    ArrayIndexOutOfBoundsException    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  >  expected	57	None	replace
153	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  -  4;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  cols  =  problem.getAllParameters().length  -  4;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	cols  =  problem.getAllParameters().length  -  4;	  cols    =    problem.getAllParameters().length    -    2;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
154	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  -  4;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getColumns().length  -  4;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getColumns().length  -  4;	  int    cols    =    problem.getColumns().length    -    2;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
155	[BUG]  [BUGGY]  int  i  =  0;  i  <  rows;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  i  =  0;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    int    i    =    0;    i    <    rows;    ++i)    {    	non-compiled	[CE]  >  expected	34	None	replace
156	[BUG]  [BUGGY]  int  cols  =  problem.getColumnSize();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getColumnSize();  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getColumnSize();	  int    cols    =    problem.getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
157	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  +  jTj.length;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getMeasurements().length  +  jTj.length;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getMeasurements().length  +  jTj.length;	  int    cols    =    problem.getMeasurements().length    +    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  (int  i  =  0;  i  <  cols;  ++i)  {  [CE]  ')'  expected  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  (int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  (int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    (int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  (int  i  =  cols;  i  <  0;  ++i)  {  [CE]  ')'  expected  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  (int  i  =  cols;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  (int  i  =  cols;  i  <  0;  ++i)  {	  for(int    i    =    cols;    i    <    0;    ++i)    {    (int    i    =    cols;    i    <    0;    ++i)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  rows;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  rows;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  rows;  i  <  cols;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	39	None	replace
161	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  max;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  rows;  i  <  max;  ++i)  {	  for(int    i    =    0;    i    <    max;    ++i)    {    	compilable	  [FE]  EstimationException  	41	1	replace
162	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  max;  ++i)  {  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  max;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  <  max;  ++i)  {	  for(int    i    =    0;    i    <    max;    ++i)    {    	compilable	  [FE]  EstimationException  	41	1	replace
163	[BUG]  [BUGGY]  for(int  i  =  cols;  i!=  0;  ++i)  {  (int  i  =  cols;  i!=  0;  ++i)  {  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i!=  0;  ++i)  {  (int  i  =  cols;  i!=  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i!=    0;    ++i)    {    (int  i  =  cols;  i!=  0;  ++i)  {	  	non-compiled	[CE]  ')'  expected	61	None	add
164	[BUG]  [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  (int  i  =  cols;  i  <  rows;  ++i)  {  [CE]  ')'  expected  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  <  rows;  ++i)  {  (int  i  =  cols;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i    <    rows;    ++i)    {    (int  i  =  cols;  i  <  rows;  ++i)  {	  	non-compiled	[CE]  ')'  expected	7	None	add
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  0;  i  <  max;  ++i)  {  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  0;  i  <  max;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    0;    i    <    max;    ++i)    {    ArrayIndexOutOfBoundsException  i  =  0;  i  <  max;  ++i)  {	  	non-compiled	[CE]  >  expected	40	None	add
166	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ((  int  i  =  rows;  i  <  0;  ++i)  {  [CE]  ')'  expected  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ((  int  i  =  rows;  i  <  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  ((  int  i  =  rows;  i  <  0;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    ((    int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  ')'  expected	55	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  ((  int  i  =  0;  i  <  cols;  ++i)  {  [CE]  ')'  expected  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  ((  int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  ((  int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    ((    int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  ')'  expected	55	None	replace
168	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  ==  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  rows;  i  ==  0;  ++i)  {	  for(int    i    =    rows;    i    <    0;    ++i)    {    	compilable	  [FE]  EstimationException  	44	1	replace
169	[BUG]  [BUGGY]  for(int  i  =  rows;  i  ==  0;  ++i)  {  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  ==  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  ==  0;  ++i)  {	  for(int    i    =    rows;    i    <    0;    ++i)    {    	compilable	  [FE]  EstimationException  	44	1	replace
170	[BUG]  [BUGGY]  for(int  i  =  cols;  i  >=  0;  ++i)  {  (int  i  =  cols;  i  >=  0;  ++i)  {  [CE]  ')'  expected  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  >=  0;  ++i)  {  (int  i  =  cols;  i  >=  0;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    cols;    i    >=    0;    ++i)    {    (int  i  =  cols;  i  >=  0;  ++i)  {	  	non-compiled	[CE]  ')'  expected	59	None	add
171	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows,  cols);	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows,    cols);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
172	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  >=  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  rows;  i  >=  cols;  ++i)  {	  for(int    i    =    rows;    i    <    0;    ++i)    {    	compilable	  [FE]  EstimationException  	44	1	replace
173	[BUG]  [BUGGY]  for(int  i  =  rows;  i  >=  cols;  ++i)  {  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  >=  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  >=  cols;  ++i)  {	  for(int    i    =    rows;    i    <    0;    ++i)    {    	compilable	  [FE]  EstimationException  	44	1	replace
174	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getAllParameters().length  -  1  +  rows;	  int    cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  (int  i  =  rows;  i  <  cols;  ++i)  {  [CE]  ')'  expected  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  (int  i  =  rows;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  (int  i  =  rows;  i  <  cols;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    (int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  (int  i  =  rows;  i  <  cols;  ++i)  {  [CE]  ')'  expected  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  1;  i  <  rows;  ++i)  {  (int  i  =  rows;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  1;  i  <  rows;  ++i)  {  (int  i  =  rows;  i  <  cols;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    (int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
177	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  i  =  1;  i  <  cols;  ++i)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  ArrayIndexOutOfBoundsException  i  =  1;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	ArrayIndexOutOfBoundsException  i  =  1;  i  <  cols;  ++i)  {	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    i    =    1;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	47	None	replace
178	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1  +  rows;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1  +  rows;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getMeasurements().length  -  1  +  rows;	  int    cols    =    problem.getMeasurements().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  For(int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    1;    i    <    cols;    ++i)    {    For(int    i    =    1;    i    <    cols;    ++i)    {    	non-compiled	[CE]  '.class'  expected	28	None	replace
180	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  >=  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  cols;  i  >=  rows;  ++i)  {	  for(int    i    =    cols;    i    >=    0;    ++i)    {    	compilable	  [FE]  EstimationException  	60	1	replace
181	[BUG]  [BUGGY]  for(int  i  =  cols;  i  >=  rows;  ++i)  {  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  cols;  i  >=  rows;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  cols;  i  >=  rows;  ++i)  {	  for(int    i    =    cols;    i    >=    0;    ++i)    {    	compilable	  [FE]  EstimationException  	60	1	replace
182	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  for(int  i  =  rows;  i  <  0;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(cols  <  0)  {  for(int  i  =  rows;  i  <  0;  ++i)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    rows;    i    <    0;    ++i)    {    if(cols  <  0)  {  for(int  i  =  rows;  i  <  0;  ++i)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
183	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(rows  <  0)  {  for(int  i  =  rows;  i  <  0;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]      EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(rows  <  0)  {  for(int  i  =  rows;  i  <  0;  ++i)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    rows;    i    <    0;    ++i)    {    if(rows  <  0)  {  for(int  i  =  rows;  i  <  0;  ++i)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  rows;  i  <  cols;  ++i)  {  }  [CE]  >  expected  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  rows;  i  <  cols;  ++i)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  int  i  =  rows;  i  <  cols;  ++i)  {  }	  for(int    i    =    rows;    i    <    cols;    ++i)    {    int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  >  expected	39	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(cols  <  0)  {  for(int  i  =  0;  i  <  max;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(cols  <  0)  {  for(int  i  =  0;  i  <  max;  ++i)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    0;    i    <    max;    ++i)    {    if(cols  <  0)  {  for(int  i  =  0;  i  <  max;  ++i)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
186	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  ((  int  i  =  rows;  i  <  cols;  ++i)  {  [CE]  ')'  expected  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  ((  int  i  =  rows;  i  <  cols;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  ((  int  i  =  rows;  i  <  cols;  ++i)  {	  for(int    i    =    rows;    i    <    cols;    ++i)    {    ((    int    i    =    rows;    i    <    cols;    ++i)    {    	non-compiled	[CE]  ')'  expected	55	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  max;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  }  [CE]  illegal  start  of  expression  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  max;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  max;  i  <  cols;  ++i)  {  if(cols  <  rows)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  }	  for(int    i    =    rows;    i    <    cols;    ++i)    {    if(cols    <    rows)    {    for(int    i    =    rows;    i    <    cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
188	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  -  1  +  rows;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  int  cols  =  problem.getColumns().length  -  1  +  rows;  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	int  cols  =  problem.getColumns().length  -  1  +  rows;	  int    cols    =    problem.getColumns().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
189	[BUG]  [BUGGY]  double[][]  cols  =  new  double[max][cols  -  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  double[][]  cols  =  new  double[max][cols  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	double[][]  cols  =  new  double[max][cols  -  1];	  double[][]    cols    =    new    double[max][cols];    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
190	[BUG]  [BUGGY]  double[][]  cols  =  new  double[1][cols];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  double[][]  cols  =  new  double[1][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	double[][]  cols  =  new  double[1][cols];	  double[][]    cols    =    new    double[max][cols];    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
191	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);	  for(int    i    =    1;    i    <    cols;    ++i)    {    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows,  jTj.length;  ++i)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  0;  i  <  rows,  jTj.length;  ++i)  {  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  0;  i  <  rows,  jTj.length;  ++i)  {	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(jTj  <  0)  {  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(jTj  <  0)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  <  0;  ++i)  {  if(jTj  <  0)  {  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	67	None	replace
194	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(!jTj.equals(cols))  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	for(int  i  =  rows;  i  <  0;  ++i)  {  if(!jTj.equals(cols))  {  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
195	[BUG]  [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(!jTj.equals(cols))  {  }  [FE]  EstimationException  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  rows;  i  <  0;  ++i)  {  if(!jTj.equals(cols))  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int  i  =  rows;  i  <  0;  ++i)  {  if(!jTj.equals(cols))  {  }	  for(int    i    =    cols;    i    <    0;    ++i)    {    if(cols    <    0)    {    for(int    i    =    cols;    i    <    0;    ++i)    {    }    	compilable	  [FE]  EstimationException  	67	1	replace
196	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  if(cols!=  null)  {  for(int  i  =  2;  i  <  cols;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  if(cols!=  null)  {  for(int  i  =  2;  i  <  cols;  ++i)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    2;    i    <    cols;    ++i)    {    if(cols!=  null)  {  for(int  i  =  2;  i  <  cols;  ++i)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
197	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  if(cols  <  2)  {  for(int  i  =  2;  i  <  cols;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];      [BUGGY]  for(int  i  =  2;  i  <  cols;  ++i)  {  if(cols  <  2)  {  for(int  i  =  2;  i  <  cols;  ++i)  {  }  [BUGGY]      for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	for(int    i    =    2;    i    <    cols;    ++i)    {    if(cols  <  2)  {  for(int  i  =  2;  i  <  cols;  ++i)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
