bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getSize(),  parameters);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getSize(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getSize(),  parameters);	  double    factor    =    -Math.exp(wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
2	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm,  parameters.getSize());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm,  parameters.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm,  parameters.getSize());	  double    factor    =    -Math.exp(wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
3	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getSize()  /  scale);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getSize()  /  scale);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getSize()  /  scale);	  double    factor    =    -Math.exp(wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
4	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[wm.getColumn());  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[wm.getColumn());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[wm.getColumn());	  double    factor    =    -Math.sqrt(wm,    wm.getColumn());    	non-compiled	[CE]  ']'  expected	2	None	replace
5	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getColumn());  [CE]  cannot  find  symbol  dataArea  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getColumn());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getColumn());	  double    factor    =    -Math.sqrt(wm,    wm.getColumn());    	non-compiled	[CE]  cannot  find  symbol  dataArea	2	None	replace
6	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  metrics.getColumn());  [CE]  cannot  find  symbol  metrics  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  metrics.getColumn());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  metrics.getColumn());	  double    factor    =    -Math.sqrt(wm,    wm.getColumn());    	non-compiled	[CE]  cannot  find  symbol  metrics	2	None	replace
7	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnCount()  *  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnCount()  *  1;	  int    cols    =    wm.getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
8	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  /  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnCount()  /  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnCount()  /  1;	  int    cols    =    wm.getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
9	[BUG]  [BUGGY]  SizedMeasurement[]  wm  =  wm.getSize();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  wm  =  wm.getSize();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  wm  =  wm.getSize();	  SizedMeasurement    wm[]    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
10	[BUG]  [BUGGY]  SizedMeasurement  wm[]  =  parameters.getSize();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  wm[]  =  parameters.getSize();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  wm[]  =  parameters.getSize();	  SizedMeasurement    wm[]    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
11	[BUG]  [BUGGY]  SizedMeasurement  wm[]  =  wm.getSize()  +  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  wm[]  =  wm.getSize()  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  wm[]  =  wm.getSize()  +  1;	  SizedMeasurement    wm[]    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
12	[BUG]  [BUGGY]  int  cols  =  wm.getRowsCount()  +  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getRowsCount()  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getRowsCount()  +  1;	  int    cols    =    wm.getRowsCount();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
13	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[wm.getFullDuration());  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[wm.getFullDuration());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[wm.getFullDuration());	  double    factor    =    -Math.sqrt(wm,    wm.getFullDuration());    	non-compiled	[CE]  ']'  expected	58	None	replace
14	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  metrics.getFullDuration());  [CE]  cannot  find  symbol  metrics  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  metrics.getFullDuration());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  metrics.getFullDuration());	  double    factor    =    -Math.sqrt(wm,    wm.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol  metrics	58	None	replace
15	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getFullDuration());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getFullDuration());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getFullDuration());	  double    factor    =    -Math.sqrt(wm,    parameters.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
16	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[index].getFullDuration());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[index].getFullDuration());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[index].getFullDuration());	  double    factor    =    -Math.sqrt(wm,    parameters.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
17	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters[i]);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters[i]);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters[i]);	  double    factor    =    -Math.sqrt(wm.getRowCount(),    parameters.length);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
18	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters[i].length);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters[i].length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters[i].length);	  double    factor    =    -Math.sqrt(wm.getRowCount(),    parameters.length);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
19	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumnCount(),  parameters.length);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumnCount(),  parameters.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getColumnCount(),  parameters.length);	  double    factor    =    -Math.sqrt(wm.getRowCount(),    parameters.length);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
20	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  cols.length);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  cols.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getRowCount(),  cols.length);	  double    factor    =    -Math.sqrt(wm.getRowCount(),    parameters.length);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
21	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[cols.size()  +  1]);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[cols.size()  +  1]);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[cols.size()  +  1]);	  WeightedMeasurement[]    cols    =    wm.toArray(new    WeightedMeasurement[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
22	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[cols.length()  ]);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[cols.length()  ]);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[cols.length()  ]);	  WeightedMeasurement[]    cols    =    wm.toArray(new    WeightedMeasurement[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
23	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[labels.size()  ]);  [CE]  cannot  find  symbol  labels  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[labels.size()  ]);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[labels.size()  ]);	  WeightedMeasurement[]    cols    =    wm.toArray(new    WeightedMeasurement[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  labels	71	None	replace
24	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  metrics.getColumns();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm,  metrics.getColumns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  metrics.getColumns();	  WeightedMeasurement[]    cols    =    wm,    index.getColumns();    	non-compiled	[CE]  ';'  expected	90	None	replace
25	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  measurements[i].getSize());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  measurements[i].getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  measurements[i].getSize());	  double    factor    =    -Math.sqrt(wm,    parameters[i].getSize());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
26	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i],  wm.getSize());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i],  wm.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i],  wm.getSize());	  double    factor    =    -Math.sqrt(wm,    parameters[i].getSize());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
27	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  measurement[i].getSize());  [CE]  cannot  find  symbol  measurement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  measurement[i].getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  measurement[i].getSize());	  double    factor    =    -Math.sqrt(wm,    parameters[i].getSize());    	non-compiled	[CE]  cannot  find  symbol  measurement	93	None	replace
28	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  new  WeightedMeasurement[wm.cols()  ];  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  new  WeightedMeasurement[wm.cols()  ];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  new  WeightedMeasurement[wm.cols()  ];	  WeightedMeasurement[]    cols    =    wm.cols();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
29	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  new  WeightedMeasurement[wm.getCols()  ];  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  new  WeightedMeasurement[wm.getCols()  ];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  new  WeightedMeasurement[wm.getCols()  ];	  WeightedMeasurement[]    cols    =    wm.cols();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
30	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  parameters.cols();  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm,  parameters.cols();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  parameters.cols();	  WeightedMeasurement[]    cols    =    wm.cols();    	non-compiled	[CE]  ';'  expected	52	None	replace
31	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.exp(wm.getWeight()  -  1);	  double    factor    =    -Math.exp(wm.getWeight());    double    cols    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	replace
32	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  -  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight()  -  1);	  double    factor    =    -Math.exp(wm.getWeight());    double    cols    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	replace
33	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  /  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.exp(wm.getWeight()  /  2);	  double    factor    =    -Math.exp(wm.getWeight());    double    cols    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	replace
34	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  /  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  /  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight()  /  2);	  double    factor    =    -Math.exp(wm.getWeight());    double    cols    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	replace
35	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  cols  =  -Math.sqrt(wm.getWeight());  [CE]  possible  loss  of  precision  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  cols  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeight());  cols  =  -Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    double    cols    =    -Math.sqrt(wm.getWeight()    +    1);    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
36	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  double  cols  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	Double  factor  =  -Math.sqrt(wm.getWeight());  double  cols  =  -Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    double    cols    =    -Math.sqrt(wm.getWeight()    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
37	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  double  cols  =  -Math.sqrt(wm.getWeight());  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  double  cols  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.sqrt(wm.getWeight());  double  cols  =  -Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    double    cols    =    -Math.sqrt(wm.getWeight()    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
38	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[cols.size()  ]);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[cols.size()  ]);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[cols.size()  ]);	  SizedMeasurement    cols[]    =    wm.clone();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
39	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[wm.size()  ]);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[wm.size()  ]);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[wm.size()  ]);	  SizedMeasurement    cols[]    =    wm.clone();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
40	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getColumnCount());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getColumnCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getColumnCount());	  double    factor    =    -Math.exp(wm.getRowCount());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
41	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getRowCount(),  parameters.length);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getRowCount(),  parameters.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getRowCount(),  parameters.length);	  double    factor    =    -Math.exp(wm.getRowCount());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
42	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getRowCount(),  parameters);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getRowCount(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getRowCount(),  parameters);	  double    factor    =    -Math.exp(wm.getRowCount());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
43	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm,  parameters.getRowCount());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm,  parameters.getRowCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm,  parameters.getRowCount());	  double    factor    =    -Math.exp(wm.getRowCount());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
44	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getColumnCount());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getColumnCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getColumnCount());	  double    factor    =    -Math.sqrt(wm.getColumnCount());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
45	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumnCount(),  parameters);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumnCount(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getColumnCount(),  parameters);	  double    factor    =    -Math.sqrt(wm.getColumnCount());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
46	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getColumnCount());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getColumnCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getColumnCount());	  double    factor    =    -Math.sqrt(wm.getColumnCount());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
47	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  *  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnSize()  *  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnSize()  *  1;	  int    cols    =    wm.getColumnSize()    +    1;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
48	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  /  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnSize()  /  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnSize()  /  1;	  int    cols    =    wm.getColumnSize()    +    1;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
49	[BUG]  [BUGGY]  double  index  =  -Math.exp(wm.getWeight());  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  index  =  -Math.exp(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  index  =  -Math.exp(wm.getWeight());	  double    factor    =    -Math.exp(wm.getWeight());    double    index    =    -Math.exp(wm.getWeight());    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	79	None	replace
50	[BUG]  [BUGGY]  double  index  =  -Math.exp(wm.getIndex());  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  index  =  -Math.exp(wm.getIndex());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  index  =  -Math.exp(wm.getIndex());	  double    factor    =    -Math.exp(wm.getWeight());    double    index    =    -Math.exp(wm.getWeight());    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	79	None	replace
51	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  int  cols  =  wm.getColumnCount();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  int  cols  =  wm.getColumnCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeight());  int  cols  =  wm.getColumnCount();	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
52	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  /  1);  int  cols  =  wm.getColumnCount();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  /  1);  int  cols  =  wm.getColumnCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeight()  /  1);  int  cols  =  wm.getColumnCount();	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
53	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm.getSize()  +  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  wm.getSize()  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm.getSize()  +  1;	  SizedMeasurement[]    cols    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
54	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm,  parameters.getSize();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  wm,  parameters.getSize();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm,  parameters.getSize();	  SizedMeasurement[]    cols    =    wm.getSize();    	non-compiled	[CE]  ';'  expected	20	None	replace
55	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.exp(wm.getWeight()  +  2);	  double    factor    =    -Math.exp(wm.getWeight());    double    factor    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
56	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight()  +  2);	  double    factor    =    -Math.exp(wm.getWeight());    double    factor    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
57	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  *  2  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColsCount()  *  2  -  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColsCount()  *  2  -  1;	  int    cols    =    wm.getColsCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
58	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getColumns();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getColumns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm,  parameters.getColumns();	  SizedMeasurement    cols[]    =    wm,    parameters.getRows();    	non-compiled	[CE]  ';'  expected	60	None	replace
59	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  parameters.getRows();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  parameters.getRows();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  parameters.getRows();	  SizedMeasurement    cols[]    =    wm,    parameters.getRows();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
60	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  parameters.getCols();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  parameters.getCols();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  parameters.getCols();	  SizedMeasurement    cols[]    =    wm,    parameters.getRows();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
61	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getRows()  +  1;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getRows()  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm,  parameters.getRows()  +  1;	  SizedMeasurement    cols[]    =    wm,    parameters.getRows();    	non-compiled	[CE]  ';'  expected	60	None	replace
62	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm.getColumns();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  wm.getColumns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm.getColumns();	  SizedMeasurement    cols[]    =    wm.getColumns();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
63	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  parameters.getSize());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  parameters.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getSize(),  parameters.getSize());	  double    factor    =    -Math.sqrt(wm.getSize(),    wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
64	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  parameters[wm.getSize());  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  parameters[wm.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getSize(),  parameters[wm.getSize());	  double    factor    =    -Math.sqrt(wm.getSize(),    wm.getSize());    	non-compiled	[CE]  ']'  expected	94	None	replace
65	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  i,  wm.getSize());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  i,  wm.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getSize(),  i,  wm.getSize());	  double    factor    =    -Math.sqrt(wm.getSize(),    wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
66	[BUG]  [BUGGY]  int  cols  =  wm.getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getRowCount()  -  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getRowCount()  -  1;	  int    cols    =    wm.getColumnCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
67	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  2  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnCount()  *  2  -  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnCount()  *  2  -  1;	  int    cols    =    wm.getColumnCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
68	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.exp(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	Double  factor  =  -Math.exp(wm.getWeight());	  double    factor    =    -Math.exp(wm.getWeight());    Double    factor    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
69	[BUG]  [BUGGY]  Double  factor  =  -Math.exp(wm.getWeight());  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.exp(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.exp(wm.getWeight());	  double    factor    =    -Math.exp(wm.getWeight());    Double    factor    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
70	[BUG]  [BUGGY]  SizedMeasurement  factor  =  -Math.exp(wm.getWeight());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  factor  =  -Math.exp(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  factor  =  -Math.exp(wm.getWeight());	  double    factor    =    -Math.exp(wm.getWeight());    Double    factor    =    -Math.exp(wm.getWeight());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
71	[BUG]  [BUGGY]  int  cols  =  wm.getWeight();  [CE]  possible  loss  of  precision  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getWeight();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getWeight();	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    int    cols    =    wm.getWeight()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
72	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  int  cols  =  wm.getWeight();  [CE]  possible  loss  of  precision  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  int  cols  =  wm.getWeight();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeight());  int  cols  =  wm.getWeight();	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    int    cols    =    wm.getWeight()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
73	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  int  cols  =  wm.getWeight();  [CE]  possible  loss  of  precision  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  int  cols  =  wm.getWeight();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.sqrt(wm.getWeight());  int  cols  =  wm.getWeight();	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    int    cols    =    wm.getWeight()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
74	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  cols  =  wm.getWeight();  [CE]  possible  loss  of  precision  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  cols  =  wm.getWeight();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeight());  cols  =  wm.getWeight();	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    int    cols    =    wm.getWeight()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
75	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumn(),  cols);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumn(),  cols);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getColumn(),  cols);	  double    factor    =    -Math.sqrt(wm.getColumn(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
76	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumn(),  jacobian);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumn(),  jacobian);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getColumn(),  jacobian);	  double    factor    =    -Math.sqrt(wm.getColumn(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
77	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getValue());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getValue());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getValue());	  double    factor    =    -Math.sqrt(wm.getValue());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
78	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getValue());  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getValue());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getValue());	  double    factor    =    -Math.sqrt(wm.getValue());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
79	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getValue(),  parameters);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getValue(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getValue(),  parameters);	  double    factor    =    -Math.sqrt(wm.getValue());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
80	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  parameters.getCols();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  parameters.getCols();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  parameters.getCols();	  SizedMeasurement[]    cols    =    wm,    parameters.getCols();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
81	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm,  parameters.getRows();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  wm,  parameters.getRows();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm,  parameters.getRows();	  SizedMeasurement[]    cols    =    wm,    parameters.getCols();    	non-compiled	[CE]  ';'  expected	44	None	replace
82	[BUG]  [BUGGY]  int  cols  =  wm.getSize()  +  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getSize()  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getSize()  +  1;	  int    cols    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
83	[BUG]  [BUGGY]  int  cols  =  wm.getSize()  +  2;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getSize()  +  2;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getSize()  +  2;	  int    cols    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
84	[BUG]  [BUGGY]  int  cols  =  wm.getSize()  *  parameters.length;  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getSize()  *  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getSize()  *  parameters.length;	  int    cols    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
85	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  parameters.getColumnCount());  int  cols  =  wm.getColumnCount();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  parameters.getColumnCount());  int  cols  =  wm.getColumnCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight(),  parameters.getColumnCount());  int  cols  =  wm.getColumnCount();	  double    factor    =    -Math.exp(wm.getWeight());    int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
86	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  cols);  int  cols  =  wm.getColumnCount();  [CE]  method  exp  in  class  Math  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  cols);  int  cols  =  wm.getColumnCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight(),  cols);  int  cols  =  wm.getColumnCount();	  double    factor    =    -Math.exp(wm.getWeight());    int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  method  exp  in  class  Math  cannot  be  applied  to  given  types;	80	None	replace
87	[BUG]  [BUGGY]  int  cols  =  wm.getColsSize();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColsSize();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColsSize();	  int    cols    =    wm.getRowSize();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
88	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getCols()  +  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getCols()  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm,  parameters.getCols()  +  1;	  SizedMeasurement    cols[]    =    wm,    parameters.getCols();    	non-compiled	[CE]  ';'  expected	49	None	replace
89	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  parameters.getPartials();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm,  parameters.getPartials();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  parameters.getPartials();	  WeightedMeasurement[]    cols    =    wm.getPartials();    	non-compiled	[CE]  ';'  expected	23	None	replace
90	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize(index);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize(index);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.getSize(index);	  SizedMeasurement    cols[]    =    wm.getSize(i);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
91	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize(i,  index);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize(i,  index);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.getSize(i,  index);	  SizedMeasurement    cols[]    =    wm.getSize(i);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
92	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize(i,  parameters);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize(i,  parameters);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.getSize(i,  parameters);	  SizedMeasurement    cols[]    =    wm.getSize(i);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
93	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  parameters.getRows();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm,  parameters.getRows();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  parameters.getRows();	  WeightedMeasurement[]    cols    =    wm.getRows();    	non-compiled	[CE]  ';'  expected	22	None	replace
94	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  cols);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  cols);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getRowCount(),  cols);	  double    factor    =    -Math.sqrt(wm.getRowCount(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
95	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters,  costEvaluations);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters,  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters,  costEvaluations);	  double    factor    =    -Math.sqrt(wm.getRowCount(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
96	[BUG]  [BUGGY]  Math  factor  =  -Math.sqrt(wm.getWeight());  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Math  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Math  factor  =  -Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    double    coefficient    =    -Math.sqrt(wm.getWeight()    +    1);    	non-compiled	[CE]  incompatible  types	38	None	replace
97	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getFieldType(),  parameters);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getFieldType(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getFieldType(),  parameters);	  double    factor    =    -Math.exp(wm.getFieldType());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
98	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm,  parameters.getFieldType());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm,  parameters.getFieldType());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm,  parameters.getFieldType());	  double    factor    =    -Math.exp(wm.getFieldType());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
99	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getFieldType(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getFieldType(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getFieldType(),  costEvaluations);	  double    factor    =    -Math.exp(wm.getFieldType());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
100	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  parameters.getColumnsCount());  int  cols  =  wm.getColumnsCount();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  parameters.getColumnsCount());  int  cols  =  wm.getColumnsCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight(),  parameters.getColumnsCount());  int  cols  =  wm.getColumnsCount();	  double    factor    =    -Math.exp(wm.getWeight());    int    cols    =    wm.getColumnsCount();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
101	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  cols);  int  cols  =  wm.getColumnsCount();  [CE]  method  exp  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  cols);  int  cols  =  wm.getColumnsCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight(),  cols);  int  cols  =  wm.getColumnsCount();	  double    factor    =    -Math.exp(wm.getWeight());    int    cols    =    wm.getColumnsCount();    	non-compiled	[CE]  method  exp  in  class  Math  cannot  be  applied  to  given  types;	14	None	replace
102	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())/  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.sqrt(wm.getWeight())/  1;	  double    factor    =    -Math.sqrt(wm.getWeight())+    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	97	1	replace
103	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())/  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())/  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeight())/  1;	  double    factor    =    -Math.sqrt(wm.getWeight())+    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	97	1	replace
104	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1)+  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.sqrt(wm.getWeight()  +  1)+  1;	  double    factor    =    -Math.sqrt(wm.getWeight())+    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	97	1	replace
105	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1)+  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1)+  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeight()  +  1)+  1;	  double    factor    =    -Math.sqrt(wm.getWeight())+    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	97	1	replace
106	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth())+  1;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth())+  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWidth())+  1;	  double    factor    =    -Math.sqrt(wm.getWeight())+    1;    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
107	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize())+  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize())+  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getSize())+  1;	  double    factor    =    -Math.sqrt(wm.getWeight())+    1;    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
108	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[index].getRowCount());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[index].getRowCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[index].getRowCount());	  double    factor    =    -Math.sqrt(wm,    parameters.getRowCount());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
109	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  parameters.getCols();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  parameters.getCols();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  parameters.getCols();	  WeightedMeasurement[]    cols    =    wm,    parameters.getCols();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
110	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[wm.getRowCount());  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[wm.getRowCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[wm.getRowCount());	  double    factor    =    -Math.sqrt(wm,    wm.getRowCount());    	non-compiled	[CE]  ']'  expected	70	None	replace
111	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getRowCount());  [CE]  cannot  find  symbol  dataArea  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getRowCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getRowCount());	  double    factor    =    -Math.sqrt(wm,    wm.getRowCount());    	non-compiled	[CE]  cannot  find  symbol  dataArea	70	None	replace
112	[BUG]  [BUGGY]  int  cols  =  wm.getColumns();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumns();	  int    cols    =    wm.getRows();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
113	[BUG]  [BUGGY]  int  cols  =  wm.getRows()  +  1;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getRows()  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getRows()  +  1;	  int    cols    =    wm.getRows();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
114	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm.getCols(index);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  wm.getCols(index);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm.getCols(index);	  SizedMeasurement[]    cols    =    wm.getCols(i);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
115	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm.getCols(i,  parameters);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  wm.getCols(i,  parameters);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm.getCols(i,  parameters);	  SizedMeasurement[]    cols    =    wm.getCols(i);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
116	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getWidth());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getWidth());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getWidth());	  double    factor    =    -Math.sqrt(wm.getWidth());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
117	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getWidth());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getWidth());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getWidth());	  double    factor    =    -Math.sqrt(wm.getWidth());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
118	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth(),  wm.getValue());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth(),  wm.getValue());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWidth(),  wm.getValue());	  double    factor    =    -Math.sqrt(wm.getWidth());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
119	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[index].getSize());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[index].getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[index].getSize());	  double    factor    =    -Math.sqrt(wm,    parameters.getSize());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
120	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  measurements[i].getFieldType());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  measurements[i].getFieldType());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  measurements[i].getFieldType());	  double    factor    =    -Math.sqrt(wm,    parameters[i].getFieldType());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
121	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i],  wm.getFieldType());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i],  wm.getFieldType());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i],  wm.getFieldType());	  double    factor    =    -Math.sqrt(wm,    parameters[i].getFieldType());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
122	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getFieldType(),  jacobian);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getFieldType(),  jacobian);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getFieldType(),  jacobian);	  double    factor    =    -Math.sqrt(wm,    parameters[i].getFieldType());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
123	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getColls();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getColls();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm,  parameters.getColls();	  SizedMeasurement    cols[]    =    wm.getColls();    	non-compiled	[CE]  ';'  expected	81	None	replace
124	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.colls();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.colls();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.colls();	  SizedMeasurement    cols[]    =    wm.getColls();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
125	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  *  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnsCount()  *  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnsCount()  *  1;	  int    cols    =    wm.getColumnsCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
126	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  /  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnsCount()  /  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnsCount()  /  1;	  int    cols    =    wm.getColumnsCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
127	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[index].getScale());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[index].getScale());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[index].getScale());	  double    factor    =    -Math.sqrt(wm,    parameters.getScale());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
128	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i],  wm.getScale());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i],  wm.getScale());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i],  wm.getScale());	  double    factor    =    -Math.sqrt(wm,    parameters.getScale());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
129	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  measurements.getColumns();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm,  measurements.getColumns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  measurements.getColumns();	  WeightedMeasurement[]    cols    =    wm,    costEvaluations.getColumns();    	non-compiled	[CE]  ';'  expected	82	None	replace
130	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.getColumns(i,  parameters);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm.getColumns(i,  parameters);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.getColumns(i,  parameters);	  WeightedMeasurement[]    cols    =    wm.getColumns(i);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
131	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.getColumns(index);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm.getColumns(index);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.getColumns(index);	  WeightedMeasurement[]    cols    =    wm.getColumns(i);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
132	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  new  SizedMeasurement[wm.cols()  ];  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  new  SizedMeasurement[wm.cols()  ];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  new  SizedMeasurement[wm.cols()  ];	  SizedMeasurement[]    cols    =    wm.cols();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
133	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  jacobian.cols();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  jacobian.cols();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  jacobian.cols();	  SizedMeasurement[]    cols    =    wm.cols();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
134	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  new  SizedMeasurement[wm.getCols()  ];  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  new  SizedMeasurement[wm.getCols()  ];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  new  SizedMeasurement[wm.getCols()  ];	  SizedMeasurement[]    cols    =    wm.cols();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
135	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWidth());  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWidth());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWidth());	  double    factor    =    -Math.exp(wm.getWeight()    +    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
136	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getSize()  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getSize()  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm,  parameters.getSize()  +  1;	  SizedMeasurement    cols[]    =    wm,    parameters.getSize();    	non-compiled	[CE]  ';'  expected	21	None	replace
137	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  parameters.getSize();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  parameters.getSize();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  parameters.getSize();	  SizedMeasurement    cols[]    =    wm,    parameters.getSize();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
138	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getWeight();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getWeight();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm,  parameters.getWeight();	  SizedMeasurement    cols[]    =    wm,    parameters.getSize();    	non-compiled	[CE]  ';'  expected	21	None	replace
139	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  parameters,  wm.getSize();  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  parameters,  wm.getSize();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  parameters,  wm.getSize();	  SizedMeasurement    cols[]    =    wm,    parameters.getSize();    	non-compiled	[CE]  ';'  expected	21	None	replace
140	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  /  2;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnCount()  /  2;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnCount()  /  2;	  int    cols    =    wm.getColumnCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
141	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  2  +  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnCount()  *  2  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnCount()  *  2  +  1;	  int    cols    =    wm.getColumnCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
142	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getScale(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getScale(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getScale(),  costEvaluations);	  double    factor    =    -Math.sqrt(wm.getScale(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
143	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getScale(),  parameters,  costEvaluations);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getScale(),  parameters,  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getScale(),  parameters,  costEvaluations);	  double    factor    =    -Math.sqrt(wm.getScale(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
144	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[wm.getSize());  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[wm.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[wm.getSize());	  double    factor    =    -Math.sqrt(wm,    wm.getSize());    	non-compiled	[CE]  ']'  expected	48	None	replace
145	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getSize());  [CE]  cannot  find  symbol  dataArea  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getSize());	  double    factor    =    -Math.sqrt(wm,    wm.getSize());    	non-compiled	[CE]  cannot  find  symbol  dataArea	48	None	replace
146	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  parameters,  costEvaluations);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  parameters,  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getSize(),  parameters,  costEvaluations);	  double    factor    =    -Math.sqrt(wm.getSize(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
147	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  cols);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  cols);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getSize(),  cols);	  double    factor    =    -Math.sqrt(wm.getSize(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
148	[BUG]  [BUGGY]  int  cols  =  wm.getCols()  *  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getCols()  *  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getCols()  *  1;	  int    cols    =    wm.getCols()    +    1;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
149	[BUG]  [BUGGY]  int  cols  =  wm.getCols()  /  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getCols()  /  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getCols()  /  1;	  int    cols    =    wm.getCols()    +    1;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
150	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  double  factor  =  -Math.exp(wm.getWeight()  +  1);  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  double  factor  =  -Math.exp(wm.getWeight()  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight()    +    1);    double  factor  =  -Math.exp(wm.getWeight()  +  1);	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	64	None	add
151	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  Double  factor  =  -Math.exp(wm.getWeight()  +  1);  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  Double  factor  =  -Math.exp(wm.getWeight()  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight()    +    1);    Double  factor  =  -Math.exp(wm.getWeight()  +  1);	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	64	None	add
152	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  double  coefficient  =  -Math.exp(wm.getWeight()  +  1);  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  double  coefficient  =  -Math.exp(wm.getWeight()  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight()    +    1);    double  coefficient  =  -Math.exp(wm.getWeight()  +  1);	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	64	None	add
153	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  int  cols  =  wm.getWeight()  +  1;  [CE]  possible  loss  of  precision  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  int  cols  =  wm.getWeight()  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight()    +    1);    int  cols  =  wm.getWeight()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	64	None	add
154	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  Math.exp(wm.getWeight()  +  1);  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  Math.exp(wm.getWeight()  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight()    +    1);    Math.exp(wm.getWeight()  +  1);	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	64	None	add
155	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  *  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColsCount()  *  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColsCount()  *  1;	  int    cols    =    wm.getColsCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
156	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  /  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColsCount()  /  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColsCount()  /  1;	  int    cols    =    wm.getColsCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
157	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  parameters.getColumns();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  parameters.getColumns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  parameters.getColumns();	  WeightedMeasurement[]    cols    =    wm,    parameters.getColumns();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
158	[BUG]  [BUGGY]  int  cols  =  costEvaluations.getColumnIndex(wm);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  costEvaluations.getColumnIndex(wm);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  costEvaluations.getColumnIndex(wm);	  int    cols    =    wm.getColumnIndex(costEvaluations);    	non-compiled	[CE]  int  cannot  be  dereferenced	91	None	replace
159	[BUG]  [BUGGY]  int  cols  =  wm.getColumnIndex(costEvaluations,  parameters);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnIndex(costEvaluations,  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnIndex(costEvaluations,  parameters);	  int    cols    =    wm.getColumnIndex(costEvaluations);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
160	[BUG]  [BUGGY]  int  cols  =  CostEvaluations.getColumnIndex(wm);  [CE]  cannot  find  symbol  CostEvaluations  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  CostEvaluations.getColumnIndex(wm);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  CostEvaluations.getColumnIndex(wm);	  int    cols    =    wm.getColumnIndex(costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  CostEvaluations	91	None	replace
161	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm,  parameters.getFull());  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm,  parameters.getFull());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm,  parameters.getFull());	  double    factor    =    -Math.exp(wm.getFull());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
162	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getFull(),  parameters);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getFull(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getFull(),  parameters);	  double    factor    =    -Math.exp(wm.getFull());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
163	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getFull(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getFull(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getFull(),  costEvaluations);	  double    factor    =    -Math.exp(wm.getFull());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
164	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize()  +  2;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize()  +  2;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.getSize()  +  2;	  SizedMeasurement    cols[]    =    wm.getSize()    +    1;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
165	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize()  *  2  +  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize()  *  2  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.getSize()  *  2  +  1;	  SizedMeasurement    cols[]    =    wm.getSize()    +    1;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
166	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeightEvaluation(),  parameters);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeightEvaluation(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeightEvaluation(),  parameters);	  double    factor    =    -Math.sqrt(wm.getWeightEvaluation());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
167	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getWeightEvaluation());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getWeightEvaluation());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getWeightEvaluation());	  double    factor    =    -Math.sqrt(wm.getWeightEvaluation());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
168	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getWeightEvaluation());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getWeightEvaluation());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getWeightEvaluation());	  double    factor    =    -Math.sqrt(wm.getWeightEvaluation());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
169	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[index].getFieldType());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[index].getFieldType());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[index].getFieldType());	  double    factor    =    -Math.sqrt(wm,    parameters.getFieldType());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
170	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  metrics.getFieldType());  [CE]  cannot  find  symbol  metrics  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  metrics.getFieldType());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  metrics.getFieldType());	  double    factor    =    -Math.sqrt(wm,    parameters.getFieldType());    	non-compiled	[CE]  cannot  find  symbol  metrics	27	None	replace
171	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight())+    1;    double  factor  =  -Math.sqrt(wm.getWeight())+  1;	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	96	None	add
172	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  Double  factor  =  -Math.sqrt(wm.getWeight())+  1;  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  Double  factor  =  -Math.sqrt(wm.getWeight())+  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight())+    1;    Double  factor  =  -Math.sqrt(wm.getWeight())+  1;	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	96	None	add
173	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  double  coefficient  =  -Math.sqrt(wm.getWeight())+  1;  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  double  coefficient  =  -Math.sqrt(wm.getWeight())+  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight())+    1;    double  coefficient  =  -Math.sqrt(wm.getWeight())+  1;	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	96	None	add
174	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  Math.sqrt(wm.getWeight())+  1;  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  Math.sqrt(wm.getWeight())+  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight())+    1;    Math.sqrt(wm.getWeight())+  1;	  	non-compiled	[CE]  not  a  statement	96	None	add
175	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  int  cols  =  wm.getColumnsCount();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  int  cols  =  wm.getColumnsCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight())+    1;    int  cols  =  wm.getColumnsCount();	  	non-compiled	[CE]  cannot  find  symbol	96	None	add
176	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[wm.getScale());  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[wm.getScale());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[wm.getScale());	  double    factor    =    -Math.sqrt(wm,    wm.getScale());    	non-compiled	[CE]  ']'  expected	25	None	replace
177	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getScale());  [CE]  cannot  find  symbol  dataArea  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getScale());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getScale());	  double    factor    =    -Math.sqrt(wm,    wm.getScale());    	non-compiled	[CE]  cannot  find  symbol  dataArea	25	None	replace
178	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  metrics.getScale());  [CE]  cannot  find  symbol  metrics  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  metrics.getScale());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  metrics.getScale());	  double    factor    =    -Math.sqrt(wm,    wm.getScale());    	non-compiled	[CE]  cannot  find  symbol  metrics	25	None	replace
179	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  /  2;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnsCount()  /  2;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnsCount()  /  2;	  int    cols    =    wm.getColumnsCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
180	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  *  2  +  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnsCount()  *  2  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnsCount()  *  2  +  1;	  int    cols    =    wm.getColumnsCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
181	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  /  2;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColsCount()  /  2;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColsCount()  /  2;	  int    cols    =    wm.getColsCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
182	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  *  2  +  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColsCount()  *  2  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColsCount()  *  2  +  1;	  int    cols    =    wm.getColsCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
183	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  new  WeightedMeasurement[wm.columns()  ];  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  new  WeightedMeasurement[wm.columns()  ];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  new  WeightedMeasurement[wm.columns()  ];	  WeightedMeasurement[]    cols    =    wm.columns();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
184	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  new  WeightedMeasurement[wm.getColumns()  ];  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  new  WeightedMeasurement[wm.getColumns()  ];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  new  WeightedMeasurement[wm.getColumns()  ];	  WeightedMeasurement[]    cols    =    wm.columns();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
185	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  parameters.columns();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm,  parameters.columns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  parameters.columns();	  WeightedMeasurement[]    cols    =    wm.columns();    	non-compiled	[CE]  ';'  expected	42	None	replace
186	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  Double  factor  =  -Math.sqrt(wm.getWeight());  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  Double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double    factor    =    -Math.sqrt(wm.getWeight());    Double  factor  =  -Math.sqrt(wm.getWeight());	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	53	None	add
187	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  double  factor  =  -Math.sqrt(wm.getWeight());  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double    factor    =    -Math.sqrt(wm.getWeight());    double  factor  =  -Math.sqrt(wm.getWeight());	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	53	None	add
188	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  double  coefficient  =  -Math.sqrt(wm.getWeight());  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  double  coefficient  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double    factor    =    -Math.sqrt(wm.getWeight());    double  coefficient  =  -Math.sqrt(wm.getWeight());	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	53	None	add
189	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  double[]  cols  =  wm.getWeight();  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  double[]  cols  =  wm.getWeight();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double    factor    =    -Math.sqrt(wm.getWeight());    double[]  cols  =  wm.getWeight();	  	non-compiled	[CE]  incompatible  types	53	None	add
190	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  cols);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  cols);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFullDuration(),  cols);	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
191	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  index);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  index);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFullDuration(),  index);	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
192	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  jacobianEvaluations);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  jacobianEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFullDuration(),  jacobianEvaluations);	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
193	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  parameters.getFullDuration());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  parameters.getFullDuration());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFullDuration(),  parameters.getFullDuration());	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    wm.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
194	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getFullDuration(),  wm.getFullDuration());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getFullDuration(),  wm.getFullDuration());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getFullDuration(),  wm.getFullDuration());	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    wm.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
195	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  i,  wm.getFullDuration());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  i,  wm.getFullDuration());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFullDuration(),  i,  wm.getFullDuration());	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    wm.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
196	[BUG]  [BUGGY]  Math.sqrt(wm.getWeight());  [CE]  cannot  find  symbol  factor  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Math.sqrt(wm.getWeight()    +    1);    	non-compiled	[CE]  cannot  find  symbol  factor	40	None	replace
197	[BUG]  [BUGGY]  Math.sqrt(wm.getWeight()  +  1);  [CE]  cannot  find  symbol  factor  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Math.sqrt(wm.getWeight()  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Math.sqrt(wm.getWeight()  +  1);	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Math.sqrt(wm.getWeight()    +    1);    	non-compiled	[CE]  cannot  find  symbol  factor	40	None	replace
198	[BUG]  [BUGGY]  Math.sqrt(wm.getWeight(),  i  +  1);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Math.sqrt(wm.getWeight(),  i  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Math.sqrt(wm.getWeight(),  i  +  1);	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Math.sqrt(wm.getWeight()    +    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	40	None	replace
199	[BUG]  [BUGGY]  Math.sqrt(wm.getWeight()  -  1);  [CE]  cannot  find  symbol  factor  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Math.sqrt(wm.getWeight()  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Math.sqrt(wm.getWeight()  -  1);	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Math.sqrt(wm.getWeight()    +    1);    	non-compiled	[CE]  cannot  find  symbol  factor	40	None	replace
200	[BUG]  [BUGGY]  int  cols  =  parameters.getColumnSize()  *  wm.length;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  parameters.getColumnSize()  *  wm.length;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  parameters.getColumnSize()  *  wm.length;	  int    cols    =    wm.getColumnSize()    *    parameters.length;    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
201	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  *  parameters[i];  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnSize()  *  parameters[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnSize()  *  parameters[i];	  int    cols    =    wm.getColumnSize()    *    parameters.length;    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
202	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  *  parameters[i].length;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnSize()  *  parameters[i].length;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnSize()  *  parameters[i].length;	  int    cols    =    wm.getColumnSize()    *    parameters.length;    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
203	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm,  parameters.getColumn());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm,  parameters.getColumn());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm,  parameters.getColumn());	  double    factor    =    -Math.exp(wm.getColumn());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
204	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getColumn(),  parameters);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getColumn(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getColumn(),  parameters);	  double    factor    =    -Math.exp(wm.getColumn());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
205	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getRow());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getRow());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getRow());	  double    factor    =    -Math.exp(wm.getColumn());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
206	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  measurements[i].getScale());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  measurements[i].getScale());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  measurements[i].getScale());	  double    factor    =    -Math.sqrt(wm,    parameters[i].getScale());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
207	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i]?  wm.getScale()  :  0);  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i]?  wm.getScale()  :  0);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i]?  wm.getScale()  :  0);	  double    factor    =    -Math.sqrt(wm,    parameters[i].getScale());    	non-compiled	[CE]  incompatible  types	87	None	replace
208	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.toSize()  +  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.toSize()  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.toSize()  +  1;	  SizedMeasurement    cols[]    =    wm.toSize();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
209	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm.toSize();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  wm.toSize();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm.toSize();	  SizedMeasurement    cols[]    =    wm.toSize();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
210	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  Double  cols  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.sqrt(wm.getWeight());  Double  cols  =  -Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Double    cols    =    -Math.sqrt(wm.getWeight()    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	1	replace
211	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  Double  cols  =  -Math.sqrt(wm.getWeight());  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  Double  cols  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeight());  Double  cols  =  -Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Double    cols    =    -Math.sqrt(wm.getWeight()    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	1	replace
212	[BUG]  [BUGGY]  Double  cols  =  -Math.sqrt(wm.getWeight());  [CE]  cannot  find  symbol  factor  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  cols  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  cols  =  -Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Double    cols    =    -Math.sqrt(wm.getWeight()    +    1);    	non-compiled	[CE]  cannot  find  symbol  factor	85	None	replace
213	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getSize());  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.sqrt(wm.getSize());	  Double    factor    =    -Math.sqrt(wm.getWeight());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
214	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	Double  factor  =  -Math.sqrt(wm.getWeight()  +  1);	  Double    factor    =    -Math.sqrt(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	replace
215	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.sqrt(wm.getWeight()  +  1);	  Double    factor    =    -Math.sqrt(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	replace
216	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getRowCount());  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getRowCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.sqrt(wm.getRowCount());	  Double    factor    =    -Math.sqrt(wm.getWeight());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
217	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getColumn());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getColumn());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.sqrt(wm.getColumn());	  Double    factor    =    -Math.sqrt(wm.getWeight());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
218	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  cols  =  wm.getWeight();  [CE]  possible  loss  of  precision  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  cols  =  wm.getWeight();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight());  cols  =  wm.getWeight();	  double    factor    =    -Math.exp(wm.getWeight());    int    cols    =    wm.getWeight();    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
219	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[wm.getFieldType());  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[wm.getFieldType());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[wm.getFieldType());	  double    factor    =    -Math.sqrt(wm,    wm.getFieldType());    	non-compiled	[CE]  ']'  expected	28	None	replace
220	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFieldType(),  parameters,  costEvaluations);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getFieldType(),  parameters,  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFieldType(),  parameters,  costEvaluations);	  double    factor    =    -Math.sqrt(wm.getFieldType(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
221	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFieldType(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getFieldType(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFieldType(),  costEvaluations);	  double    factor    =    -Math.sqrt(wm.getFieldType(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
222	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  new  SizedMeasurement(wm.cols());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  new  SizedMeasurement(wm.cols());  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  new  SizedMeasurement(wm.cols());	  SizedMeasurement    cols[]    =    wm.cols();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
223	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.cols();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.cols();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm,  parameters.cols();	  SizedMeasurement    cols[]    =    wm.cols();    	non-compiled	[CE]  ';'  expected	50	None	replace
224	[BUG]  [BUGGY]  Size  factor  =  -Math.sqrt(wm.getWeight());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Size  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Size  factor  =  -Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
225	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getColumn());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getColumn());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getColumn());	  double    factor    =    -Math.sqrt(wm,    parameters.getColumn());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
226	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[index].getColumn());  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[index].getColumn());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[index].getColumn());	  double    factor    =    -Math.sqrt(wm,    parameters.getColumn());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
227	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getRowValue());  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getRowValue());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getRowValue());	  double    factor    =    -Math.sqrt(wm,    parameters.getColumn());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
228	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  measurements[i].getRowCount());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  measurements[i].getRowCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  measurements[i].getRowCount());	  double    factor    =    -Math.sqrt(wm,    parameters[i].getRowCount());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
229	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i],  wm.getRowCount());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i],  wm.getRowCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i],  wm.getRowCount());	  double    factor    =    -Math.sqrt(wm,    parameters[i].getRowCount());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
230	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getColumnCount());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getColumnCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getColumnCount());	  double    factor    =    -Math.sqrt(wm,    parameters[i].getRowCount());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
231	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  measurements[i].getColumnCount());  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  measurements[i].getColumnCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  measurements[i].getColumnCount());	  double    factor    =    -Math.sqrt(wm,    parameters[i].getRowCount());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
232	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.cloneTree();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.cloneTree();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm,  parameters.cloneTree();	  SizedMeasurement    cols[]    =    wm.cloneTree();    	non-compiled	[CE]  ';'  expected	69	None	replace
233	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getRowCount(),  parameters);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getRowCount(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getRowCount(),  parameters);	  double    factor    =    -Math.sqrt(wm.getRowCount(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
234	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  metrics);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  metrics);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getRowCount(),  metrics);	  double    factor    =    -Math.sqrt(wm.getRowCount(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
235	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  costEvaluations);  [CE]  method  exp  in  class  Math  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight(),  costEvaluations);	  double    factor    =    -Math.exp(wm.getWeight());    double    coefficient    =    -Math.exp(wm.getWeight());    	non-compiled	[CE]  method  exp  in  class  Math  cannot  be  applied  to  given  types;	12	None	replace
236	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  wm.getFullDuration());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  wm.getFullDuration());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters,  wm.getFullDuration());	  double    factor    =    -Math.sqrt(wm,    parameters.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
237	[BUG]  [BUGGY]  int  cols  =  wm.getSize()  +  index;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getSize()  +  index;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getSize()  +  index;	  int    cols    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
238	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getScale(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getScale(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getScale(),  costEvaluations);	  double    factor    =    -Math.sqrt(wm,    parameters[i].getScale());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
239	[BUG]  [BUGGY]  int  cols  =  wm.getColumnIndex(index);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnIndex(index);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnIndex(index);	  int    cols    =    wm.getColumnIndex(costEvaluations);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
240	[BUG]  [BUGGY]  int  cols  =  parameters[wm.getColumnSize()  *  wm.length;  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  parameters[wm.getColumnSize()  *  wm.length;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  parameters[wm.getColumnSize()  *  wm.length;	  int    cols    =    wm.getColumnSize()    *    parameters.length;    	non-compiled	[CE]  ']'  expected	99	None	replace
241	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  *  parameters[index].length;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnSize()  *  parameters[index].length;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnSize()  *  parameters[index].length;	  int    cols    =    wm.getColumnSize()    *    parameters.length;    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
242	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  double  cols  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.sqrt(wm.getWeight());  double  cols  =  -Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    double    cols    =    -Math.sqrt(wm.getWeight()    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
243	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  double  cols  =  -Math.sqrt(wm.getWeight());  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  double  cols  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeight());  double  cols  =  -Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    double    cols    =    -Math.sqrt(wm.getWeight()    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
244	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  cols);  [CE]  method  exp  in  class  Math  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  cols);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight(),  cols);	  double    factor    =    -Math.exp(wm.getWeight());    int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  method  exp  in  class  Math  cannot  be  applied  to  given  types;	80	None	replace
245	[BUG]  [BUGGY]  int  cols  =  wm.getRowSize()  +  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getRowSize()  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getRowSize()  +  1;	  int    cols    =    wm.getRowSize();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
246	[BUG]  [BUGGY]  SizedMeasurement  wm[]  =  wm.toSize();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  wm[]  =  wm.toSize();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  wm[]  =  wm.toSize();	  SizedMeasurement    wm[]    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
247	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.getTree();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.getTree();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.getTree();	  SizedMeasurement    cols[]    =    wm.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
248	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getColumn(),  parameters);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getColumn(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getColumn(),  parameters);	  double    factor    =    -Math.sqrt(wm.getColumn(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
249	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumn(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumn(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getColumn(),  costEvaluations);	  double    factor    =    -Math.sqrt(wm.getColumn(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
250	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm,  parameters.getCols()  +  1;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  wm,  parameters.getCols()  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm,  parameters.getCols()  +  1;	  SizedMeasurement[]    cols    =    wm,    parameters.getCols();    	non-compiled	[CE]  ';'  expected	44	None	replace
251	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getValue());  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getValue());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.sqrt(wm.getValue());	  Double    factor    =    -Math.sqrt(wm.getWeight());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
252	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getScale());  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getScale());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.sqrt(wm.getScale());	  Double    factor    =    -Math.sqrt(wm.getWeight());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
253	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getRowValue(i));  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getRowValue(i));  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.sqrt(wm.getRowValue(i));	  Double    factor    =    -Math.sqrt(wm.getWeight());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
254	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  +  2;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnsCount()  +  2;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnsCount()  +  2;	  int    cols    =    wm.getColumnsCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
255	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  2;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.sqrt(wm.getWeight())+  2;	  double    factor    =    -Math.sqrt(wm.getWeight())+    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	97	1	replace
256	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  2;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeight())+  2;	  double    factor    =    -Math.sqrt(wm.getWeight())+    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	97	1	replace
257	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getFieldType(),  cost);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getFieldType(),  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getFieldType(),  cost);	  double    factor    =    -Math.exp(wm.getFieldType());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
258	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getRowValue());  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getRowValue());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getRowValue());	  double    factor    =    -Math.sqrt(wm,    wm.getColumn());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
259	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  *  2  +  index;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColsCount()  *  2  +  index;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColsCount()  *  2  +  index;	  int    cols    =    wm.getColsCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
260	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  parameters.cols();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  parameters.cols();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  parameters.cols();	  SizedMeasurement[]    cols    =    wm.cols();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
261	[BUG]  [BUGGY]  Dimension  factor  =  -Math.sqrt(wm.getWeight());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Dimension  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Dimension  factor  =  -Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
262	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  parameters.getColumns();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  parameters.getColumns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  parameters.getColumns();	  SizedMeasurement    cols[]    =    wm,    parameters.getRows();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
263	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getSize(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getSize(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getSize(),  costEvaluations);	  double    factor    =    -Math.sqrt(wm,    parameters[i].getSize());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
264	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  parameters,  wm.getCols();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  parameters,  wm.getCols();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  parameters,  wm.getCols();	  WeightedMeasurement[]    cols    =    wm,    parameters.getCols();    	non-compiled	[CE]  ';'  expected	51	None	replace
265	[BUG]  [BUGGY]  SizedMeasurement  wm[]  =  wm.cols();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  wm[]  =  wm.cols();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  wm[]  =  wm.cols();	  SizedMeasurement    cols[]    =    wm.cols();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
266	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.cols()  +  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.cols()  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.cols()  +  1;	  SizedMeasurement    cols[]    =    wm.cols();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
267	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  i.getColumns();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm,  i.getColumns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  i.getColumns();	  WeightedMeasurement[]    cols    =    wm,    index.getColumns();    	non-compiled	[CE]  ';'  expected	90	None	replace
268	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getSize(),  parameters);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getSize(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getSize(),  parameters);	  double    factor    =    -Math.sqrt(wm.getSize(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
269	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  metrics);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  metrics);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getSize(),  metrics);	  double    factor    =    -Math.sqrt(wm.getSize(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
270	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  dataArea,  parameters);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  dataArea,  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getSize(),  dataArea,  parameters);	  double    factor    =    -Math.sqrt(wm.getSize(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
271	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  double  cols  =  -Math.exp(wm.getWeight()  +  1);  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  double  cols  =  -Math.exp(wm.getWeight()  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight()    +    1);    double  cols  =  -Math.exp(wm.getWeight()  +  1);	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	64	None	add
272	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  double  index  =  -Math.exp(wm.getWeight()  +  1);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  double  index  =  -Math.exp(wm.getWeight()  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight()    +    1);    double  index  =  -Math.exp(wm.getWeight()  +  1);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	64	None	add
273	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  int  cols  =  wm.getColumnCount();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  int  cols  =  wm.getColumnCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight()    +    1);    int  cols  =  wm.getColumnCount();	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
274	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  columns.toArray(new  WeightedMeasurement[cols.size()  ]);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  columns.toArray(new  WeightedMeasurement[cols.size()  ]);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  columns.toArray(new  WeightedMeasurement[cols.size()  ]);	  WeightedMeasurement[]    cols    =    wm.toArray(new    WeightedMeasurement[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
275	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  data[wm.toArray(new  WeightedMeasurement[cols.size()  ]);  [CE]  ']'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  data[wm.toArray(new  WeightedMeasurement[cols.size()  ]);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  data[wm.toArray(new  WeightedMeasurement[cols.size()  ]);	  WeightedMeasurement[]    cols    =    wm.toArray(new    WeightedMeasurement[cols.size()    ]);    	non-compiled	[CE]  ']'  expected	71	None	replace
276	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getFullDuration());  [CE]  cannot  find  symbol  dataArea  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getFullDuration());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getFullDuration());	  double    factor    =    -Math.sqrt(wm,    wm.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol  dataArea	58	None	replace
277	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getFullDuration(),  wm.getFullDuration());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getFullDuration(),  wm.getFullDuration());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.sqrt(wm.getFullDuration(),  wm.getFullDuration());	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    wm.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
278	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  costEvaluations,  wm.getColumns();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  costEvaluations,  wm.getColumns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  costEvaluations,  wm.getColumns();	  WeightedMeasurement[]    cols    =    wm,    costEvaluations.getColumns();    	non-compiled	[CE]  ';'  expected	82	None	replace
279	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getColumn(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getColumn(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getColumn(),  costEvaluations);	  double    factor    =    -Math.exp(wm.getColumn());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
280	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getFieldType());  [CE]  cannot  find  symbol  dataArea  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getFieldType());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  dataArea,  wm.getFieldType());	  double    factor    =    -Math.sqrt(wm,    wm.getFieldType());    	non-compiled	[CE]  cannot  find  symbol  dataArea	28	None	replace
281	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.sqrt(wm.getWeight());  Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Math.sqrt(wm.getWeight()    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	1	replace
282	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  Math.sqrt(wm.getWeight());  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeight());  Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Math.sqrt(wm.getWeight()    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	1	replace
283	[BUG]  [BUGGY]  Matrix.sqrt(wm.getWeight());  [CE]  cannot  find  symbol  Matrix  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Matrix.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Matrix.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Math.sqrt(wm.getWeight()    +    1);    	non-compiled	[CE]  cannot  find  symbol  Matrix	40	None	replace
284	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getSize(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getSize(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getSize(),  costEvaluations);	  double    factor    =    -Math.exp(wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
285	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getSize(),  costs);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getSize(),  costs);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getSize(),  costs);	  double    factor    =    -Math.exp(wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
286	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm.getSizeEvaluations();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  wm.getSizeEvaluations();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm.getSizeEvaluations();	  SizedMeasurement[]    cols    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
287	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  jacobian.cols();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  jacobian.cols();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  jacobian.cols();	  WeightedMeasurement[]    cols    =    wm.cols();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
288	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  parameters.cols();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  parameters.cols();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  parameters.cols();	  WeightedMeasurement[]    cols    =    wm.cols();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
289	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  int  cols  =  wm.getWeightEvaluations();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  int  cols  =  wm.getWeightEvaluations();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight());  int  cols  =  wm.getWeightEvaluations();	  double    factor    =    -Math.exp(wm.getWeight());    int    cols    =    wm.getWeight();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
290	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  int  cols  =  wm.getCols();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  int  cols  =  wm.getCols();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight());  int  cols  =  wm.getCols();	  double    factor    =    -Math.exp(wm.getWeight());    int    cols    =    wm.getWeight();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
291	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  wm.getColumn());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  wm.getColumn());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters,  wm.getColumn());	  double    factor    =    -Math.sqrt(wm,    parameters.getColumn());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
292	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  wm.getScale());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  wm.getScale());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters,  wm.getScale());	  double    factor    =    -Math.sqrt(wm,    parameters.getScale());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
293	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  *  2  +  index;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnsCount()  *  2  +  index;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnsCount()  *  2  +  index;	  int    cols    =    wm.getColumnsCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
294	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  2  +  index;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnCount()  *  2  +  index;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnCount()  *  2  +  index;	  int    cols    =    wm.getColumnCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
295	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getScale(),  parameters);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getScale(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getScale(),  parameters);	  double    factor    =    -Math.sqrt(wm.getScale(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
296	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getSize(),  wm.getSize());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getSize(),  wm.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getSize(),  wm.getSize());	  double    factor    =    -Math.sqrt(wm.getSize(),    wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
297	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getSize(),  wm.getSize());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getSize(),  wm.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.sqrt(wm.getSize(),  wm.getSize());	  double    factor    =    -Math.sqrt(wm.getSize(),    wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
298	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getRowCount(),  parameters.length);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getRowCount(),  parameters.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getRowCount(),  parameters.length);	  double    factor    =    -Math.sqrt(wm.getRowCount(),    parameters.length);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
299	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize()  *  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize()  *  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.getSize()  *  1;	  SizedMeasurement    cols[]    =    wm.getSize()    +    1;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
300	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  parameters.columns();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  parameters.columns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  parameters.columns();	  WeightedMeasurement[]    cols    =    wm.columns();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
301	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  +  2;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColsCount()  +  2;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColsCount()  +  2;	  int    cols    =    wm.getColsCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
302	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[columns.size()  ]);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[columns.size()  ]);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[columns.size()  ]);	  SizedMeasurement    cols[]    =    wm.getColumns();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
303	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[wm.getColumns()  ]);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[wm.getColumns()  ]);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[wm.getColumns()  ]);	  SizedMeasurement    cols[]    =    wm.getColumns();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
304	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[size()  ]);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[size()  ]);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.toArray(new  SizedMeasurement[size()  ]);	  SizedMeasurement    cols[]    =    wm.clone();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
305	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.getColls();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm.getColls();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.getColls();	  WeightedMeasurement[]    cols    =    wm.getRows();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
306	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.colsToSize();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.colsToSize();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.colsToSize();	  SizedMeasurement    cols[]    =    wm.toSize();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
307	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  *  2;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnSize()  *  2;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnSize()  *  2;	  int    cols    =    wm.getColumnSize()    +    2;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
308	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  double  cols  =  -Math.sqrt(wm.getWeight())+  1;  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  double  cols  =  -Math.sqrt(wm.getWeight())+  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight())+    1;    double  cols  =  -Math.sqrt(wm.getWeight())+  1;	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	96	None	add
309	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  Double  cols  =  -Math.sqrt(wm.getWeight())+  1;  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  Double  cols  =  -Math.sqrt(wm.getWeight())+  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight())+    1;    Double  cols  =  -Math.sqrt(wm.getWeight())+  1;	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	96	None	add
310	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  int  cols  =  wm.getColumnCount();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  int  cols  =  wm.getColumnCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight())+    1;    int  cols  =  wm.getColumnCount();	  	non-compiled	[CE]  cannot  find  symbol	96	None	add
311	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  wm.getSize());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  wm.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters,  wm.getSize());	  double    factor    =    -Math.sqrt(wm,    parameters.getSize());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
312	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getFullDuration(),  parameters);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getFullDuration(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getFullDuration(),  parameters);	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
313	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  jacobian);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  jacobian);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFullDuration(),  jacobian);	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
314	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth(),  parameters);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWidth(),  parameters);	  double    factor    =    -Math.sqrt(wm.getWidth());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
315	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  dataArea,  costEvaluations);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  dataArea,  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFullDuration(),  dataArea,  costEvaluations);	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
316	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  parametersEvaluations);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  parametersEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFullDuration(),  parametersEvaluations);	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
317	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm.getColls();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  wm.getColls();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm.getColls();	  SizedMeasurement[]    cols    =    wm.getRows();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
318	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize(index,  i);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize(index,  i);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.getSize(index,  i);	  SizedMeasurement    cols[]    =    wm.getSize(i);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
319	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  wm.getFieldType());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  wm.getFieldType());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters,  wm.getFieldType());	  double    factor    =    -Math.sqrt(wm,    parameters.getFieldType());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
320	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getFieldType(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getFieldType(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getFieldType(),  costEvaluations);	  double    factor    =    -Math.sqrt(wm,    parameters[i].getFieldType());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
321	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  Double  cols  =  -Math.sqrt(wm.getWeight());  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  Double  cols  =  -Math.sqrt(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double    factor    =    -Math.sqrt(wm.getWeight());    Double  cols  =  -Math.sqrt(wm.getWeight());	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	53	None	add
322	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  int  cols  =  wm.getColumnCount();  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  int  cols  =  wm.getColumnCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double    factor    =    -Math.sqrt(wm.getWeight());    int  cols  =  wm.getColumnCount();	  	non-compiled	[CE]  cannot  find  symbol	53	None	add
323	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  Number  cols  =  wm.getColumns();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  Number  cols  =  wm.getColumns();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double    factor    =    -Math.sqrt(wm.getWeight());    Number  cols  =  wm.getColumns();	  	non-compiled	[CE]  cannot  find  symbol	53	None	add
324	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  dataArea.getColumns();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm,  dataArea.getColumns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  dataArea.getColumns();	  WeightedMeasurement[]    cols    =    wm,    index.getColumns();    	non-compiled	[CE]  ';'  expected	90	None	replace
325	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  data.getColumns();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm,  data.getColumns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  data.getColumns();	  WeightedMeasurement[]    cols    =    wm,    index.getColumns();    	non-compiled	[CE]  ';'  expected	90	None	replace
326	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getRowCount(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getRowCount(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getRowCount(),  costEvaluations);	  double    factor    =    -Math.sqrt(wm,    parameters.getRowCount());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
327	[BUG]  [BUGGY]  int  cols  =  parameters.getColumnSize()  *  wm.getColumnSize();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  parameters.getColumnSize()  *  wm.getColumnSize();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  parameters.getColumnSize()  *  wm.getColumnSize();	  int    cols    =    wm.getColumnSize()    *    parameters.length;    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
328	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  costEvaluations.getWeightEvaluation());  [CE]  int  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  costEvaluations.getWeightEvaluation());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  costEvaluations.getWeightEvaluation());	  double    factor    =    -Math.sqrt(wm.getWeightEvaluation());    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
329	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm,  wm.getFieldType());  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm,  wm.getFieldType());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm,  wm.getFieldType());	  double    factor    =    -Math.exp(wm.getFieldType());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
330	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.colons();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.colons();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.colons();	  SizedMeasurement    cols[]    =    wm.cols();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
331	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  new  SizedMeasurement[wm.cols()  ];  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  new  SizedMeasurement[wm.cols()  ];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  new  SizedMeasurement[wm.cols()  ];	  SizedMeasurement    cols[]    =    wm.cols();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
332	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm,  wm.getSize());  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm,  wm.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm,  wm.getSize());	  double    factor    =    -Math.exp(wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
333	[BUG]  [BUGGY]  SizedMeasurement  wm[]  =  wm.getWeight();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  wm[]  =  wm.getWeight();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  wm[]  =  wm.getWeight();	  SizedMeasurement    wm[]    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
334	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  costEvaluations.getRows();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm,  costEvaluations.getRows();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  costEvaluations.getRows();	  WeightedMeasurement[]    cols    =    wm.getRows();    	non-compiled	[CE]  ';'  expected	22	None	replace
335	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  *  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.exp(wm.getWeight()  *  costEvaluations);	  double    factor    =    -Math.exp(wm.getWeight());    double    coefficient    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
336	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  *  costEvaluations);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  *  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight()  *  costEvaluations);	  double    factor    =    -Math.exp(wm.getWeight());    double    coefficient    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
337	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.columns();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm.columns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.columns();	  SizedMeasurement    cols[]    =    wm.getColumns();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
338	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm.getRowSize();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  wm.getRowSize();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm.getRowSize();	  SizedMeasurement[]    cols    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
339	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.cos(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	Double  factor  =  -Math.cos(wm.getWeight());	  Double    factor    =    -Math.sqrt(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	replace
340	[BUG]  [BUGGY]  Double  factor  =  -Math.cos(wm.getWeight());  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  Double  factor  =  -Math.cos(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.cos(wm.getWeight());	  Double    factor    =    -Math.sqrt(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	replace
341	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getFullDuration(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getFullDuration(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getFullDuration(),  costEvaluations);	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
342	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getFullDuration(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getFullDuration(),  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getFullDuration(),  costEvaluations);	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
343	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  cost.getScale());  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  cost.getScale());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters,  cost.getScale());	  double    factor    =    -Math.sqrt(wm,    parameters.getScale());    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
344	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(parameters,  wm.getScale());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(parameters,  wm.getScale());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(parameters,  wm.getScale());	  double    factor    =    -Math.sqrt(wm,    parameters.getScale());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
345	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(parameters[i],  wm.getRowCount());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(parameters[i],  wm.getRowCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(parameters[i],  wm.getRowCount());	  double    factor    =    -Math.sqrt(wm,    parameters[i].getRowCount());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
346	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  costEvaluations.getPartials();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm,  costEvaluations.getPartials();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  costEvaluations.getPartials();	  WeightedMeasurement[]    cols    =    wm.getPartials();    	non-compiled	[CE]  ';'  expected	23	None	replace
347	[BUG]  [BUGGY]  double  factor  =  -Math.exp(Wm.getColumnCount());  [CE]  cannot  find  symbol  Wm  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(Wm.getColumnCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(Wm.getColumnCount());	  double    factor    =    -Math.exp(wm.getRowCount());    	non-compiled	[CE]  cannot  find  symbol  Wm	62	None	replace
348	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm.getCols(index,  i);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  wm.getCols(index,  i);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm.getCols(index,  i);	  SizedMeasurement[]    cols    =    wm.getCols(i);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
349	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(parameters[i],  wm.getScale());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(parameters[i],  wm.getScale());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(parameters[i],  wm.getScale());	  double    factor    =    -Math.sqrt(wm,    parameters[i].getScale());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
350	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  cost.getColumn());  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  cost.getColumn());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters,  cost.getColumn());	  double    factor    =    -Math.sqrt(wm,    parameters.getColumn());    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
351	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(parameters[i],  wm.getSize());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(parameters[i],  wm.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(parameters[i],  wm.getSize());	  double    factor    =    -Math.sqrt(wm,    parameters[i].getSize());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
352	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getWidth());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getWidth());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getWidth());	  double    factor    =    -Math.sqrt(wm.getWidth());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
353	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth(),  wm.getHeight());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth(),  wm.getHeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWidth(),  wm.getHeight());	  double    factor    =    -Math.sqrt(wm.getWidth());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
354	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[wm.size()  ]);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[wm.size()  ]);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[wm.size()  ]);	  WeightedMeasurement[]    cols    =    wm.toArray(new    WeightedMeasurement[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
355	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[rows.size()  ]);  [CE]  int  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[rows.size()  ]);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[rows.size()  ]);	  WeightedMeasurement[]    cols    =    wm.toArray(new    WeightedMeasurement[cols.size()    ]);    	non-compiled	[CE]  int  cannot  be  dereferenced	71	None	replace
356	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getWeight()  +  1);  int  cols  =  wm.getColumnCount();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getWeight()  +  1);  int  cols  =  wm.getColumnCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getWeight()  +  1);  int  cols  =  wm.getColumnCount();	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
357	[BUG]  [BUGGY]  double  cols  =  -Math.exp(wm.getWeight());  [CE]  cannot  find  symbol  factor  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  cols  =  -Math.exp(wm.getWeight());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  cols  =  -Math.exp(wm.getWeight());	  double    factor    =    -Math.exp(wm.getWeight());    double    cols    =    -Math.exp(wm.getWeight());    	non-compiled	[CE]  cannot  find  symbol  factor	78	None	replace
358	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getFull(),  cost);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getFull(),  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getFull(),  cost);	  double    factor    =    -Math.exp(wm.getFull());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
359	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm,  wm.getFull());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm,  wm.getFull());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm,  wm.getFull());	  double    factor    =    -Math.exp(wm.getFull());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
360	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getSize(),  parameters);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getSize(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getSize(),  parameters);	  double    factor    =    -Math.sqrt(wm.getSize(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
361	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm,  index.getRows();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement[]  cols  =  wm,  index.getRows();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm,  index.getRows();	  SizedMeasurement[]    cols    =    wm.getRows();    	non-compiled	[CE]  ';'  expected	43	None	replace
362	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  dataArea);  int  cols  =  wm.getColumnCount();  [CE]  cannot  find  symbol  dataArea  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  dataArea);  int  cols  =  wm.getColumnCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight(),  dataArea);  int  cols  =  wm.getColumnCount();	  double    factor    =    -Math.exp(wm.getWeight());    int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol  dataArea	80	None	replace
363	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getFieldType(),  cost);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getFieldType(),  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getFieldType(),  cost);	  double    factor    =    -Math.sqrt(wm,    parameters[i].getFieldType());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
364	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getSize(),  wm.getSize());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getSize(),  wm.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getSize(),  wm.getSize());	  double    factor    =    -Math.sqrt(wm.getSize(),    wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
365	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  parameters.getColumnsCount());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight(),  parameters.getColumnsCount());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight(),  parameters.getColumnsCount());	  double    factor    =    -Math.exp(wm.getWeight());    int    cols    =    wm.getColumnsCount();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
366	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.toScale());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.toScale());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.toScale());	  double    factor    =    -Math.sqrt(wm,    wm.getScale());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
367	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  parameters,  costEvaluations);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  parameters,  costEvaluations);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFullDuration(),  parameters,  costEvaluations);	  double    factor    =    -Math.sqrt(wm.getFullDuration(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
368	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  jacobianEvaluations.getColumns();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  WeightedMeasurement[]  cols  =  wm,  jacobianEvaluations.getColumns();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  jacobianEvaluations.getColumns();	  WeightedMeasurement[]    cols    =    wm,    costEvaluations.getColumns();    	non-compiled	[CE]  ';'  expected	82	None	replace
369	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFieldType())+  1;  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getFieldType())+  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFieldType())+  1;	  double    factor    =    -Math.sqrt(wm.getWeight())+    1;    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
370	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  cost.getFieldType());  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  cost.getFieldType());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters,  cost.getFieldType());	  double    factor    =    -Math.sqrt(wm,    parameters.getFieldType());    	non-compiled	[CE]  double  cannot  be  dereferenced	27	None	replace
371	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(parameters,  wm.getFieldType());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(parameters,  wm.getFieldType());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(parameters,  wm.getFieldType());	  double    factor    =    -Math.sqrt(wm,    parameters.getFieldType());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
372	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  cost.getFullDuration());  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  cost.getFullDuration());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters,  cost.getFullDuration());	  double    factor    =    -Math.sqrt(wm,    parameters.getFullDuration());    	non-compiled	[CE]  double  cannot  be  dereferenced	57	None	replace
373	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(parameters,  wm.getFullDuration());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(parameters,  wm.getFullDuration());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(parameters,  wm.getFullDuration());	  double    factor    =    -Math.sqrt(wm,    parameters.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
374	[BUG]  [BUGGY]  int  cols  =  wm.getColumnIndex(costEvaluations,  index);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColumnIndex(costEvaluations,  index);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnIndex(costEvaluations,  index);	  int    cols    =    wm.getColumnIndex(costEvaluations);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
375	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  int  cols  =  wm.getWeight();  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  int  cols  =  wm.getWeight();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight())+    1;    int  cols  =  wm.getWeight();	  	non-compiled	[CE]  possible  loss  of  precision	96	None	add
376	[BUG]  [BUGGY]  double  index  =  -Math.exp(wm.getWeight()  +  1);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  index  =  -Math.exp(wm.getWeight()  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  index  =  -Math.exp(wm.getWeight()  +  1);	  double    factor    =    -Math.exp(wm.getWeight());    double    index    =    -Math.exp(wm.getWeight());    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	79	None	replace
377	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  -  2;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  int  cols  =  wm.getColsCount()  -  2;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColsCount()  -  2;	  int    cols    =    wm.getColsCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
378	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getFieldType(),  parameters);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getFieldType(),  parameters);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getFieldType(),  parameters);	  double    factor    =    -Math.sqrt(wm.getFieldType(),    parameters);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
379	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getRow());  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getRow());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getRow());	  double    factor    =    -Math.sqrt(wm,    wm.getColumn());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
380	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getRowSize();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getRowSize();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm,  parameters.getRowSize();	  SizedMeasurement    cols[]    =    wm,    parameters.getSize();    	non-compiled	[CE]  ';'  expected	21	None	replace
381	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getValue());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getValue());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getValue());	  double    factor    =    -Math.sqrt(wm.getValue());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
382	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  *  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.exp(wm.getWeight()  *  2);	  double    factor    =    -Math.exp(wm.getWeight());    Double    factor    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
383	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  *  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  *  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight()  *  2);	  double    factor    =    -Math.exp(wm.getWeight());    Double    factor    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
384	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getColumn(),  cost);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.exp(wm.getColumn(),  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getColumn(),  cost);	  double    factor    =    -Math.exp(wm.getColumn());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
385	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  cost.getSize());  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters,  cost.getSize());  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters,  cost.getSize());	  double    factor    =    -Math.sqrt(wm,    parameters.getSize());    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
386	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm,  index.getSize()  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];      [BUGGY]  SizedMeasurement  cols[]  =  wm,  index.getSize()  +  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm,  index.getSize()  +  1;	  SizedMeasurement    cols[]    =    wm.getSize()    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
