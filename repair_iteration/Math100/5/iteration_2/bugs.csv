bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getColumn());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getColumn());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getColumn());	  double    factor    =    -Math.sqrt(wm.getColumn());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
2	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getColumn());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getColumn());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getColumn());	  double    factor    =    -Math.sqrt(wm.getColumn());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
3	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumn(),  parameters);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumn(),  parameters);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getColumn(),  parameters);	  double    factor    =    -Math.sqrt(wm.getColumn());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
4	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getColumnCount()  +  1;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnCount()  +  1;	      int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
5	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getColumnCount()  -  1;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnCount()  -  1;	      int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
6	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  2;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getColumnCount()  *  2;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnCount()  *  2;	      int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
7	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  +  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getColumnsCount()  +  1;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnsCount()  +  1;	      int    cols    =    wm.getColumnsCount();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
8	[BUG]  [BUGGY]  int  cols  =  wm.getRowsCount();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getRowsCount();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getRowsCount();	      int    cols    =    wm.getColumnsCount();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
9	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  *  2;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getColumnsCount()  *  2;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnsCount()  *  2;	      int    cols    =    wm.getColumnsCount();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
10	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  double  factor  =  -Math.exp(wm.getWeight());  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  double  factor  =  -Math.exp(wm.getWeight());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight());    double  factor  =  -Math.exp(wm.getWeight());	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	19	None	add
11	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  Double  factor  =  -Math.exp(wm.getWeight());  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  Double  factor  =  -Math.exp(wm.getWeight());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight());    Double  factor  =  -Math.exp(wm.getWeight());	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	19	None	add
12	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  double  coefficient  =  -Math.exp(wm.getWeight());  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  double  coefficient  =  -Math.exp(wm.getWeight());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight());    double  coefficient  =  -Math.exp(wm.getWeight());	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	19	None	add
13	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  int  cols  =  wm.getWeight();  [CE]  possible  loss  of  precision  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  int  cols  =  wm.getWeight();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight());    int  cols  =  wm.getWeight();	  	non-compiled	[CE]  possible  loss  of  precision	19	None	add
14	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  int  cols  =  wm.getColumnsCount();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  int  cols  =  wm.getColumnsCount();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight());    int  cols  =  wm.getColumnsCount();	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
15	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumnCount());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getColumnCount());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getColumnCount());	  double    factor    =    -Math.sqrt(wm.getRowCount());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
16	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getRowCount());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getRowCount());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getRowCount());	  double    factor    =    -Math.sqrt(wm.getRowCount());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
17	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters);	  double    factor    =    -Math.sqrt(wm.getRowCount());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
18	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters.length);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters.length);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getRowCount(),  parameters.length);	  double    factor    =    -Math.sqrt(wm.getRowCount());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
19	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize()  +  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize()  +  1;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.getSize()  +  1;	      SizedMeasurement    cols[]    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
20	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm.getSize();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement[]  cols  =  wm.getSize();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm.getSize();	      SizedMeasurement    cols[]    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
21	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getSize();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getSize();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm,  parameters.getSize();	      SizedMeasurement    cols[]    =    wm.getSize();    	non-compiled	[CE]  ';'  expected	8	None	replace
22	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.getRows();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  WeightedMeasurement[]  cols  =  wm.getRows();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.getRows();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
23	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.getPartials();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  WeightedMeasurement[]  cols  =  wm.getPartials();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.getPartials();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
24	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getScale());  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getScale());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getScale());	  double    factor    =    -Math.sqrt(wm.getScale());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
25	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getScale());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getScale());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getScale());	  double    factor    =    -Math.sqrt(wm.getScale());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
26	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getScale(),  parameters);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getScale(),  parameters);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getScale(),  parameters);	  double    factor    =    -Math.sqrt(wm.getScale());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
27	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getFieldType());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getFieldType());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getFieldType());	  double    factor    =    -Math.sqrt(wm.getFieldType());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
28	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getFieldType());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getFieldType());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getFieldType());	  double    factor    =    -Math.sqrt(wm.getFieldType());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
29	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFieldType(),  parameters);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getFieldType(),  parameters);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFieldType(),  parameters);	  double    factor    =    -Math.sqrt(wm.getFieldType());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
30	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  +  1;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getColsCount()  +  1;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColsCount()  +  1;	      int    cols    =    wm.getColsCount();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
31	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  -  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getColsCount()  -  1;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColsCount()  -  1;	      int    cols    =    wm.getColsCount();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
32	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  *  2;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getColsCount()  *  2;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColsCount()  *  2;	      int    cols    =    wm.getColsCount();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
33	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  +  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getColumnSize()  +  1;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnSize()  +  1;	      int    cols    =    wm.getColumnSize();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
34	[BUG]  [BUGGY]  int  cols  =  wm.getRowSize();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getRowSize();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getRowSize();	      int    cols    =    wm.getColumnSize();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
35	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  +  2;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getColumnSize()  +  2;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnSize()  +  2;	      int    cols    =    wm.getColumnSize();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
36	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    double  factor  =  -Math.sqrt(wm.getWeight()  +  1);	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	3	None	add
37	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  Double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  Double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Double  factor  =  -Math.sqrt(wm.getWeight()  +  1);	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	3	None	add
38	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  double  coefficient  =  -Math.sqrt(wm.getWeight()  +  1);  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  double  coefficient  =  -Math.sqrt(wm.getWeight()  +  1);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    double  coefficient  =  -Math.sqrt(wm.getWeight()  +  1);	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	3	None	add
39	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  int  cols  =  wm.getWeight()  +  1;  [CE]  possible  loss  of  precision  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  int  cols  =  wm.getWeight()  +  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    int  cols  =  wm.getWeight()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
40	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  Math.sqrt(wm.getWeight()  +  1);  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  Math.sqrt(wm.getWeight()  +  1);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Math.sqrt(wm.getWeight()  +  1);	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	3	None	add
41	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  parameters.getColumns();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  WeightedMeasurement[]  cols  =  wm,  parameters.getColumns();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  parameters.getColumns();	      WeightedMeasurement[]    cols    =    wm.getColumns();    	non-compiled	[CE]  ';'  expected	15	None	replace
42	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.columns();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  WeightedMeasurement[]  cols  =  wm.columns();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.columns();	      WeightedMeasurement[]    cols    =    wm.getColumns();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
43	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm.getRows();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement[]  cols  =  wm.getRows();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm.getRows();	      SizedMeasurement[]    cols    =    wm.getCols();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
44	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm,  parameters.getCols();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement[]  cols  =  wm,  parameters.getCols();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm,  parameters.getCols();	      SizedMeasurement[]    cols    =    wm.getCols();    	non-compiled	[CE]  ';'  expected	10	None	replace
45	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm.cols();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement[]  cols  =  wm.cols();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm.cols();	      SizedMeasurement[]    cols    =    wm.getCols();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
46	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getSize());  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getSize());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getSize());	  double    factor    =    -Math.sqrt(wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
47	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  parameters);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  parameters);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getSize(),  parameters);	  double    factor    =    -Math.sqrt(wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
48	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getSize());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getSize());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getSize());	  double    factor    =    -Math.sqrt(wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
49	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getCols();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getCols();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm,  parameters.getCols();	      SizedMeasurement    cols[]    =    wm.getCols();    	non-compiled	[CE]  ';'  expected	7	None	replace
50	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.cols();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement  cols[]  =  wm.cols();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.cols();	      SizedMeasurement    cols[]    =    wm.getCols();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
51	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  parameters.getCols();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  WeightedMeasurement[]  cols  =  wm,  parameters.getCols();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  parameters.getCols();	      WeightedMeasurement[]    cols    =    wm.getCols();    	non-compiled	[CE]  ';'  expected	18	None	replace
52	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.cols();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  WeightedMeasurement[]  cols  =  wm.cols();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.cols();	      WeightedMeasurement[]    cols    =    wm.getCols();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
53	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	Double  factor  =  -Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
54	[BUG]  [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  Double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	Double  factor  =  -Math.sqrt(wm.getWeight());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
55	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth());  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWidth());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
56	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  wm.getFullDuration());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  wm.getFullDuration());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFullDuration(),  wm.getFullDuration());	  double    factor    =    -Math.sqrt(wm.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
57	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getFullDuration());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters.getFullDuration());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters.getFullDuration());	  double    factor    =    -Math.sqrt(wm.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
58	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getFullDuration());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getFullDuration());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getFullDuration());	  double    factor    =    -Math.sqrt(wm.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
59	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.getColumns();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement  cols[]  =  wm.getColumns();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.getColumns();	      SizedMeasurement    cols[]    =    wm.getRows();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
60	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getRows();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement  cols[]  =  wm,  parameters.getRows();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm,  parameters.getRows();	      SizedMeasurement    cols[]    =    wm.getRows();    	non-compiled	[CE]  ';'  expected	9	None	replace
61	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getSize());  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getSize());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getSize());	  double    factor    =    -Math.exp(wm.getWeight());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
62	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getRowCount());  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getRowCount());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getRowCount());	  double    factor    =    -Math.exp(wm.getWeight());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
63	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getColumn());  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getColumn());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getColumn());	  double    factor    =    -Math.exp(wm.getWeight());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
64	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.exp(wm.getWeight()  +  1);	  double    factor    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
65	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getWeight()  +  1);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getWeight()  +  1);	  double    factor    =    -Math.exp(wm.getWeight());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
66	[BUG]  [BUGGY]  int  cols  =  wm.getCols()  +  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getCols()  +  1;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getCols()  +  1;	      int    cols    =    wm.getCols();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
67	[BUG]  [BUGGY]  int  cols  =  wm.getRows();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getRows();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getRows();	      int    cols    =    wm.getCols();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
68	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeightEvaluation());  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeightEvaluation());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeightEvaluation());	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
69	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.cloneTree();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement  cols[]  =  wm.cloneTree();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.cloneTree();	      SizedMeasurement    cols[]    =    wm.getCols();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
70	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getRowCount());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  wm.getRowCount());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  wm.getRowCount());	  double    factor    =    -Math.sqrt(wm.getRowCount());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
71	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[cols.size()  ]);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[cols.size()  ]);  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.toArray(new  WeightedMeasurement[cols.size()  ]);	      WeightedMeasurement[]    cols    =    wm.getCols();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
72	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.toSize();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement  cols[]  =  wm.toSize();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.toSize();	      SizedMeasurement    cols[]    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
73	[BUG]  [BUGGY]  SizedMeasurement  wm[]  =  wm.getSize();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement  wm[]  =  wm.getSize();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  wm[]  =  wm.getSize();	      SizedMeasurement    cols[]    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
74	[BUG]  [BUGGY]  SizedMeasurement[]  cols  =  wm.getCols(i);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement[]  cols  =  wm.getCols(i);  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement[]  cols  =  wm.getCols(i);	      SizedMeasurement[]    cols    =    wm.getCols();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
75	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  costEvaluations);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  costEvaluations);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFullDuration(),  costEvaluations);	  double    factor    =    -Math.sqrt(wm.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
76	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  parameters);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getFullDuration(),  parameters);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFullDuration(),  parameters);	  double    factor    =    -Math.sqrt(wm.getFullDuration());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
77	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getFull());  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getFull());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getFull());	  double    factor    =    -Math.exp(wm.getWeight());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
78	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  double  cols  =  -Math.exp(wm.getWeight());  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  double  cols  =  -Math.exp(wm.getWeight());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight());    double  cols  =  -Math.exp(wm.getWeight());	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	19	None	add
79	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  double  index  =  -Math.exp(wm.getWeight());  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  double  index  =  -Math.exp(wm.getWeight());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight());    double  index  =  -Math.exp(wm.getWeight());	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	19	None	add
80	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  int  cols  =  wm.getColumnCount();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getWeight());  int  cols  =  wm.getColumnCount();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.exp(wm.getWeight());    int  cols  =  wm.getColumnCount();	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
81	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.getColls();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement  cols[]  =  wm.getColls();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.getColls();	      SizedMeasurement    cols[]    =    wm.getRows();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
82	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  costEvaluations.getColumns();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  WeightedMeasurement[]  cols  =  wm,  costEvaluations.getColumns();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  costEvaluations.getColumns();	      WeightedMeasurement[]    cols    =    wm.getColumns();    	non-compiled	[CE]  ';'  expected	15	None	replace
83	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm.getColumns(i);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  WeightedMeasurement[]  cols  =  wm.getColumns(i);  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm.getColumns(i);	      WeightedMeasurement[]    cols    =    wm.getColumns();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
84	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  double  cols  =  -Math.sqrt(wm.getWeight()  +  1);  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  double  cols  =  -Math.sqrt(wm.getWeight()  +  1);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    double  cols  =  -Math.sqrt(wm.getWeight()  +  1);	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	3	None	add
85	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  Double  cols  =  -Math.sqrt(wm.getWeight()  +  1);  [CE]  variable  factor  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  Double  cols  =  -Math.sqrt(wm.getWeight()  +  1);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    Double  cols  =  -Math.sqrt(wm.getWeight()  +  1);	  	non-compiled	[CE]  variable  factor  is  already  defined  in  method  updateJacobian()	3	None	add
86	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  int  cols  =  wm.getColumnCount();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight()  +  1);  int  cols  =  wm.getColumnCount();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    int  cols  =  wm.getColumnCount();	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
87	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getScale());  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getScale());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getScale());	  double    factor    =    -Math.sqrt(wm.getScale());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
88	[BUG]  [BUGGY]  double  factor  =  -Math.exp(wm.getFieldType());  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.exp(wm.getFieldType());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.exp(wm.getFieldType());	  double    factor    =    -Math.exp(wm.getWeight());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
89	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getFieldType());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getFieldType());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getFieldType());	  double    factor    =    -Math.sqrt(wm.getFieldType());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
90	[BUG]  [BUGGY]  WeightedMeasurement[]  cols  =  wm,  index.getColumns();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  WeightedMeasurement[]  cols  =  wm,  index.getColumns();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	WeightedMeasurement[]  cols  =  wm,  index.getColumns();	      WeightedMeasurement[]    cols    =    wm.getColumns();    	non-compiled	[CE]  ';'  expected	15	None	replace
91	[BUG]  [BUGGY]  int  cols  =  wm.getColumnIndex(costEvaluations);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getColumnIndex(costEvaluations);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnIndex(costEvaluations);	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
92	[BUG]  [BUGGY]  int  cols  =  wm.getSize();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getSize();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getSize();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
93	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getSize());  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getSize());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getSize());	  double    factor    =    -Math.sqrt(wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
94	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  wm.getSize());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getSize(),  wm.getSize());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getSize(),  wm.getSize());	  double    factor    =    -Math.sqrt(wm.getSize());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
95	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getRowCount());  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm,  parameters[i].getRowCount());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm,  parameters[i].getRowCount());	  double    factor    =    -Math.sqrt(wm.getRowCount());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
96	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.sqrt(wm.getWeight())+  1;	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
97	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight())+  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWeight())+  1;	  double    factor    =    -Math.sqrt(wm.getWeight()    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
98	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.clone();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement  cols[]  =  wm.clone();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.clone();	      SizedMeasurement    cols[]    =    wm.getCols();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
99	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  *  parameters.length;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  int  cols  =  wm.getColumnSize()  *  parameters.length;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	int  cols  =  wm.getColumnSize()  *  parameters.length;	      int    cols    =    wm.getColumnSize();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
100	[BUG]  [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize(i);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  SizedMeasurement  cols[]  =  wm.getSize(i);  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	SizedMeasurement  cols[]  =  wm.getSize(i);	      SizedMeasurement    cols[]    =    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
101	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getValue());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];    [BUGGY]  double  factor  =  -Math.sqrt(wm.getValue());  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getValue());	  double    factor    =    -Math.sqrt(wm.getColumn());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
