bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters()  [jTj.length];  [CE]  incompatible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters()  [jTj.length];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getAllParameters()  [jTj.length];	  EstimationProblem    sum    =    problem.getAllParameters()[i];    	non-compiled	[CE]  incompatible  types	106	None	replace
2	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters()  [jTj];  [CE]  incompatible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters()  [jTj];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getAllParameters()  [jTj];	  EstimationProblem    sum    =    problem.getAllParameters()[i];    	non-compiled	[CE]  incompatible  types	106	None	replace
3	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters()  [jTj].getAllParameters();  [CE]  incompatible  types  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters()  [jTj].getAllParameters();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getAllParameters()  [jTj].getAllParameters();	  EstimationProblem    sum    =    problem.getAllParameters()[i];    	non-compiled	[CE]  incompatible  types	106	None	replace
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	int  sum  =  0;	  double    sum    =    2;    int    sum    =    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
5	[BUG]  [BUGGY]  int  sum  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  sum  =  0;	  double    sum    =    2;    int    sum    =    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
6	[BUG]  [BUGGY]  double  sum  =  0;  int  sum  =  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  int  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0;  int  sum  =  0;	  double    sum    =    2;    int    sum    =    2;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	71	None	replace
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  sum  =  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	int  sum  =  2;	  double    sum    =    2;    int    sum    =    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
8	[BUG]  [BUGGY]  int  sum  =  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  sum  =  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  sum  =  2;	  double    sum    =    2;    int    sum    =    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
9	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i];    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
10	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i];    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
12	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  ++i)  {  jTj[i][j]  =  cols[i];  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  ++i)  {  jTj[i][j]  =  cols[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  ++i)  {  jTj[i][j]  =  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i];    }    	non-compiled	[CE]  not  a  statement	81	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max  +  1);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max  +  1);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max  +  1);  }	  for(int    j    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    max);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	130	None	replace
14	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  sum  =  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	int  sum  =  1;	  double    sum    =    1;    int    sum    =    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	1	replace
15	[BUG]  [BUGGY]  int  sum  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  sum  =  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  sum  =  1;	  double    sum    =    1;    int    sum    =    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	1	replace
16	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	replace
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7f;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =  0x7f;	  double    sum    =    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
18	[BUG]  [BUGGY]  double  sum  =  0x7f;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7f;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0x7f;	  double    sum    =    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
19	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7FF;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =  0x7FF;	  double    sum    =    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
20	[BUG]  [BUGGY]  double  sum  =  0x7FF;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7FF;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0x7FF;	  double    sum    =    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
21	[BUG]  [BUGGY]  jTj[i][j]  =  Math.min(jTj[i],  cols);  [CE]  no  suitable  method  found  for  min(double[],int)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.min(jTj[i],  cols);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.min(jTj[i],  cols);	  jTj[i][j]    =    Math.min(jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int)	5	None	replace
22	[BUG]  [BUGGY]  jTj[i][j]  =  Math.min(jTj[i],  cols,  max);  [CE]  no  suitable  method  found  for  min(double[],int,int)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.min(jTj[i],  cols,  max);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.min(jTj[i],  cols,  max);	  jTj[i][j]    =    Math.min(jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int,int)	5	None	replace
23	[BUG]  [BUGGY]  jTj[i][j]  =  Math.min(jTj[i],  max,  cols);  [CE]  no  suitable  method  found  for  min(double[],int,int)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.min(jTj[i],  max,  cols);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.min(jTj[i],  max,  cols);	  jTj[i][j]    =    Math.min(jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int,int)	5	None	replace
24	[BUG]  [BUGGY]  for(int  jTj[i][j]  =  problem.getMeasurements().length;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  jTj[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  jTj[i][j]  =  problem.getMeasurements().length;	          jTj[i][j]    =    problem.getMeasurements().length;    for(int    jTj[i][j]    =    problem.getMeasurements().length;    	non-compiled	[CE]  ']'  expected	104	None	replace
25	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  for(int  jTj[i][j]  =  problem.getMeasurements().length;  }  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  for(int  jTj[i][j]  =  problem.getMeasurements().length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  for(int  jTj[i][j]  =  problem.getMeasurements().length;  }	          jTj[i][j]    =    problem.getMeasurements().length;    for(int    jTj[i][j]    =    problem.getMeasurements().length;    	non-compiled	[CE]  ']'  expected	104	None	replace
26	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  for(int  jTj[i][j]  =  problem.getMeasurements().length;  }  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  for(int  jTj[i][j]  =  problem.getMeasurements().length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	if(jTj  ==  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  for(int  jTj[i][j]  =  problem.getMeasurements().length;  }	          jTj[i][j]    =    problem.getMeasurements().length;    for(int    jTj[i][j]    =    problem.getMeasurements().length;    	non-compiled	[CE]  ']'  expected	104	None	replace
27	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	114	None	replace
28	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max  +  1);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max  +  1);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max  +  1);  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	114	None	replace
29	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.min(jTj[i],  max  +  1);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.min(jTj[i],  max  +  1);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.min(jTj[i],  max  +  1);  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	114	None	replace
30	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters().length  -  1;  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters().length  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getAllParameters().length  -  1;	  EstimationProblem    sum    =    problem.getAllParameters().length;    	non-compiled	[CE]  incompatible  types	105	None	replace
31	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters().length  +  1;  [CE]  incompatible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters().length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getAllParameters().length  +  1;	  EstimationProblem    sum    =    problem.getAllParameters().length;    	non-compiled	[CE]  incompatible  types	105	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max  +  1);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max  +  1);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max  +  1);  }	  for(int    j    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    Math.max(jTj[i],    max);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	120	None	replace
33	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =(jTj    ==    null)?    0    :    jTj.length;    double  sum  =(jTj  ==  null)?  0  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	86	None	add
34	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  Double  sum  =(jTj  ==  null)?  0  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  Double  sum  =(jTj  ==  null)?  0  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =(jTj    ==    null)?    0    :    jTj.length;    Double  sum  =(jTj  ==  null)?  0  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	86	None	add
35	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  sum  =(jTj!=  null)?  0  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  sum  =(jTj!=  null)?  0  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =(jTj    ==    null)?    0    :    jTj.length;    double  sum  =(jTj!=  null)?  0  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	86	None	add
36	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  sum  =(jTj  >=  null)?  0  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length;  double  sum  =(jTj  >=  null)?  0  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =(jTj    ==    null)?    0    :    jTj.length;    double  sum  =(jTj  >=  null)?  0  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	86	None	add
37	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][jTj.length  +  1];  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  new  double[cols][jTj.length  +  1];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  new  double[cols][jTj.length  +  1];	  jTj[i][j]    =    new    double[cols][jTj.length];    	non-compiled	[CE]  incompatible  types	138	None	replace
38	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][jTj,  cols.length];  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  new  double[cols][jTj,  cols.length];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  new  double[cols][jTj,  cols.length];	  jTj[i][j]    =    new    double[cols][jTj.length];    	non-compiled	[CE]  ']'  expected	138	None	replace
39	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	50	None	replace
40	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i];  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	50	None	replace
41	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  maxCostEval);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  maxCostEval);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  maxCostEval);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    costEvaluations);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	88	None	replace
42	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  maxEvaluations);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  maxEvaluations);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  maxEvaluations);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    costEvaluations);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	88	None	replace
43	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getMeasurements().length  +  2;  [CE]  cannot  find  symbol  sum  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getMeasurements().length  +  2;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getMeasurements().length  +  2;	  jTj[i][j]    =    problem.getMeasurements().length    +    1;    	non-compiled	[CE]  cannot  find  symbol  sum	10	None	replace
44	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int[][]  jTj  =  new  int[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int[][]  jTj  =  new  int[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	42	None	replace
45	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  3;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =  3;	  double    sum    =    2;    double    sum    =    3;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	72	1	replace
46	[BUG]  [BUGGY]  double  sum  =  3;  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  3;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  3;	  double    sum    =    2;    double    sum    =    3;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	72	1	replace
47	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    Math.max(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	96	None	replace
48	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max  +  1);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max  +  1);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max  +  1);  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    Math.max(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	96	None	replace
49	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	                jTj[i][j]        =        problem.getAllParameters().length;        jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	add
50	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getAllParameters().length;        jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	add
51	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	                jTj[i][j]        =        problem.getAllParameters().length;        jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	add
52	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getAllParameters().length;        jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	add
53	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters()  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters()  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getAllParameters().length;        jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters()	  	non-compiled	[CE]  ';'  expected	73	None	add
54	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getAllParameters().length;        jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length	  	non-compiled	[CE]  ';'  expected	73	None	add
55	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  cols,  jTj;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  cols,  jTj;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  cols,  jTj;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	37	None	replace
56	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  max;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  max;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  max;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	37	None	replace
57	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  costEvaluations;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  costEvaluations;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  costEvaluations;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	37	None	replace
58	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  max;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  max;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  max;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	37	None	replace
59	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int[][]  jTj  =  new  int[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int[][]  jTj  =  new  int[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  double[][]    jTj    =    new    double[cols][rows];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	103	None	replace
60	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  double[][]    jTj    =    new    double[cols][rows];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	103	None	replace
61	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][jTj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[cols][jTj.length    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
62	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][jTj.length  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][jTj.length  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][jTj.length  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[cols][jTj.length    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
63	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][jTj.length  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][jTj.length  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][jTj.length  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[cols][jTj.length    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
64	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    Math.min(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	4	None	replace
65	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    Math.min(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	4	None	replace
66	[BUG]  [BUGGY]  double  sum  =  0;  jTj[i][j]  =  Math.max(jTj[i],  max);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  jTj[i][j]  =  Math.max(jTj[i],  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0;  jTj[i][j]  =  Math.max(jTj[i],  max);	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    Math.max(jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	29	None	replace
67	[BUG]  [BUGGY]  double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i],  cols);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i],  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i],  cols);	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    Math.max(jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	29	None	replace
68	[BUG]  [BUGGY]  double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i],  max);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i],  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i],  max);	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    Math.max(jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	29	None	replace
69	[BUG]  [BUGGY]  Double  sum  =  1;  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  Double  sum  =  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	Double  sum  =  1;	  double    sum    =    1;    Double    sum    =    1;    	non-compiled	[CE]  incompatible  types	31	None	replace
70	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0L  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =(jTj!=  null)?  0L  :  jTj.length;	  double    sum    =(jTj    ==    null)?    0L    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
71	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  0L  :  jTj.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0L  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj!=  null)?  0L  :  jTj.length;	  double    sum    =(jTj    ==    null)?    0L    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
72	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj[i].length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =(jTj  ==  null)?  0L  :  jTj[i].length;	  double    sum    =(jTj    ==    null)?    0L    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
73	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj[i].length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj[i].length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0L  :  jTj[i].length;	  double    sum    =(jTj    ==    null)?    0L    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
74	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =(jTj  ==  null)?  0L  :  jTj.length  +  1;	  double    sum    =(jTj    ==    null)?    0L    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
75	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0L  :  jTj.length  +  1;	  double    sum    =(jTj    ==    null)?    0L    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
76	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0L  :  max;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0L  :  max;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0L  :  max;	  double    sum    =(jTj    <    0)?    0L    :    0L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	9	None	replace
77	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0L  :  0;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0L  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0L  :  0;	  double    sum    =(jTj    <    0)?    0L    :    0L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	9	None	replace
78	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0L  :  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0L  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0L  :  1;	  double    sum    =(jTj    <    0)?    0L    :    0L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	9	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  for(int    i    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	49	None	replace
80	[BUG]  [BUGGY]  double  sum  =  jtj.doubleValue()  *  jTj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jtj.doubleValue()  *  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jtj.doubleValue()  *  jTj.doubleValue();	  double    sum    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	119	None	replace
81	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  jtj.doubleValue();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  *  jtj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jTj.doubleValue()  *  jtj.doubleValue();	  double    sum    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
82	[BUG]  [BUGGY]  double  sum  =  residuals.doubleValue()  *  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  residuals.doubleValue()  *  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  residuals.doubleValue()  *  jTj.doubleValue();	  double    sum    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
83	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[rows][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	142	None	replace
84	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int[][]  jTj  =  new  int[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int[][]  jTj  =  new  int[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	142	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
86	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getAllParameters()  [i],  cols;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getAllParameters()  [i],  cols;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getAllParameters()  [i],  cols;	  jTj[i][j]    =    problem.getAllParameters()    [i];    	non-compiled	[CE]  ';'  expected	24	None	replace
87	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getAllParameters()  [i].length;  [CE]  cannot  find  symbol  length  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getAllParameters()  [i].length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getAllParameters()  [i].length;	  jTj[i][j]    =    problem.getAllParameters()    [i];    	non-compiled	[CE]  cannot  find  symbol  length	24	None	replace
88	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  jTj[j];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  jTj[j];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  jTj[j];  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    jTj[j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	91	None	replace
89	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[j];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[j];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[j];  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    jTj[j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	91	None	replace
90	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[j];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[j];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[j];  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    jTj[j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	91	None	replace
91	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  max;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  *  max;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jTj.doubleValue()  *  max;	  double    sum    =    jTj.doubleValue()    *    jSquare;    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
92	[BUG]  [BUGGY]  double  sum  =  jSquare.doubleValue()  *  jTj;  [CE]  cannot  find  symbol  jSquare  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jSquare.doubleValue()  *  jTj;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jSquare.doubleValue()  *  jTj;	  double    sum    =    jTj.doubleValue()    *    jSquare;    	non-compiled	[CE]  cannot  find  symbol  jSquare	129	None	replace
93	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  Math.sqrt(jSquare);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  *  Math.sqrt(jSquare);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jTj.doubleValue()  *  Math.sqrt(jSquare);	  double    sum    =    jTj.doubleValue()    *    jSquare;    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
94	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  }  [CE]  cannot  find  symbol  sum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  }	          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]    =    problem.getMeasurements().length;    	non-compiled	[CE]  cannot  find  symbol  sum	12	None	replace
95	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  }  [CE]  cannot  find  symbol  sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	if(jTj  ==  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  }	          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]    =    problem.getMeasurements().length;    	non-compiled	[CE]  cannot  find  symbol  sum	12	None	replace
96	[BUG]  [BUGGY]  jTj[i][j]  =  Math.max(jTj[i],  cols);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.max(jTj[i],  cols);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.max(jTj[i],  cols);	  jTj[i][j]    =    Math.max(jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	22	None	replace
97	[BUG]  [BUGGY]  jTj[i][j]  =  Math.max(jTj[i],  cols,  max);  [CE]  no  suitable  method  found  for  max(double[],int,int)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.max(jTj[i],  cols,  max);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.max(jTj[i],  cols,  max);	  jTj[i][j]    =    Math.max(jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int)	22	None	replace
98	[BUG]  [BUGGY]  jTj[i][j]  =  Math.max(jTj[i],  max,  cols);  [CE]  no  suitable  method  found  for  max(double[],int,int)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.max(jTj[i],  max,  cols);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.max(jTj[i],  max,  cols);	  jTj[i][j]    =    Math.max(jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int)	22	None	replace
99	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    new    double[cols][jTj.length];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	111	None	replace
100	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	                jTj[i][j]        =        problem.getMeasurements().length;        jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
101	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getMeasurements().length;        jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
102	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	                jTj[i][j]        =        problem.getMeasurements().length;        jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
103	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getMeasurements().length;        jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
104	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  JTj[i][j]  =  problem.getMeasurements().length;  [CE]  cannot  find  symbol  JTj  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  JTj[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getMeasurements().length;        jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  JTj[i][j]  =  problem.getMeasurements().length;	  	non-compiled	[CE]  cannot  find  symbol  JTj	11	None	add
105	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getMeasurements().length;        jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length	  	non-compiled	[CE]  ';'  expected	11	None	add
106	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int[][]  jTj  =  new  int[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int[][]  jTj  =  new  int[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	66	None	replace
107	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	66	None	replace
108	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  }  [CE]  cannot  find  symbol  sum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  }	          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol  sum	74	None	replace
109	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  }  [CE]  cannot  find  symbol  sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	if(jTj  ==  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  }	          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol  sum	74	None	replace
110	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  jTj[i];  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	48	None	replace
111	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  0)?  0  :  jTj,  cols.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.doubleValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
112	[BUG]  [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  1)?  0  :  jTj,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  1)?  0  :  jTj,  cols.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.doubleValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
113	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  1  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  1  :  jTj,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  1  :  jTj,  cols.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.doubleValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
114	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	34	None	replace
115	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	34	None	replace
116	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  max,  residuals);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  max,  residuals);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  max,  residuals);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    jTj,    residuals);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	144	None	replace
117	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  jTj);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  jTj);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    jTj,    residuals);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	144	None	replace
118	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  residuals,  jTj);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  residuals,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  residuals,  jTj);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    jTj,    residuals);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	144	None	replace
119	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  jTj,  cols);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  jTj,  cols);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    jTj,    residuals);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	144	None	replace
120	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][jTj.length  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
121	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  1  :  Math.sqrt(jTj,  cols);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  1  :  Math.sqrt(jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  1  :  Math.sqrt(jTj,  cols);	  double    sum    =(jTj    <    0)?    1    :    jTj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	140	None	replace
122	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  1  :  jTj[i].doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  1  :  jTj[i].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  1  :  jTj[i].doubleValue();	  double    sum    =(jTj    <    0)?    1    :    jTj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	140	None	replace
123	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  1  :  Math.abs(jTj.doubleValue());  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  1  :  Math.abs(jTj.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  1  :  Math.abs(jTj.doubleValue());	  double    sum    =(jTj    <    0)?    1    :    jTj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	140	None	replace
124	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols  +  1);	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols);    	non-compiled	[CE]  ';'  expected	135	None	replace
125	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  cols);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  0)?  0  :  jTj,  cols);	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols);    	non-compiled	[CE]  ';'  expected	135	None	replace
126	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  max);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  max);	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols);    	non-compiled	[CE]  ';'  expected	135	None	replace
127	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	InvalidMatrixException  ime  =  problem.getInvalidMatrixException();	  InvalidMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
128	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  jTj.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  InvalidMatrixException  ime  =  jTj.getInvalidMatrixException();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	InvalidMatrixException  ime  =  jTj.getInvalidMatrixException();	  InvalidMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
129	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problems.getInvalidMatrixException();  [CE]  cannot  find  symbol  problems  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  InvalidMatrixException  ime  =  problems.getInvalidMatrixException();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	InvalidMatrixException  ime  =  problems.getInvalidMatrixException();	  InvalidMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol  problems	125	None	replace
130	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.ime.getInvalidMatrixException();  [CE]  cannot  find  symbol  ime  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  InvalidMatrixException  ime  =  this.ime.getInvalidMatrixException();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	InvalidMatrixException  ime  =  this.ime.getInvalidMatrixException();	  InvalidMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol  ime	125	None	replace
131	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	68	None	replace
132	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	68	None	replace
133	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =(jTj.length  >  1)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	replace
134	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj.length  :  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  1)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj.length  >  1)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	replace
135	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  <  2)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =(jTj.length  <  2)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	replace
136	[BUG]  [BUGGY]  double  sum  =(jTj.length  <  2)?  jTj.length  :  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  <  2)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj.length  <  2)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	replace
137	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =(jTj!=  null)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	replace
138	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  jTj.length  :  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj!=  null)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	replace
139	[BUG]  [BUGGY]  int  jTj[i][j]  =  problem.getAllParameters().length;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  jTj[i][j]  =  problem.getAllParameters().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  jTj[i][j]  =  problem.getAllParameters().length;	          jTj[i][j]    =    problem.getAllParameters().length;    int    jTj[i][j]    =    problem.getAllParameters().length;    	non-compiled	[CE]  ']'  expected	110	None	replace
140	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  int  jTj[i][j]  =  problem.getAllParameters().length;  }  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  int  jTj[i][j]  =  problem.getAllParameters().length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  int  jTj[i][j]  =  problem.getAllParameters().length;  }	          jTj[i][j]    =    problem.getAllParameters().length;    int    jTj[i][j]    =    problem.getAllParameters().length;    	non-compiled	[CE]  ']'  expected	110	None	replace
141	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  int  jTj[i][j]  =  problem.getAllParameters().length;  }  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  int  jTj[i][j]  =  problem.getAllParameters().length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	if(jTj  ==  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  int  jTj[i][j]  =  problem.getAllParameters().length;  }	          jTj[i][j]    =    problem.getAllParameters().length;    int    jTj[i][j]    =    problem.getAllParameters().length;    	non-compiled	[CE]  ']'  expected	110	None	replace
142	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getAllParameters().length  +  2;  [CE]  cannot  find  symbol  sum  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getAllParameters().length  +  2;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getAllParameters().length  +  2;	  jTj[i][j]    =    problem.getAllParameters().length    +    1;    	non-compiled	[CE]  cannot  find  symbol  sum	1	None	replace
143	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getAllParameters().length  /  1;  [CE]  cannot  find  symbol  sum  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getAllParameters().length  /  1;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getAllParameters().length  /  1;	  jTj[i][j]    =    problem.getAllParameters().length    +    1;    	non-compiled	[CE]  cannot  find  symbol  sum	1	None	replace
144	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    Math.max(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	21	None	replace
145	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    Math.max(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	21	None	replace
146	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.max(jTj[i],  max  +  1);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.max(jTj[i],  max  +  1);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.max(jTj[i],  max  +  1);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    Math.max(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	21	None	replace
147	[BUG]  [BUGGY]  double  sum  =  0;  double  sum  =  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  double  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0;  double  sum  =  0;	  double    sum    =    0L;    double    sum    =    0M;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	64	None	replace
148	[BUG]  [BUGGY]  double  sum  =  0M;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0M;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0M;	  double    sum    =    0L;    double    sum    =    0M;    	non-compiled	[CE]  ';'  expected	64	None	replace
149	[BUG]  [BUGGY]  int  max  =  Math.min(jTj.length,  cols,  i);  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  max  =  Math.min(jTj.length,  cols,  i);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  max  =  Math.min(jTj.length,  cols,  i);	  int    max    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
150	[BUG]  [BUGGY]  int  max  =  Math.min(jTj.length,  cols  +  1);  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  max  =  Math.min(jTj.length,  cols  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  max  =  Math.min(jTj.length,  cols  +  1);	  int    max    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
151	[BUG]  [BUGGY]  int  max  =  Math.min(jTj.length,  cols,  costEvaluations);  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  max  =  Math.min(jTj.length,  cols,  costEvaluations);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  max  =  Math.min(jTj.length,  cols,  costEvaluations);	  int    max    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
152	[BUG]  [BUGGY]  int  max  =  Math.max(jTj.length,  cols);  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  max  =  Math.max(jTj.length,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  max  =  Math.max(jTj.length,  cols);	  int    max    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
153	[BUG]  [BUGGY]  int  jTj  =  problem.getMeasurements().length  -  1;  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  jTj  =  problem.getMeasurements().length  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  jTj  =  problem.getMeasurements().length  -  1;	  int    jTj    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	52	None	replace
154	[BUG]  [BUGGY]  int  jTj  =  problem.getMeasurements().length  +  1;  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  jTj  =  problem.getMeasurements().length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  jTj  =  problem.getMeasurements().length  +  1;	  int    jTj    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	52	None	replace
155	[BUG]  [BUGGY]  int  jTj  =  problem.getMeasurements().length  -  2;  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  jTj  =  problem.getMeasurements().length  -  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  jTj  =  problem.getMeasurements().length  -  2;	  int    jTj    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	52	None	replace
156	[BUG]  [BUGGY]  Doppel  sum  =  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  Doppel  sum  =  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	Doppel  sum  =  1;	  double    sum    =    1;    Doppel    sum    =    1;    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
157	[BUG]  [BUGGY]  JTj[i][j]  =  problem.getMeasurements().length;  [CE]  cannot  find  symbol  JTj  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  JTj[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	JTj[i][j]  =  problem.getMeasurements().length;	          jTj[i][j]    =    problem.getMeasurements().length;    JTj[i][j]    =    problem.getMeasurements().length;    	non-compiled	[CE]  cannot  find  symbol  JTj	13	None	replace
158	[BUG]  [BUGGY]  n[i][j]  =  problem.getMeasurements().length;  [CE]  cannot  find  symbol  n  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  n[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	n[i][j]  =  problem.getMeasurements().length;	          jTj[i][j]    =    problem.getMeasurements().length;    JTj[i][j]    =    problem.getMeasurements().length;    	non-compiled	[CE]  cannot  find  symbol  n	13	None	replace
159	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValu    	non-compiled	[CE]  ';'  expected	108	None	replace
160	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValu    	non-compiled	[CE]  ';'  expected	108	None	replace
161	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValu    	non-compiled	[CE]  ';'  expected	108	None	replace
162	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =(jTj    ==    null)?    0L    :    jTj.length;    double  sum  =(jTj  ==  null)?  0L  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	add
163	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  Double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  Double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =(jTj    ==    null)?    0L    :    jTj.length;    Double  sum  =(jTj  ==  null)?  0L  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	add
164	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  double  sum  =(jTj!=  null)?  0L  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  double  sum  =(jTj!=  null)?  0L  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =(jTj    ==    null)?    0L    :    jTj.length;    double  sum  =(jTj!=  null)?  0L  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	add
165	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  double  sum  =(jTj  >=  null)?  0L  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  double  sum  =(jTj  >=  null)?  0L  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =(jTj    ==    null)?    0L    :    jTj.length;    double  sum  =(jTj  >=  null)?  0L  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	add
166	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  double  sum  =(jTj  >>  null)?  0L  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  double  sum  =(jTj  >>  null)?  0L  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =(jTj    ==    null)?    0L    :    jTj.length;    double  sum  =(jTj  >>  null)?  0L  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	add
167	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols;	  double    sum    =(jTj    <    0)?    0    :    jTj[i].length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	38	None	replace
168	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj[i].length;  [CE]  incomparable  types:  double[][]  and  int  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj[i].length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  0)?  0  :  jTj[i].length;	  double    sum    =(jTj    <    0)?    0    :    jTj[i].length;    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	38	None	replace
169	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[j].length;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[j].length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[j].length;	  double    sum    =(jTj    <    0)?    0    :    jTj[i].length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	38	None	replace
170	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	121	None	replace
171	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].value;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].value;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][cols].value;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	121	None	replace
172	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].getValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].getValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][cols].getValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	121	None	replace
173	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  costEvaluations);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  costEvaluations);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  costEvaluations);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    cols);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	17	None	replace
174	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  max);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  max);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    cols);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	17	None	replace
175	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  i);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  i);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  i);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    cols);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	17	None	replace
176	[BUG]  [BUGGY]  jTj[i][j]  =  cols[i];  [CE]  array  required,  but  int  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  cols[i];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  cols[i];	  jTj[i][j]    =    jTj[i];    	non-compiled	[CE]  array  required,  but  int  found	90	None	replace
177	[BUG]  [BUGGY]  Doppel  sum  =  2;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  Doppel  sum  =  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	Doppel  sum  =  2;	  double    sum    =    2;    Doppel    sum    =    2;    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
178	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj,  cols.doubleValue());  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj,  cols.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj,  cols.doubleValue());	  double    sum    =(jTj    <    0)?    0    :    Math.abs(jTj.doubleValue());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	56	None	replace
179	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj,  max);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj,  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj,  max);	  double    sum    =(jTj    <    0)?    0    :    Math.abs(jTj.doubleValue());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	56	None	replace
180	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj.doubleValue(),  max);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj.doubleValue(),  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj.doubleValue(),  max);	  double    sum    =(jTj    <    0)?    0    :    Math.abs(jTj.doubleValue());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	56	None	replace
181	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj[i].doubleValue());  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj[i].doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj[i].doubleValue());	  double    sum    =(jTj    <    0)?    0    :    Math.abs(jTj.doubleValue());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	56	None	replace
182	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols  +  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  ';'  expected	93	None	replace
183	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[jTj.length  +  1;  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[jTj.length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[jTj.length  +  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  ']'  expected	93	None	replace
184	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length,  cols  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length,  cols  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj.length,  cols  +  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  ';'  expected	93	None	replace
185	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  Math.abs(jTj.doubleValue());  [CE]  incomparable  types:  double[][]  and  int  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  Math.abs(jTj.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  0)?  0  :  Math.abs(jTj.doubleValue());	  double    sum    =(jTj    ==    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	102	None	replace
186	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  Math.sqrt(jTj,  cols);  [CE]  incomparable  types:  double[][]  and  int  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  Math.sqrt(jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  0)?  0  :  Math.sqrt(jTj,  cols);	  double    sum    =(jTj    ==    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	102	None	replace
187	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj[i].doubleValue();  [CE]  incomparable  types:  double[][]  and  int  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj[i].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  0)?  0  :  jTj[i].doubleValue();	  double    sum    =(jTj    ==    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	102	None	replace
188	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getMeasurements()[i];  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getMeasurements()[i];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getMeasurements()[i];	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    problem.getMeasurements()[i];    	non-compiled	[CE]  incompatible  types	32	None	replace
189	[BUG]  [BUGGY]  double  sum  =  1;  jTj[i][j]  =  problem.getMeasurements()  [i];  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  1;  jTj[i][j]  =  problem.getMeasurements()  [i];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  1;  jTj[i][j]  =  problem.getMeasurements()  [i];	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    problem.getMeasurements()[i];    	non-compiled	[CE]  incompatible  types	32	None	replace
190	[BUG]  [BUGGY]  double  sum  =  0;  jTj[i][j]  =  problem.getMeasurements()  [i];  [CE]  incompatible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  jTj[i][j]  =  problem.getMeasurements()  [i];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0;  jTj[i][j]  =  problem.getMeasurements()  [i];	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    problem.getMeasurements()[i];    	non-compiled	[CE]  incompatible  types	32	None	replace
191	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  1;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	1	replace
192	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  1;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	1	replace
193	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =(jTj!=  null)?  0  :  jTj.length;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	1	replace
194	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj!=  null)?  0  :  jTj.length;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	1	replace
195	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj[i].length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =(jTj  ==  null)?  0  :  jTj[i].length;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	1	replace
196	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj[i].length;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj[i].length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj[i].length;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	1	replace
197	[BUG]  [BUGGY]  double  i  =  0;  jTj[i][j]  =  new  double[cols][jTj.length];  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  i  =  0;  jTj[i][j]  =  new  double[cols][jTj.length];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  i  =  0;  jTj[i][j]  =  new  double[cols][jTj.length];	  int    i    =    0;    jTj[i][j]    =    new    double[cols][jTj.length];    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	112	None	replace
198	[BUG]  [BUGGY]  int  jTj  =  new  double[cols][jTj.length];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  jTj  =  new  double[cols][jTj.length];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  jTj  =  new  double[cols][jTj.length];	  int    i    =    0;    jTj[i][j]    =    new    double[cols][jTj.length];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	112	None	replace
199	[BUG]  [BUGGY]  int  i  =  0;  jTj[i][j]  =  new  double[cols][jTj.length  +  1];  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  i  =  0;  jTj[i][j]  =  new  double[cols][jTj.length  +  1];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  i  =  0;  jTj[i][j]  =  new  double[cols][jTj.length  +  1];	  int    i    =    0;    jTj[i][j]    =    new    double[cols][jTj.length];    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	112	None	replace
200	[BUG]  [BUGGY]  int  jTj  =  0;  jTj[i][j]  =  new  double[cols][jTj.length];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  jTj  =  0;  jTj[i][j]  =  new  double[cols][jTj.length];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  jTj  =  0;  jTj[i][j]  =  new  double[cols][jTj.length];	  int    i    =    0;    jTj[i][j]    =    new    double[cols][jTj.length];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	112	None	replace
201	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj,  max.doubleValue();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj,  max.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj!=  null)?  0  :  jTj,  max.doubleValue();	  double    sum    =(jTj!=    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	85	None	replace
202	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj!=  null)?  0  :  jTj,  cols.doubleValue();	  double    sum    =(jTj!=    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	85	None	replace
203	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  max.doubleValue();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  max.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj,  max.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	84	None	replace
204	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj,  cols.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	84	None	replace
205	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
206	[BUG]  [BUGGY]  JTj[i][j]  =  problem.getAllParameters().length;  [CE]  cannot  find  symbol  JTj  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  JTj[i][j]  =  problem.getAllParameters().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	JTj[i][j]  =  problem.getAllParameters().length;	          jTj[i][j]    =    problem.getAllParameters().length;    JTj[i][j]    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol  JTj	75	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max  +  1);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max  +  1);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max  +  1);  }	  for(int    i    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    max);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	115	None	replace
208	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  cols;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  cols;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  cols;	  double    sum    =(jTj    <    0)?    0    :    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	134	None	replace
209	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  max;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  max;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  max;	  double    sum    =(jTj    <    0)?    0    :    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	134	None	replace
210	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  0;  [CE]  incomparable  types:  double[][]  and  int  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  0)?  0  :  0;	  double    sum    =(jTj    <    0)?    0    :    0;    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	134	None	replace
211	[BUG]  [BUGGY]  for(int  jTj[i][j]  =  problem.getAllParameters().length;  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  jTj[i][j]  =  problem.getAllParameters().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  jTj[i][j]  =  problem.getAllParameters().length;	          jTj[i][j]    =    problem.getAllParameters().length;    for(int    jTj[i][j]    =    problem.getAllParameters().length;    	non-compiled	[CE]  ']'  expected	76	None	replace
212	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  for(int  jTj[i][j]  =  problem.getAllParameters().length;  }  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  for(int  jTj[i][j]  =  problem.getAllParameters().length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  for(int  jTj[i][j]  =  problem.getAllParameters().length;  }	          jTj[i][j]    =    problem.getAllParameters().length;    for(int    jTj[i][j]    =    problem.getAllParameters().length;    	non-compiled	[CE]  ']'  expected	76	None	replace
213	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  for(int  jTj[i][j]  =  problem.getAllParameters().length;  }  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  for(int  jTj[i][j]  =  problem.getAllParameters().length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	if(jTj  ==  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  for(int  jTj[i][j]  =  problem.getAllParameters().length;  }	          jTj[i][j]    =    problem.getAllParameters().length;    for(int    jTj[i][j]    =    problem.getAllParameters().length;    	non-compiled	[CE]  ']'  expected	76	None	replace
214	[BUG]  [BUGGY]  double  sum  =(results  <  0)?  0  :  Math.sqrt(jTj,  jTj);  [CE]  cannot  find  symbol  results  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(results  <  0)?  0  :  Math.sqrt(jTj,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(results  <  0)?  0  :  Math.sqrt(jTj,  jTj);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    residuals);    	non-compiled	[CE]  cannot  find  symbol  results	89	None	replace
215	[BUG]  [BUGGY]  double  sum  =  max.doubleValue()  +  jTj;  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  max.doubleValue()  +  jTj;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  max.doubleValue()  +  jTj;	  double    sum    =    jTj.doubleValue()    +    max;    	non-compiled	[CE]  int  cannot  be  dereferenced	80	None	replace
216	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  +  cols;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  +  cols;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jTj.doubleValue()  +  cols;	  double    sum    =    jTj.doubleValue()    +    max;    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
217	[BUG]  [BUGGY]  double  sum  =  0;  Double  sum  =  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  Double  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0;  Double  sum  =  0;	  double    sum    =    0L;    Double    sum    =    0L;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	replace
218	[BUG]  [BUGGY]  Double  sum  =  0L;  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  Double  sum  =  0L;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	Double  sum  =  0L;	  double    sum    =    0L;    Double    sum    =    0L;    	non-compiled	[CE]  incompatible  types	62	None	replace
219	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    new    double[cols][jTj.length];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	25	None	replace
220	[BUG]  [BUGGY]  jTj  =  new  double[cols][cols];  [CE]  cannot  find  symbol  sum  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj  =  new  double[cols][cols];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj  =  new  double[cols][cols];	  jTj    =    new    double[cols][jTj.length];    	non-compiled	[CE]  cannot  find  symbol  sum	128	None	replace
221	[BUG]  [BUGGY]  jTj  =  new  double[cols][jTj.length  +  1];  [CE]  cannot  find  symbol  sum  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj  =  new  double[cols][jTj.length  +  1];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj  =  new  double[cols][jTj.length  +  1];	  jTj    =    new    double[cols][jTj.length];    	non-compiled	[CE]  cannot  find  symbol  sum	128	None	replace
222	[BUG]  [BUGGY]  double[][]  jacobian  =  problem.getJacobianValues();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  problem.getJacobianValues();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  problem.getJacobianValues();	  double[][]    jacobian    =    problem.getValues();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
223	[BUG]  [BUGGY]  double[][]  jacobian  =  problems.getValues();  [CE]  cannot  find  symbol  problems  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  problems.getValues();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  problems.getValues();	  double[][]    jacobian    =    problem.getValues();    	non-compiled	[CE]  cannot  find  symbol  problems	59	None	replace
224	[BUG]  [BUGGY]  double[][]  jacobian  =  problem,  jTj.getValues();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  problem,  jTj.getValues();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  problem,  jTj.getValues();	  double[][]    jacobian    =    jTj,    problem.getValues();    	non-compiled	[CE]  ';'  expected	58	None	replace
225	[BUG]  [BUGGY]  double[][]  jacobian  =  problem.getValues(),  jTj);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  problem.getValues(),  jTj);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  problem.getValues(),  jTj);	  double[][]    jacobian    =    jTj,    problem.getValues();    	non-compiled	[CE]  ';'  expected	58	None	replace
226	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    double  sum  =(jTj.length  >  0)?  jTj.length  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	131	None	add
227	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  Double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  Double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    Double  sum  =(jTj.length  >  0)?  jTj.length  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	131	None	add
228	[BUG]  [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  int  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj.length  >  0)?  jTj.length  :  0;  int  sum  =(jTj.length  >  0)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    int  sum  =(jTj.length  >  0)?  jTj.length  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	131	None	add
229	[BUG]  [BUGGY]  double  sum  =(max  <  0)?  0  :  Math.sqrt(jTj,  jTj);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(max  <  0)?  0  :  Math.sqrt(jTj,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(max  <  0)?  0  :  Math.sqrt(jTj,  jTj);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    max);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	16	None	replace
230	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  max,  cols);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  max,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  max,  cols);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    max);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	16	None	replace
231	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  1.0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =  1.0;	  double    sum    =    1;    double    sum    =    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	replace
232	[BUG]  [BUGGY]  double  sum  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  1.0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  1.0;	  double    sum    =    1;    double    sum    =    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    Math.max(jTj[i],    cols);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	97	None	replace
234	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    Math.max(jTj[i],    cols);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	97	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols,  max);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols,  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols,  max);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    Math.max(jTj[i],    cols);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	97	None	replace
236	[BUG]  [BUGGY]  jTj[i][j]  =  jtj[i].doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  jtj[i].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  jtj[i].doubleValue();	  jTj[i][j]    =    jTj[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	36	None	replace
237	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[jTj[i].doubleValue();  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  new  double[jTj[i].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  new  double[jTj[i].doubleValue();	  jTj[i][j]    =    jTj[i].doubleValue();    	non-compiled	[CE]  ']'  expected	36	None	replace
238	[BUG]  [BUGGY]  double  sum  =  jtj.doubleValue();  [CE]  cannot  find  symbol  jtj  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jtj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jtj.doubleValue();	  double    sum    =    residuals.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  jtj	78	None	replace
239	[BUG]  [BUGGY]  double  sum  =  parameters.doubleValue();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  parameters.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  parameters.doubleValue();	  double    sum    =    residuals.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
240	[BUG]  [BUGGY]  int[][]  jTj  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int[][]  jTj  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int[][]  jTj  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	141	None	replace
241	[BUG]  [BUGGY]  Doppel  sum  =  0L;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  Doppel  sum  =  0L;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	Doppel  sum  =  0L;	  double    sum    =    0L;    Doppel    sum    =    0L;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
242	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  i.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  i.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  0)?  0  :  jTj,  i.length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.length;    	non-compiled	[CE]  ';'  expected	136	None	replace
243	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols  +  i.length;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols  +  i.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols  +  i.length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.length;    	non-compiled	[CE]  ';'  expected	136	None	replace
244	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
245	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
246	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
247	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj,  max.doubleValue();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj,  max.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0L  :  jTj,  max.doubleValue();	  double    sum    =(jTj    ==    null)?    0L    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	6	None	replace
248	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0L  :  jTj,  cols.doubleValue();	  double    sum    =(jTj    ==    null)?    0L    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	6	None	replace
249	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  0L  :  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0L  :  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj!=  null)?  0L  :  jTj.doubleValue();	  double    sum    =(jTj    ==    null)?    0L    :    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
250	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i].doubleValue();    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i].doubleValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	replace
252	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i].doubleValue();    }    	non-compiled	[CE]  not  a  statement	83	None	replace
253	[BUG]  [BUGGY]  double  sum  =  Math.sqrt(jTj,  jTj.doubleValue());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  Math.sqrt(jTj,  jTj.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  Math.sqrt(jTj,  jTj.doubleValue());	  double    sum    =    Math.sqrt(jTj.doubleValue());    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
254	[BUG]  [BUGGY]  double  sum  =  Math.sqrt(jTj.doubleValue(),  max);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  Math.sqrt(jTj.doubleValue(),  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  Math.sqrt(jTj.doubleValue(),  max);	  double    sum    =    Math.sqrt(jTj.doubleValue());    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
255	[BUG]  [BUGGY]  double  sum  =  Math.sqrt(jTj,  i.doubleValue());  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  Math.sqrt(jTj,  i.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  Math.sqrt(jTj,  i.doubleValue());	  double    sum    =    Math.sqrt(jTj.doubleValue());    	non-compiled	[CE]  int  cannot  be  dereferenced	118	None	replace
256	[BUG]  [BUGGY]  double  sum  =  Math.sqrt(jTj,  residuals.doubleValue());  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  Math.sqrt(jTj,  residuals.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  Math.sqrt(jTj,  residuals.doubleValue());	  double    sum    =    Math.sqrt(jTj.doubleValue());    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
257	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getAllParameters(i,  cols);  [CE]  method  getAllParameters  in  interface  EstimationProblem  cannot  be  applied  to  given  types;  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getAllParameters(i,  cols);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getAllParameters(i,  cols);	  jTj[i][j]    =    problem.getAllParameters(i);    	non-compiled	[CE]  method  getAllParameters  in  interface  EstimationProblem  cannot  be  applied  to  given  types;	23	None	replace
258	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getAllParameters(i,  rows);  [CE]  method  getAllParameters  in  interface  EstimationProblem  cannot  be  applied  to  given  types;  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getAllParameters(i,  rows);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getAllParameters(i,  rows);	  jTj[i][j]    =    problem.getAllParameters(i);    	non-compiled	[CE]  method  getAllParameters  in  interface  EstimationProblem  cannot  be  applied  to  given  types;	23	None	replace
259	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getAllParameters(i,  columns);  [CE]  cannot  find  symbol  columns  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getAllParameters(i,  columns);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getAllParameters(i,  columns);	  jTj[i][j]    =    problem.getAllParameters(i);    	non-compiled	[CE]  cannot  find  symbol  columns	23	None	replace
260	[BUG]  [BUGGY]  double  i  =  0;  jTj[i][j]  =  jTj[i].doubleValue();  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  i  =  0;  jTj[i][j]  =  jTj[i].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  i  =  0;  jTj[i][j]  =  jTj[i].doubleValue();	  int    i    =    0;    jTj[i][j]    =    jTj[i].doubleValue();    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	99	None	replace
261	[BUG]  [BUGGY]  int  jTj  =  jTj[i].doubleValue();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  jTj  =  jTj[i].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  jTj  =  jTj[i].doubleValue();	  int    i    =    0;    jTj[i][j]    =    jTj[i].doubleValue();    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	99	None	replace
262	[BUG]  [BUGGY]  int  i  =  1;  jTj[i][j]  =  jTj[i].doubleValue();  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  i  =  1;  jTj[i][j]  =  jTj[i].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  i  =  1;  jTj[i][j]  =  jTj[i].doubleValue();	  int    i    =    0;    jTj[i][j]    =    jTj[i].doubleValue();    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	99	None	replace
263	[BUG]  [BUGGY]  double  sum  =  0x7F;  double  sum  =  0x7F;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7F;  double  sum  =  0x7F;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =    0x7F;    double  sum  =  0x7F;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	add
264	[BUG]  [BUGGY]  double  sum  =  0x7F;  Double  sum  =  0x7F;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7F;  Double  sum  =  0x7F;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =    0x7F;    Double  sum  =  0x7F;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	add
265	[BUG]  [BUGGY]  double  sum  =  0x7F;  int  sum  =  0x7F;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7F;  int  sum  =  0x7F;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =    0x7F;    int  sum  =  0x7F;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	add
266	[BUG]  [BUGGY]  double  sum  =  0x7F;  boolean  sum  =  0x7F;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7F;  boolean  sum  =  0x7F;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =    0x7F;    boolean  sum  =  0x7F;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	add
267	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  cols);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  cols);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    cols);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	116	None	replace
268	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  cols);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  cols);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    cols);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	116	None	replace
269	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getMeasurements().length  -  1;  [CE]  incompatible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getMeasurements().length  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getMeasurements().length  -  1;	  EstimationProblem    sum    =    problem.getMeasurements().length;    	non-compiled	[CE]  incompatible  types	53	None	replace
270	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getMeasurements().length  +  1;  [CE]  incompatible  types  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getMeasurements().length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getMeasurements().length  +  1;	  EstimationProblem    sum    =    problem.getMeasurements().length;    	non-compiled	[CE]  incompatible  types	53	None	replace
271	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getMeasurements().length  -  2;  [CE]  incompatible  types  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getMeasurements().length  -  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getMeasurements().length  -  2;	  EstimationProblem    sum    =    problem.getMeasurements().length;    	non-compiled	[CE]  incompatible  types	53	None	replace
272	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem.getMatrixException();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  InvalidMatrixException  ime  =  problem.getMatrixException();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	InvalidMatrixException  ime  =  problem.getMatrixException();	  InvalidMatrixException    ime    =    ime.getMatrixException();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
273	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  jTj.getMatrixException();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  InvalidMatrixException  ime  =  jTj.getMatrixException();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	InvalidMatrixException  ime  =  jTj.getMatrixException();	  InvalidMatrixException    ime    =    ime.getMatrixException();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
274	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.ime.getMatrixException();  [CE]  cannot  find  symbol  ime  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  InvalidMatrixException  ime  =  this.ime.getMatrixException();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	InvalidMatrixException  ime  =  this.ime.getMatrixException();	  InvalidMatrixException    ime    =    ime.getMatrixException();    	non-compiled	[CE]  cannot  find  symbol  ime	126	None	replace
275	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problems.getMatrixException();  [CE]  cannot  find  symbol  problems  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  InvalidMatrixException  ime  =  problems.getMatrixException();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	InvalidMatrixException  ime  =  problems.getMatrixException();	  InvalidMatrixException    ime    =    ime.getMatrixException();    	non-compiled	[CE]  cannot  find  symbol  problems	126	None	replace
276	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i];	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.length;    	non-compiled	[CE]  ']'  expected	39	None	replace
277	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i].length;  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i].length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols[i].length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.length;    	non-compiled	[CE]  ']'  expected	39	None	replace
278	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  cols.length;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  jTj,  cols.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  0)?  0  :  jTj,  cols.length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.length;    	non-compiled	[CE]  ';'  expected	39	None	replace
279	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length  +  1;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length  +  1;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.length;    	non-compiled	[CE]  ';'  expected	39	None	replace
280	[BUG]  [BUGGY]  int  j  =  problem.getMeasurements().length  -  1;  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  problem.getMeasurements().length  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  problem.getMeasurements().length  -  1;	  int    j    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	127	None	replace
281	[BUG]  [BUGGY]  int  j  =  problem.getMeasurements().length  +  1;  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  problem.getMeasurements().length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  problem.getMeasurements().length  +  1;	  int    j    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	127	None	replace
282	[BUG]  [BUGGY]  int  j  =  problem.getMeasurements().length  -  2;  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  problem.getMeasurements().length  -  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  problem.getMeasurements().length  -  2;	  int    j    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	127	None	replace
283	[BUG]  [BUGGY]  double  sum  =(jTj  <  1)?  1  :  0;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  1)?  1  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  1)?  1  :  0;	  double    sum    =(jTj    <    0)?    1    :    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	133	None	replace
284	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  1  :  0;  [CE]  incomparable  types:  double[][]  and  int  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  1  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  0)?  1  :  0;	  double    sum    =(jTj    <    0)?    1    :    0;    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	133	None	replace
285	[BUG]  [BUGGY]  double  sum  =(jTj  <  >  0)?  1  :  0;  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  >  0)?  1  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  >  0)?  1  :  0;	  double    sum    =(jTj    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
286	[BUG]  [BUGGY]  int  jTj[i][j]  =  problem.getMeasurements().length;  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  jTj[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  jTj[i][j]  =  problem.getMeasurements().length;	          jTj[i][j]    =    problem.getMeasurements().length;    int    jTj[i][j]    =    problem.getMeasurements().length;    	non-compiled	[CE]  ']'  expected	14	None	replace
287	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  int  jTj[i][j]  =  problem.getMeasurements().length;  }  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  int  jTj[i][j]  =  problem.getMeasurements().length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  int  jTj[i][j]  =  problem.getMeasurements().length;  }	          jTj[i][j]    =    problem.getMeasurements().length;    int    jTj[i][j]    =    problem.getMeasurements().length;    	non-compiled	[CE]  ']'  expected	14	None	replace
288	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  int  jTj[i][j]  =  problem.getMeasurements().length;  }  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  int  jTj[i][j]  =  problem.getMeasurements().length;  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	if(jTj  ==  null)  {  jTj[i][j]  =  problem.getMeasurements().length;  int  jTj[i][j]  =  problem.getMeasurements().length;  }	          jTj[i][j]    =    problem.getMeasurements().length;    int    jTj[i][j]    =    problem.getMeasurements().length;    	non-compiled	[CE]  ']'  expected	14	None	replace
289	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][jtj.length];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[cols][jtj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
290	[BUG]  [BUGGY]  double[][]  jacobian  =  jTj.toArray(new  double[jTj.length()  ]);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  jTj.toArray(new  double[jTj.length()  ]);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  jTj.toArray(new  double[jTj.length()  ]);	  double[][]    jacobian    =    jTj.toArray(new    double[jTj.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
291	[BUG]  [BUGGY]  double[][]  jacobian  =  jTj.toArray(new  double[jTj.size()  +  1]);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  jTj.toArray(new  double[jTj.size()  +  1]);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  jTj.toArray(new  double[jTj.size()  +  1]);	  double[][]    jacobian    =    jTj.toArray(new    double[jTj.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
292	[BUG]  [BUGGY]  double[][]  jacobian  =  jTj.toArray(new  double[jTj.size()  *  2]);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  jTj.toArray(new  double[jTj.size()  *  2]);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  jTj.toArray(new  double[jTj.size()  *  2]);	  double[][]    jacobian    =    jTj.toArray(new    double[jTj.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
293	[BUG]  [BUGGY]  EstimationProblem  sum  =  jTj.getMask();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  jTj.getMask();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  jTj.getMask();	  EstimationProblem    sum    =    ime.getMask();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
294	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getMask();  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getMask();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getMask();	  EstimationProblem    sum    =    ime.getMask();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
295	[BUG]  [BUGGY]  EstimationProblem  sum  =  immutable.getMask();  [CE]  cannot  find  symbol  immutable  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  immutable.getMask();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  immutable.getMask();	  EstimationProblem    sum    =    ime.getMask();    	non-compiled	[CE]  cannot  find  symbol  immutable	54	None	replace
296	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    new    double[cols][jTj.length];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	27	None	replace
297	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [CE]  '.class'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	For(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    new    double[cols][jTj.length];    }    	non-compiled	[CE]  '.class'  expected	27	None	replace
298	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int[][]  jTj  =  new  int[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int[][]  jTj  =  new  int[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  double[][]    jTj    =    new    double[cols][rows];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	109	None	replace
299	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =	  double[][]    jTj    =    new    double[cols][rows];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
300	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters(),  cols);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters(),  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getAllParameters(),  cols);	  EstimationProblem    sum    =    problem.getAllParameters();    	non-compiled	[CE]  ';'  expected	107	None	replace
301	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters(),  jTj;  [CE]  incompatible  types  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters(),  jTj;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getAllParameters(),  jTj;	  EstimationProblem    sum    =    problem.getAllParameters();    	non-compiled	[CE]  incompatible  types	107	None	replace
302	[BUG]  [BUGGY]  EstimationProblem  sum  =  problems.getAllParameters();  [CE]  cannot  find  symbol  problems  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problems.getAllParameters();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problems.getAllParameters();	  EstimationProblem    sum    =    problem.getAllParameters();    	non-compiled	[CE]  cannot  find  symbol  problems	107	None	replace
303	[BUG]  [BUGGY]  jTj[i][j]  =  Math.max(jTj[i].length);  [CE]  no  suitable  method  found  for  max(int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.max(jTj[i].length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.max(jTj[i].length);	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    Math.max(jTj[i].length);    	non-compiled	[CE]  no  suitable  method  found  for  max(int)	30	None	replace
304	[BUG]  [BUGGY]  double  sum  =  0;  jTj[i][j]  =  Math.max(jTj[i].length);  [CE]  no  suitable  method  found  for  max(int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  jTj[i][j]  =  Math.max(jTj[i].length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0;  jTj[i][j]  =  Math.max(jTj[i].length);	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    Math.max(jTj[i].length);    	non-compiled	[CE]  no  suitable  method  found  for  max(int)	30	None	replace
305	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i].length,  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i].length,  max);	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    Math.max(jTj[i].length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	replace
306	[BUG]  [BUGGY]  double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i].length,  max);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i].length,  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i].length,  max);	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    Math.max(jTj[i].length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	replace
307	[BUG]  [BUGGY]  double  sum  =  2;  jTj[i][j]  =  Math.max(jTj[i].length);  [CE]  no  suitable  method  found  for  max(int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  2;  jTj[i][j]  =  Math.max(jTj[i].length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  2;  jTj[i][j]  =  Math.max(jTj[i].length);	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    Math.max(jTj[i].length);    	non-compiled	[CE]  no  suitable  method  found  for  max(int)	30	None	replace
308	[BUG]  [BUGGY]  Double  sum  =  0;  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  Double  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	Double  sum  =  0;	  double    sum    =    2;    Double    sum    =    2;    	non-compiled	[CE]  incompatible  types	70	None	replace
309	[BUG]  [BUGGY]  Double  sum  =  2;  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  Double  sum  =  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	Double  sum  =  2;	  double    sum    =    2;    Double    sum    =    2;    	non-compiled	[CE]  incompatible  types	70	None	replace
310	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jacobian,  max);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jacobian,  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jacobian,  max);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jacobian,    jTj);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	18	None	replace
311	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jacobian,  cols);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jacobian,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jacobian,  cols);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jacobian,    jTj);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	18	None	replace
312	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  jacobian);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  jacobian);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  jacobian);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jacobian,    jTj);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	18	None	replace
313	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jecobian,  jTj);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jecobian,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jecobian,  jTj);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jacobian,    jTj);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	18	None	replace
314	[BUG]  [BUGGY]  double[][]  jacobian  =  parameters.getValues();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  parameters.getValues();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  parameters.getValues();	  double[][]    jacobian    =    residuals.getValues();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
315	[BUG]  [BUGGY]  int  sum  =  0L;  [CE]  possible  loss  of  precision  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  sum  =  0L;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  sum  =  0L;	  double    sum    =    0L;    int    sum    =    0L;    	non-compiled	[CE]  possible  loss  of  precision	63	None	replace
316	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][jTj.doubleValue();  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i][jTj.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj[i].doubleValue();    	non-compiled	[CE]  ']'  expected	57	None	replace
317	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][jTj].doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][jTj].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i][jTj].doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj[i].doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	57	None	replace
318	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][j.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][j.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][j.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  double[][]    jTj    =    new    double[cols][jtj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	82	None	replace
319	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	41	None	replace
320	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i];    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
321	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i];    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
322	[BUG]  [BUGGY]  double  sum  =  i.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  i.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  i.doubleValue();	  double    sum    =    residuals.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	78	None	replace
323	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  2;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	1	replace
324	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj.length  +  2;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	1	replace
325	[BUG]  [BUGGY]  double  sum  =  problem.doubleValue();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  problem.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  problem.doubleValue();	  double    sum    =    max.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
326	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters()  [i],  jTj;  [CE]  incompatible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters()  [i],  jTj;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getAllParameters()  [i],  jTj;	  EstimationProblem    sum    =    problem.getAllParameters()[i];    	non-compiled	[CE]  incompatible  types	106	None	replace
327	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters()  [i],  jTj[i];  [CE]  ']'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters()  [i],  jTj[i];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getAllParameters()  [i],  jTj[i];	  EstimationProblem    sum    =    problem.getAllParameters()[i];    	non-compiled	[CE]  ']'  expected	106	None	replace
328	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jacobian,  jTj,  residuals);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jacobian,  jTj,  residuals);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jacobian,  jTj,  residuals);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jacobian,    jTj);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	18	None	replace
329	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	98	None	replace
330	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  >  expected	98	None	replace
331	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  }  else  {  jTj[i][j]  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  }  else  {  jTj[i][j]  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  }  else  {  jTj[i][j]	          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]    =    problem.getAllParameters().length;    	non-compiled	[CE]  not  a  statement	74	None	replace
332	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  parameters);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  parameters);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  parameters);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    costEvaluations);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	88	None	replace
333	[BUG]  [BUGGY]  double  sum  =  2;  jTj[i][j]  =  Math.max(jTj[i],  max);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  2;  jTj[i][j]  =  Math.max(jTj[i],  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  2;  jTj[i][j]  =  Math.max(jTj[i],  max);	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    Math.max(jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	29	None	replace
334	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
335	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  Math.sqrt(jTj.doubleValue());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  *  Math.sqrt(jTj.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jTj.doubleValue()  *  Math.sqrt(jTj.doubleValue());	  double    sum    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
336	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  max.doubleValue();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  *  max.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jTj.doubleValue()  *  max.doubleValue();	  double    sum    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
337	[BUG]  [BUGGY]  double  sum  =(cols  <  0)?  0  :  jTj,  cols.length;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(cols  <  0)?  0  :  jTj,  cols.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(cols  <  0)?  0  :  jTj,  cols.length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.length;    	non-compiled	[CE]  ';'  expected	39	None	replace
338	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  cols,  jTj.length;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  cols,  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  cols,  jTj.length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.length;    	non-compiled	[CE]  ';'  expected	39	None	replace
339	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  i.getMatrixException();  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  InvalidMatrixException  ime  =  i.getMatrixException();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	InvalidMatrixException  ime  =  i.getMatrixException();	  InvalidMatrixException    ime    =    ime.getMatrixException();    	non-compiled	[CE]  int  cannot  be  dereferenced	126	None	replace
340	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters().length  +  jTj.length;  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters().length  +  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getAllParameters().length  +  jTj.length;	  EstimationProblem    sum    =    problem.getAllParameters().length;    	non-compiled	[CE]  incompatible  types	105	None	replace
341	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj,  cost.doubleValue();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj,  cost.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj!=  null)?  0  :  jTj,  cost.doubleValue();	  double    sum    =(jTj!=    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	85	None	replace
342	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][jTj,  cols];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  new  double[cols][jTj,  cols];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  new  double[cols][jTj,  cols];	  jTj[i][j]    =    new    double[cols][jTj.length];    	non-compiled	[CE]  ']'  expected	138	None	replace
343	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj,  cost.doubleValue();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj,  cost.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0L  :  jTj,  cost.doubleValue();	  double    sum    =(jTj    ==    null)?    0L    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	6	None	replace
344	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  +  cost;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  +  cost;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jTj.doubleValue()  +  cost;	  double    sum    =    jTj.doubleValue()    +    max;    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
345	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    new    double[cols][jTj.length];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	111	None	replace
346	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    new    double[cols][jTj.length];    }    	non-compiled	[CE]  >  expected	111	None	replace
347	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =(jTj  ==  null)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	replace
348	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  jTj.length  :  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  jTj.length  :  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  jTj.length  :  0;	  double    sum    =(jTj.length    >    0)?    jTj.length    :    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	replace
349	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    	non-compiled	[CE]  ';'  expected	122	None	replace
350	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getAllParameters().length;  for(int  jTj[i][j]  =  problem.getMeasurements().length;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getAllParameters().length;  for(int  jTj[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getAllParameters().length;  for(int  jTj[i][j]  =  problem.getMeasurements().length;	          jTj[i][j]    =    problem.getMeasurements().length;    for(int    jTj[i][j]    =    problem.getMeasurements().length;    	non-compiled	[CE]  ']'  expected	104	None	replace
351	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i].doubleValue();    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	replace
352	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i].doubleValue();    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	replace
353	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][jtj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][jtj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][jtj.length  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[cols][jtj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
354	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  >  expected	34	None	replace
355	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    Math.max(jTj[i],    max);    }    	non-compiled	[CE]  >  expected	21	None	replace
356	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	114	None	replace
357	[BUG]  [BUGGY]  double  sum  =(cols  <  0)?  0  :  jTj,  cols.doubleValue();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(cols  <  0)?  0  :  jTj,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(cols  <  0)?  0  :  jTj,  cols.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.doubleValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
358	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  cols,  jTj.doubleValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  cols,  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  cols,  jTj.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.doubleValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
359	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters(i);  [CE]  method  getAllParameters  in  interface  EstimationProblem  cannot  be  applied  to  given  types;  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters(i);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getAllParameters(i);	  EstimationProblem    sum    =    problem.getAllParameters();    	non-compiled	[CE]  method  getAllParameters  in  interface  EstimationProblem  cannot  be  applied  to  given  types;	107	None	replace
360	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  chiSquare;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  *  chiSquare;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jTj.doubleValue()  *  chiSquare;	  double    sum    =    jTj.doubleValue()    *    jSquare;    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
361	[BUG]  [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }	  for(int    j    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	130	None	replace
362	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	40	None	replace
363	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  colls,  costEvaluations);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  colls,  costEvaluations);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  colls,  costEvaluations);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    colls);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	19	None	replace
364	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  dataArea,  colls);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  dataArea,  colls);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  dataArea,  colls);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    colls);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	19	None	replace
365	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  1;	  double    sum    =(jTj    <    0)?    0    :    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	134	None	replace
366	[BUG]  [BUGGY]  jTj[i][j]  =  Math.min(max,  jTj);  [CE]  no  suitable  method  found  for  min(int,double[][])  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.min(max,  jTj);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.min(max,  jTj);	  jTj[i][j]    =    Math.min(jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double[][])	5	None	replace
367	[BUG]  [BUGGY]  jTj[i][j]  =  Math.min(jacobian[i],  max);  [CE]  cannot  find  symbol  sum  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.min(jacobian[i],  max);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.min(jacobian[i],  max);	  jTj[i][j]    =    Math.min(jTj[i],    max);    	non-compiled	[CE]  cannot  find  symbol  sum	5	None	replace
368	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  i.getInvalidMatrixException();  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  InvalidMatrixException  ime  =  i.getInvalidMatrixException();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	InvalidMatrixException  ime  =  i.getInvalidMatrixException();	  InvalidMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  int  cannot  be  dereferenced	125	None	replace
369	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][rows].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][rows].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
370	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
371	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  double[][]    jTj    =    new    double[cols][rows];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	103	None	replace
372	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols  +  1);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols  +  1);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols  +  1);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    Math.max(jTj[i],    cols);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	97	None	replace
373	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    new    double[cols][jTj.length];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	25	None	replace
374	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    Math.max(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	96	None	replace
375	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    Math.max(jTj[i],    max);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	96	None	replace
376	[BUG]  [BUGGY]  EstimationProblem  sum  =  img.getMask();  [CE]  cannot  find  symbol  img  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  img.getMask();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  img.getMask();	  EstimationProblem    sum    =    ime.getMask();    	non-compiled	[CE]  cannot  find  symbol  img	54	None	replace
377	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][rows].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][rows].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	142	None	replace
378	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].value;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].value;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][cols].value;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	142	None	replace
379	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
380	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getMeasurements().length  +  jTj.length;  [CE]  incompatible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getMeasurements().length  +  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getMeasurements().length  +  jTj.length;	  EstimationProblem    sum    =    problem.getMeasurements().length;    	non-compiled	[CE]  incompatible  types	53	None	replace
381	[BUG]  [BUGGY]  int  jTj  =  problem.getAllParameters().length;  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  jTj  =  problem.getAllParameters().length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  jTj  =  problem.getAllParameters().length;	  int    jTj    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	52	None	replace
382	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  *  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  *  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj.length  *  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	93	None	replace
383	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  +  2;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  +  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj.length  +  2;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	93	None	replace
384	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  max  +  1);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  max  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  max  +  1);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    max);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	16	None	replace
385	[BUG]  [BUGGY]  double  sum  =  0x7F;  boolean  result  =  problem.getAllParameters().length  >  0x7F;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7F;  boolean  result  =  problem.getAllParameters().length  >  0x7F;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =    0x7F;    boolean  result  =  problem.getAllParameters().length  >  0x7F;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	add
386	[BUG]  [BUGGY]  double  sum  =  0x7F;  boolean  result  =  problem.getMeasurements().length  >  0x7F;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7F;  boolean  result  =  problem.getMeasurements().length  >  0x7F;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =    0x7F;    boolean  result  =  problem.getMeasurements().length  >  0x7F;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	add
387	[BUG]  [BUGGY]  double  sum  =  0x7F;  boolean  result  =  problem.getMeasurements().length  >  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7F;  boolean  result  =  problem.getMeasurements().length  >  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =    0x7F;    boolean  result  =  problem.getMeasurements().length  >  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	add
388	[BUG]  [BUGGY]  double  sum  =(jTj!=  0)?  0  :  jTj.doubleValue();  [CE]  incomparable  types:  double[][]  and  int  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  0)?  0  :  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj!=  0)?  0  :  jTj.doubleValue();	  double    sum    =(jTj    ==    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	102	None	replace
389	[BUG]  [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  Math.sqrt(jTj.doubleValue());  [CE]  incomparable  types:  double[][]  and  int  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  0)?  0  :  Math.sqrt(jTj.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  0)?  0  :  Math.sqrt(jTj.doubleValue());	  double    sum    =(jTj    ==    0)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  incomparable  types:  double[][]  and  int	102	None	replace
390	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }	  for(int    i    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    max);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	115	None	replace
391	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  min);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  min);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  min);  }	  for(int    i    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	115	None	replace
392	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
393	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  j  <  rows;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }	  for(int    i    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    new    double[cols][jTj.length];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	26	None	replace
394	[BUG]  [BUGGY]  double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i].length);  [CE]  no  suitable  method  found  for  max(int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i].length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  1;  jTj[i][j]  =  Math.max(jTj[i].length);	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    Math.max(jTj[i].length);    	non-compiled	[CE]  no  suitable  method  found  for  max(int)	30	None	replace
395	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i];  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  jTj[i];  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  >  expected	48	None	replace
396	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  cost.doubleValue();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  cost.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj,  cost.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	84	None	replace
397	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  double[][]    jTj    =    new    double[cols][rows];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	109	None	replace
398	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements()  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements()  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getMeasurements().length;        jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements()	  	non-compiled	[CE]  ';'  expected	11	None	add
399	[BUG]  [BUGGY]  jTj[i][j]  =  max;  [CE]  cannot  find  symbol  sum  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  max;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  max;	  jTj[i][j]    =    jTj[i];    	non-compiled	[CE]  cannot  find  symbol  sum	90	None	replace
400	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][0].doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][0].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i][0].doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj[i].doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	57	None	replace
401	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  costEvaluations.doubleValue();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  costEvaluations.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i],  costEvaluations.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj[i].doubleValue();    	non-compiled	[CE]  ';'  expected	57	None	replace
402	[BUG]  [BUGGY]  double  sum  =(i  <  0)?  0  :  jTj,  i.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(i  <  0)?  0  :  jTj,  i.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(i  <  0)?  0  :  jTj,  i.length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.length;    	non-compiled	[CE]  ';'  expected	136	None	replace
403	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i.length  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i.length  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  i.length  +  1;	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.length;    	non-compiled	[CE]  ';'  expected	136	None	replace
404	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValu	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValu    	non-compiled	[CE]  ';'  expected	108	None	replace
405	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[j];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[j];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[j];  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    jTj[j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	91	None	replace
406	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[j];  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[j];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[j];  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    jTj[j];    }    	non-compiled	[CE]  >  expected	91	None	replace
407	[BUG]  [BUGGY]  jTj[i][j]  =  Math.max(max,  jTj);  [CE]  no  suitable  method  found  for  max(int,double[][])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.max(max,  jTj);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.max(max,  jTj);	  jTj[i][j]    =    Math.max(jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double[][])	22	None	replace
408	[BUG]  [BUGGY]  jTj[i][j]  =  Math.max(jacobian[i],  max);  [CE]  cannot  find  symbol  sum  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.max(jacobian[i],  max);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.max(jacobian[i],  max);	  jTj[i][j]    =    Math.max(jTj[i],    max);    	non-compiled	[CE]  cannot  find  symbol  sum	22	None	replace
409	[BUG]  [BUGGY]  jTj[i][j]  =  Math.max(results[i],  max);  [CE]  cannot  find  symbol  results  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.max(results[i],  max);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.max(results[i],  max);	  jTj[i][j]    =    Math.max(jTj[i],    max);    	non-compiled	[CE]  cannot  find  symbol  results	22	None	replace
410	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
411	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[max][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[max][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[max][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
412	[BUG]  [BUGGY]  double  sum  =  Math.sqrt(jTj,  parameters.doubleValue());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  Math.sqrt(jTj,  parameters.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  Math.sqrt(jTj,  parameters.doubleValue());	  double    sum    =    Math.sqrt(jTj.doubleValue());    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
413	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  cols  +  1);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  cols  +  1);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  cols  +  1);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    cols);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	116	None	replace
414	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0L  :  0V;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0L  :  0V;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0L  :  0V;	  double    sum    =(jTj    <    0)?    0L    :    0L;    	non-compiled	[CE]  ';'  expected	9	None	replace
415	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0M  :  0M;  [CE]  :  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0M  :  0M;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0M  :  0M;	  double    sum    =(jTj    <    0)?    0L    :    0L;    	non-compiled	[CE]  :  expected	9	None	replace
416	[BUG]  [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	replace
417	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  new  double[jTj[i].doubleValue();  }  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  new  double[jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  new  double[jTj[i].doubleValue();  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  ']'  expected	33	None	replace
418	[BUG]  [BUGGY]  float  i  =  0;  jTj[i][j]  =  jTj[i].doubleValue();  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  float  i  =  0;  jTj[i][j]  =  jTj[i].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	float  i  =  0;  jTj[i][j]  =  jTj[i].doubleValue();	  int    i    =    0;    jTj[i][j]    =    jTj[i].doubleValue();    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	99	None	replace
419	[BUG]  [BUGGY]  double  sum  =  0;  Double  sum  =  0L;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  Double  sum  =  0L;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0;  Double  sum  =  0L;	  double    sum    =    0L;    Double    sum    =    0L;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	replace
420	[BUG]  [BUGGY]  double  sum  =  0,  max  =  0;  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0,  max  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0,  max  =  0;	  double    sum    =    1;    double    sum    =    1;    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	28	None	replace
421	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getMeasurements();  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getMeasurements();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getMeasurements();	          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]    =    problem.getMeasurements().length;    	non-compiled	[CE]  incompatible  types	12	None	replace
422	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  parameters,  jTj);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  parameters,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  parameters,  jTj);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    jTj,    residuals);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	144	None	replace
423	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
424	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][0].length;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][0].length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i][0].length;	  double    sum    =(jTj    <    0)?    0    :    jTj[i].length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	38	None	replace
425	[BUG]  [BUGGY]  double  sum  =  1;  int  sum  =  2;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  1;  int  sum  =  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  1;  int  sum  =  2;	  double    sum    =    2;    int    sum    =    2;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	71	None	replace
426	[BUG]  [BUGGY]  double  sum  =  1;  int  sum  =  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  1;  int  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  1;  int  sum  =  0;	  double    sum    =    2;    int    sum    =    2;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	71	None	replace
427	[BUG]  [BUGGY]  int  j  =  0;  jTj[i][j]  =  new  double[cols][jTj.length];  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  0;  jTj[i][j]  =  new  double[cols][jTj.length];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  0;  jTj[i][j]  =  new  double[cols][jTj.length];	  int    i    =    0;    jTj[i][j]    =    new    double[cols][jTj.length];    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	112	None	replace
428	[BUG]  [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    Math.max(jTj[i],    max);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	20	None	replace
429	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  i;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	50	None	replace
430	[BUG]  [BUGGY]  int  max  =  Math.min(cols,  jTj.length);  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  max  =  Math.min(cols,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  max  =  Math.min(cols,  jTj.length);	  int    max    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
431	[BUG]  [BUGGY]  int  max  =  Math.min(rows,  jTj.length);  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  max  =  Math.min(rows,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  max  =  Math.min(rows,  jTj.length);	  int    max    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
432	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	68	None	replace
433	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7F  *  residuals.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =  0x7F  *  residuals.length;	  double    sum    =    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
434	[BUG]  [BUGGY]  double  sum  =  0x7F  *  residuals.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7F  *  residuals.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0x7F  *  residuals.length;	  double    sum    =    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
435	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [CE]  >  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    Math.min(jTj[i],    max);    }    	non-compiled	[CE]  >  expected	4	None	replace
436	[BUG]  [BUGGY]  int  j  =  problem.getAllParameters().length;  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  problem.getAllParameters().length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  problem.getAllParameters().length;	  int    j    =    problem.getMeasurements().length;    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	127	None	replace
437	[BUG]  [BUGGY]  double[][]  jacobian  =  problem,  problem.getValues();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  problem,  problem.getValues();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  problem,  problem.getValues();	  double[][]    jacobian    =    jTj,    problem.getValues();    	non-compiled	[CE]  ';'  expected	58	None	replace
438	[BUG]  [BUGGY]  double  sum  =  0;  int  sum  =  1;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  int  sum  =  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0;  int  sum  =  1;	  double    sum    =    1;    int    sum    =    1;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	94	None	replace
439	[BUG]  [BUGGY]  double  sum  =  0;  double  sum  =  0M;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0;  double  sum  =  0M;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0;  double  sum  =  0M;	  double    sum    =    0L;    double    sum    =    0M;    	non-compiled	[CE]  ';'  expected	64	None	replace
440	[BUG]  [BUGGY]  double[][]  jacobian  =  residuals.toArray(new  double[jTj.size()  ]);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  residuals.toArray(new  double[jTj.size()  ]);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  residuals.toArray(new  double[jTj.size()  ]);	  double[][]    jacobian    =    jTj.toArray(new    double[jTj.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
441	[BUG]  [BUGGY]  double[][]  jacobian  =  jTj.toArray(new  double[jTj.size()  -  1]);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  jTj.toArray(new  double[jTj.size()  -  1]);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  jTj.toArray(new  double[jTj.size()  -  1]);	  double[][]    jacobian    =    jTj.toArray(new    double[jTj.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
442	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  residuals);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  residuals);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  cols,  residuals);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    cols);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	17	None	replace
443	[BUG]  [BUGGY]  jTj[i][j]  =  problem.doubleValue();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.doubleValue();	  jTj[i][j]    =    jTj[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
444	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    new    double[cols][jTj.length];    }    	non-compiled	[CE]  >  expected	27	None	replace
445	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jacobian[jTj.doubleValue());  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jacobian[jTj.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.abs(jacobian[jTj.doubleValue());	  double    sum    =(jTj    <    0)?    0    :    Math.abs(jTj.doubleValue());    	non-compiled	[CE]  ']'  expected	56	None	replace
446	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj.doubleValue()  +  1);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj.doubleValue()  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj.doubleValue()  +  1);	  double    sum    =(jTj    <    0)?    0    :    Math.abs(jTj.doubleValue());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	56	None	replace
447	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols.doubleValue();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj[i].doubleValue();    	non-compiled	[CE]  ';'  expected	57	None	replace
448	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  1  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =(jTj  ==  null)?  1  :  jTj.length;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	1	replace
449	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  1  :  jTj.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  1  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  1  :  jTj.length;	  double    sum    =(jTj    ==    null)?    0    :    jTj.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	1	replace
450	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i].doubleValue();    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	replace
451	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i].doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i].doubleValue();    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	replace
452	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
453	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
454	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
455	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    cols    =    new    double[cols][jTj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
456	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  max);  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    max);    }    	non-compiled	[CE]  >  expected	114	None	replace
457	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  >  expected	50	None	replace
458	[BUG]  [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    new    double[cols][jTj.length];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	25	None	replace
459	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  iTj.doubleValue();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  *  iTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jTj.doubleValue()  *  iTj.doubleValue();	  double    sum    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
460	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  jSquare.doubleValue();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  *  jSquare.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jTj.doubleValue()  *  jSquare.doubleValue();	  double    sum    =    jTj.doubleValue()    *    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
461	[BUG]  [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  for(int    j    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	139	None	replace
462	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  cols[i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    cols[i];    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
463	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length  -  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols.length  -  1;	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.length;    	non-compiled	[CE]  ';'  expected	39	None	replace
464	[BUG]  [BUGGY]  double  sum  =  0,  sum  =  0;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0,  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0,  sum  =  0;	  double    sum    =    1;    double    sum    =    1;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	28	None	replace
465	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj,  parameters.doubleValue();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj,  parameters.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0L  :  jTj,  parameters.doubleValue();	  double    sum    =(jTj    ==    null)?    0L    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	6	None	replace
466	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj,  coefficient.doubleValue();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj,  coefficient.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0L  :  jTj,  coefficient.doubleValue();	  double    sum    =(jTj    ==    null)?    0L    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	6	None	replace
467	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][cols].doubleValue();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i];  }	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	142	None	replace
468	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  i);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  i);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  cols,  i);	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols;    	non-compiled	[CE]  ';'  expected	37	None	replace
469	[BUG]  [BUGGY]  double  sum  =  3;  jTj[i][j]  =  Math.max(jTj[i].length);  [CE]  no  suitable  method  found  for  max(int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  3;  jTj[i][j]  =  Math.max(jTj[i].length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  3;  jTj[i][j]  =  Math.max(jTj[i].length);	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    Math.max(jTj[i].length);    	non-compiled	[CE]  no  suitable  method  found  for  max(int)	30	None	replace
470	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  i,  colls);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  i,  colls);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  i,  colls);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    colls);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	19	None	replace
471	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  i);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  i);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  i);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    colls);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	19	None	replace
472	[BUG]  [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    Math.max(jTj[i],    cols);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	97	None	replace
473	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  rows);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  rows);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  rows);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    Math.max(jTj[i],    cols);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	97	None	replace
474	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getAllParameters().doubleValue();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getAllParameters().doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getAllParameters().doubleValue();	  jTj[i][j]    =    jTj[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
475	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getMeasurements()[i].doubleValue();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getMeasurements()[i].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getMeasurements()[i].doubleValue();	  jTj[i][j]    =    jTj[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
476	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj,  jTj.doubleValue());  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj,  jTj.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.abs(jTj,  jTj.doubleValue());	  double    sum    =(jTj    <    0)?    0    :    Math.abs(jTj.doubleValue());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	56	None	replace
477	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  Math.abs(jTj.doubleValue()):  Math.abs(jTj.doubleValue());  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  Math.abs(jTj.doubleValue()):  Math.abs(jTj.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  Math.abs(jTj.doubleValue()):  Math.abs(jTj.doubleValue());	  double    sum    =(jTj    <    0)?    0    :    Math.abs(jTj.doubleValue());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	56	None	replace
478	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jacobian,  jTj.doubleValue());  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jacobian,  jTj.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.abs(jacobian,  jTj.doubleValue());	  double    sum    =(jTj    <    0)?    0    :    Math.abs(jTj.doubleValue());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	56	None	replace
479	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jacobian.doubleValue());  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.abs(jacobian.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.abs(jacobian.doubleValue());	  double    sum    =(jTj    <    0)?    0    :    Math.abs(jTj.doubleValue());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	56	None	replace
480	[BUG]  [BUGGY]  EstimationProblem  sum  =  task.getMask();  [CE]  cannot  find  symbol  task  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  task.getMask();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  task.getMask();	  EstimationProblem    sum    =    ime.getMask();    	non-compiled	[CE]  cannot  find  symbol  task	54	None	replace
481	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  JTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  [CE]  cannot  find  symbol  JTj  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  JTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getAllParameters().length;        jTj[i][j]    =    problem.getAllParameters().length;    JTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;	  	non-compiled	[CE]  cannot  find  symbol  JTj	73	None	add
482	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  int  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  int  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getAllParameters().length;        jTj[i][j]    =    problem.getAllParameters().length;    int  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;	  	non-compiled	[CE]  ']'  expected	73	None	add
483	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[0][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	                jTj[i][j]        =        problem.getAllParameters().length;        jTj[i][j]    =    problem.getAllParameters().length;    jTj[0][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	add
484	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[0][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getAllParameters().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[0][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getAllParameters().length;        jTj[i][j]    =    problem.getAllParameters().length;    jTj[0][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getAllParameters().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	add
485	[BUG]  [BUGGY]  double  sum  =(jTj  <  1)?  1  :  jTj.doubleValue();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  1)?  1  :  jTj.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  1)?  1  :  jTj.doubleValue();	  double    sum    =(jTj    <    0)?    1    :    jTj.doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	140	None	replace
486	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i.length  -  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i.length  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  i.length  -  1;	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.length;    	non-compiled	[CE]  ';'  expected	136	None	replace
487	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i  +  1,  i.length;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  i  +  1,  i.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  i  +  1,  i.length;	  double    sum    =(jTj    <    0)?    0    :    jTj,    i.length;    	non-compiled	[CE]  ';'  expected	136	None	replace
488	[BUG]  [BUGGY]  double  sum  =  jTj.doubleValue()  *  factor;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  jTj.doubleValue()  *  factor;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  jTj.doubleValue()  *  factor;	  double    sum    =    jTj.doubleValue()    *    jSquare;    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
489	[BUG]  [BUGGY]  double[][]  jacobian  =  i.getValues();  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  i.getValues();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  i.getValues();	  double[][]    jacobian    =    residuals.getValues();    	non-compiled	[CE]  int  cannot  be  dereferenced	113	None	replace
490	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].value();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].value();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jTj  =  new  double[cols][cols].value();  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols].remainder;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	121	None	replace
491	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  0,  cols);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  0,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  0,  cols);	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols);    	non-compiled	[CE]  <identifier>  expected	135	None	replace
492	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  rows);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  rows);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  rows);	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols);    	non-compiled	[CE]  ';'  expected	135	None	replace
493	[BUG]  [BUGGY]  double[][]  jacobian  =  problem,  parameters.getValues();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  problem,  parameters.getValues();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  problem,  parameters.getValues();	  double[][]    jacobian    =    problem.getValues();    	non-compiled	[CE]  ';'  expected	59	None	replace
494	[BUG]  [BUGGY]  double[][]  jacobian  =  jTj,  problem.getAllParameters();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  jTj,  problem.getAllParameters();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  jTj,  problem.getAllParameters();	  double[][]    jacobian    =    jTj,    problem.getValues();    	non-compiled	[CE]  ';'  expected	58	None	replace
495	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  /  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj.length  /  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj.length  /  1;	  double    sum    =(jTj    <    0)?    0    :    jTj.length    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	93	None	replace
496	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][j].length;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i][j].length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i][j].length;	  double    sum    =(jTj    <    0)?    0    :    jTj[i].length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	38	None	replace
497	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj[i],  cols);	  double    sum    =(jTj    <    0)?    0    :    jTj[i].length;    	non-compiled	[CE]  ';'  expected	38	None	replace
498	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getMeasurements().length  +  3;  [CE]  cannot  find  symbol  sum  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getMeasurements().length  +  3;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getMeasurements().length  +  3;	  jTj[i][j]    =    problem.getMeasurements().length    +    1;    	non-compiled	[CE]  cannot  find  symbol  sum	10	None	replace
499	[BUG]  [BUGGY]  double  sum  =  2;  jTj[i][j]  =  problem.getMeasurements()[i];  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  2;  jTj[i][j]  =  problem.getMeasurements()[i];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  2;  jTj[i][j]  =  problem.getMeasurements()[i];	  double    sum    =    1;    double    sum    =    1;    jTj[i][j]    =    problem.getMeasurements()[i];    	non-compiled	[CE]  incompatible  types	32	None	replace
500	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj,  parameters.doubleValue();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj,  parameters.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj!=  null)?  0  :  jTj,  parameters.doubleValue();	  double    sum    =(jTj!=    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	85	None	replace
501	[BUG]  [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj,  coefficient.doubleValue();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj!=  null)?  0  :  jTj,  coefficient.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj!=  null)?  0  :  jTj,  coefficient.doubleValue();	  double    sum    =(jTj!=    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	85	None	replace
502	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  columns;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  j  <  columns;  ++i)  {  jTj[i][j]  =  new  double[cols][jTj.length];  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    new    double[cols][jTj.length];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	111	None	replace
503	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  parameters.doubleValue();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  parameters.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj,  parameters.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	84	None	replace
504	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  coefficient.doubleValue();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0  :  jTj,  coefficient.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  ==  null)?  0  :  jTj,  coefficient.doubleValue();	  double    sum    =(jTj    ==    null)?    0    :    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	84	None	replace
505	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	68	None	replace
506	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  0;  j  <  cols;  ++i)  {  jTj[i][j]  =  Math.max(jTj[i],  max);  }	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    Math.max(jTj[i],    max);    }    	non-compiled	[CE]  >  expected	96	None	replace
507	[BUG]  [BUGGY]  jTj[i][j]  =  jTj[j];  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  jTj[j];  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  jTj[j];	  for(int    j    =    0;    j    <    cols;    ++i)    {    jTj[i][j]    =    jTj[j];    }    	non-compiled	[CE]  incompatible  types	91	None	replace
508	[BUG]  [BUGGY]  int  j  =  0;  jTj[i][j]  =  jTj[i].doubleValue();  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  j  =  0;  jTj[i][j]  =  jTj[i].doubleValue();  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  j  =  0;  jTj[i][j]  =  jTj[i].doubleValue();	  int    i    =    0;    jTj[i][j]    =    jTj[i].doubleValue();    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	99	None	replace
509	[BUG]  [BUGGY]  Doppel  sum  =  0;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  Doppel  sum  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	Doppel  sum  =  0;	  double    sum    =    0L;    Doppel    sum    =    0L;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
510	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  dataArea,  residuals);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  dataArea,  residuals);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  dataArea,  residuals);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    residuals);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	89	None	replace
511	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  coefficient);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  coefficient);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  coefficient);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    residuals);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	89	None	replace
512	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  1  :  Math.abs(jTj,  cols);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  1  :  Math.abs(jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  1  :  Math.abs(jTj,  cols);	  double    sum    =(jTj    <    0)?    1    :    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	133	None	replace
513	[BUG]  [BUGGY]  int  max  =  Math.min(cols.length,  jTj.length);  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  int  max  =  Math.min(cols.length,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	int  max  =  Math.min(cols.length,  jTj.length);	  int    max    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
514	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jacobian,  i);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jacobian,  i);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jacobian,  i);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jacobian,    jTj);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	18	None	replace
515	[BUG]  [BUGGY]  jTj[i][j]  =  Math.max(result,  jTj[i],  max);  [CE]  cannot  find  symbol  result  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.max(result,  jTj[i],  max);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.max(result,  jTj[i],  max);	  jTj[i][j]    =    Math.max(jTj[i],    max);    	non-compiled	[CE]  cannot  find  symbol  result	22	None	replace
516	[BUG]  [BUGGY]  jTj[i][j]  =  Math.max(remainder,  jTj[i],  max);  [CE]  cannot  find  symbol  remainder  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.max(remainder,  jTj[i],  max);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.max(remainder,  jTj[i],  max);	  jTj[i][j]    =    Math.max(jTj[i],    max);    	non-compiled	[CE]  cannot  find  symbol  remainder	22	None	replace
517	[BUG]  [BUGGY]  jTj[i][j]  =  Math.min(max,  jTj[i],  jTj);  [CE]  no  suitable  method  found  for  min(int,double[],double[][])  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.min(max,  jTj[i],  jTj);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.min(max,  jTj[i],  jTj);	  jTj[i][j]    =    Math.min(jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double[],double[][])	5	None	replace
518	[BUG]  [BUGGY]  jTj[i][j]  =  Math.min(remainder,  jTj[i],  max);  [CE]  cannot  find  symbol  remainder  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  Math.min(remainder,  jTj[i],  max);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  Math.min(remainder,  jTj[i],  max);	  jTj[i][j]    =    Math.min(jTj[i],    max);    	non-compiled	[CE]  cannot  find  symbol  remainder	5	None	replace
519	[BUG]  [BUGGY]  jTj  =  new  double[cols][jTj].length;  [CE]  incompatible  types  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj  =  new  double[cols][jTj].length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj  =  new  double[cols][jTj].length;	  jTj    =    new    double[cols][jTj.length];    	non-compiled	[CE]  incompatible  types	128	None	replace
520	[BUG]  [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  cols);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  cols);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  j  =  0;  i  <  rows;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  cols);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    cols);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	116	None	replace
521	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  rows);  }  [CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  rows);  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  Math.min(jTj[i],  rows);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    jTj[i][j]    =    Math.min(jTj[i],    cols);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances(EstimationProblem)	116	None	replace
522	[BUG]  [BUGGY]  double[][]  cols  =  problem.getAllParameters();  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  problem.getAllParameters();  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  problem.getAllParameters();  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =	  double[][]    jTj    =    new    double[cols][jtj.length];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i];    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
523	[BUG]  [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  double  Sum  =(jTj  ==  null)?  0L  :  jTj.length;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  ==  null)?  0L  :  jTj.length;  double  Sum  =(jTj  ==  null)?  0L  :  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =(jTj    ==    null)?    0L    :    jTj.length;    double  Sum  =(jTj  ==  null)?  0L  :  jTj.length;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	add
524	[BUG]  [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters()[j];  [CE]  incompatible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  EstimationProblem  sum  =  problem.getAllParameters()[j];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	EstimationProblem  sum  =  problem.getAllParameters()[j];	  EstimationProblem    sum    =    problem.getAllParameters();    	non-compiled	[CE]  incompatible  types	107	None	replace
525	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  0,  cols.doubleValue();  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  jTj,  0,  cols.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  jTj,  0,  cols.doubleValue();	  double    sum    =(jTj    <    0)?    0    :    jTj,    cols.doubleValue();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
526	[BUG]  [BUGGY]  double  sum  =  0x7F;  boolean  result  =  problem.getMeasurements().length  >  maxCostEval;  [CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7F;  boolean  result  =  problem.getMeasurements().length  >  maxCostEval;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double    sum    =    0x7F;    boolean  result  =  problem.getMeasurements().length  >  maxCostEval;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	add
527	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  jTj[i].doubleValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	66	None	replace
528	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  JTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  [CE]  cannot  find  symbol  JTj  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  JTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getMeasurements().length;        jTj[i][j]    =    problem.getMeasurements().length;    JTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurements().length;	  	non-compiled	[CE]  cannot  find  symbol  JTj	11	None	add
529	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	                jTj[i][j]        =        problem.getMeasurements().length;        jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getMeasurements().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
530	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getMeasurements().length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getMeasurements().length;        jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getAllParameters().length;  jTj[i][j]  =  problem.getMeasurements().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
531	[BUG]  [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurement().length;  jTj[i][j]  =  problem.getMeasurements().length;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]          jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurements().length;  jTj[i][j]  =  problem.getMeasurement().length;  jTj[i][j]  =  problem.getMeasurements().length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	                jTj[i][j]        =        problem.getMeasurements().length;        jTj[i][j]    =    problem.getMeasurements().length;    jTj[i][j]  =  problem.getMeasurement().length;  jTj[i][j]  =  problem.getMeasurements().length;	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
532	[BUG]  [BUGGY]  double  sum  =  Math.sqrt(jTj,  iSquare.doubleValue());  [CE]  cannot  find  symbol  iSquare  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  Math.sqrt(jTj,  iSquare.doubleValue());  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  Math.sqrt(jTj,  iSquare.doubleValue());	  double    sum    =    Math.sqrt(jTj.doubleValue());    	non-compiled	[CE]  cannot  find  symbol  iSquare	118	None	replace
533	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getAllParameters()  [i],  cols);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  problem.getAllParameters()  [i],  cols);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  problem.getAllParameters()  [i],  cols);	  jTj[i][j]    =    problem.getAllParameters()    [i];    	non-compiled	[CE]  ';'  expected	24	None	replace
534	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][jTj].length;  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  jTj[i][j]  =  new  double[cols][jTj].length;  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	jTj[i][j]  =  new  double[cols][jTj].length;	  jTj[i][j]    =    new    double[cols][jTj.length];    	non-compiled	[CE]  incompatible  types	138	None	replace
535	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  Math.sqrt(jTj,  cols):  Math.sqrt(jTj,  max);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  Math.sqrt(jTj,  cols):  Math.sqrt(jTj,  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  Math.sqrt(jTj,  cols):  Math.sqrt(jTj,  max);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    max);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	16	None	replace
536	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  0,  cols);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  0,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  0,  cols);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    max);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	16	None	replace
537	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x1F;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =  0x1F;	  double    sum    =    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
538	[BUG]  [BUGGY]  double  sum  =  0x1F;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x1F;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0x1F;	  double    sum    =    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
539	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7F  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	double  sum  =  0x7F  -  1;	  double    sum    =    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
540	[BUG]  [BUGGY]  double  sum  =  0x7F  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =  0x7F  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =  0x7F  -  1;	  double    sum    =    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
541	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0L  :  Math.abs(jTj,  0L);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0L  :  Math.abs(jTj,  0L);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0L  :  Math.abs(jTj,  0L);	  double    sum    =(jTj    <    0)?    0L    :    0L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	9	None	replace
542	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0L  :  Math.sqrt(jTj,  cols);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0L  :  Math.sqrt(jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0L  :  Math.sqrt(jTj,  cols);	  double    sum    =(jTj    <    0)?    0L    :    0L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	9	None	replace
543	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  jSquare,  residuals);  [timeout]  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  jSquare,  residuals);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  jSquare,  residuals);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    jTj,    residuals);    	non-compiled	[timeout]	144	None	replace
544	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(variances,  jTj,  jTj);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(variances,  jTj,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(variances,  jTj,  jTj);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    jTj,    residuals);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	144	None	replace
545	[BUG]  [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  i,  residuals);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  i,  residuals);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double  sum  =(jTj  <  0)?  0  :  Math.sqrt(jTj,  i,  residuals);	  double    sum    =(jTj    <    0)?    0    :    Math.sqrt(jTj,    jTj,    residuals);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	144	None	replace
546	[BUG]  [BUGGY]  double[][]  jacobian  =  jTj,  problem.toArray(new  double[jTj.size()  ]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {      [BUGGY]  double[][]  jacobian  =  jTj,  problem.toArray(new  double[jTj.size()  ]);  [BUGGY]      double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	double[][]  jacobian  =  jTj,  problem.toArray(new  double[jTj.size()  ]);	  double[][]    jacobian    =    jTj.toArray(new    double[jTj.size()    ]);    	non-compiled	[CE]  ';'  expected	143	None	replace
