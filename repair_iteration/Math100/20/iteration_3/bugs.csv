bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length,  ++i)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length,  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length,  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    for(int    i    =    0;    i    <    wm.length,    ++i)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
2	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length,  ++i)  {  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  wm.length,  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length,  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    for(int    i    =    0;    i    <    wm.length,    ++i)    {    	non-compiled	[CE]  '.class'  expected	58	None	replace
3	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i].getResidual());    }    	non-compiled	[CE]  '.class'  expected	16	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i].getResidual());    }    	non-compiled	[CE]  cannot  find  symbol  	16	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i].getResidual());  }  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i].getResidual());  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i].getResidual());  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i].getResidual());    }    	non-compiled	[CE]  cannot  find  symbol  	16	None	replace
6	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem.str.getMeasurements();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  SizedMeasurement[]  measurements  =  problem.str.getMeasurements();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  problem.str.getMeasurements();	  SizedMeasurement[]    measurements    =    problem.str.getSizes();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  if(wm.length    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  '.class'  expected	85	None	replace
8	[BUG]  [BUGGY]  if(result.length  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  if(result.length  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	if(result.length  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  if(wm.length    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  '.class'  expected	85	None	replace
9	[BUG]  [BUGGY]  if(result.length  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  if(result.length  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	if(result.length  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  }	  if(wm.length    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  }  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  }	  if(wm.length    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
11	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(criterion,  factor);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(criterion,  factor);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getRMS(criterion,  factor);	  EstimationProblem    wm    =    problem.getRMS(criterion);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
12	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(criterion,  cost);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(criterion,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getRMS(criterion,  cost);	  EstimationProblem    wm    =    problem.getRMS(criterion);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
13	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(variable);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(variable);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getRMS(variable);	  EstimationProblem    wm    =    problem.getRMS(criterion);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
14	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	53	None	replace
16	[BUG]  [BUGGY]  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result;	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    result;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    residual    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    residual    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    residual    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
20	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  parameter.getSizes();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  SizedMeasurement[]  measurements  =  parameter.getSizes();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  parameter.getSizes();	  SizedMeasurement[]    measurements    =    parameters.getSizes();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
21	[BUG]  [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	62	None	replace
22	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	62	None	replace
23	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	62	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  +  1;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  +  1;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  +  1;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  reciterion  +  1;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  reciterion  +  1;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  reciterion  +  1;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
27	[BUG]  [BUGGY]  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  +  1;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  +  1;	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    residual    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    factor    	non-compiled	[CE]  ';'  expected	76	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  '.class'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    residual    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    factor    	non-compiled	[CE]  '.class'  expected	76	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  ref  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  ref  *  factor  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  ref  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  ref  *  factor  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  ref  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  ref  *  factor	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    residual    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    factor    	non-compiled	[CE]  ';'  expected	76	None	replace
31	[BUG]  [BUGGY]  int  cols  =  wm.length  /  1;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  /  1;	  int    cols    =    wm.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  int  cols  =  wm.length  -  3;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  -  3;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  -  3;	  int    cols    =    wm.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
33	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    	non-compiled	[CE]  >  expected	43	None	replace
34	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	43	None	replace
35	[BUG]  [BUGGY]  int  cols  =  wm.length  /  2  +  1;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  /  2  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  /  2  +  1;	  int    cols    =    wm.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
36	[BUG]  [BUGGY]  int  cols  =  wm.length  /  2  +  wm.length;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  /  2  +  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  /  2  +  wm.length;	  int    cols    =    wm.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
37	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    	non-compiled	[CE]  >  expected	2	None	replace
38	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    	non-compiled	[CE]  >  expected	2	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    3;    ++i)    {    for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  For(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  For(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    3;    ++i)    {    For(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	19	None	add
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    3;    ++i)    {    int  i  =  0;  i  <  wm.length  -  3;  ++i)  {	  	non-compiled	[CE]  >  expected	19	None	add
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    3;    ++i)    {    for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    3;    ++i)    {    for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
44	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	54	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    /    2;    ++i)    {    for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  For(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  For(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    /    2;    ++i)    {    For(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	21	None	add
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    /    2;    ++i)    {    int  i  =  0;  i  <  wm.length  /  2;  ++i)  {	  	non-compiled	[CE]  >  expected	21	None	add
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  /  2;  --i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  /  2;  --i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    /    2;    ++i)    {    for(int  i  =  0;  i  <  wm.length  /  2;  --i)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
49	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problems.getMeasurements();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  SizedMeasurement[]  measurements  =  problems.getMeasurements();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  problems.getMeasurements();	  SizedMeasurement[]    measurements    =    problems.getSizes();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
50	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [1];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [1];  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [1];	  EstimationProblem    wm    =    problem.getMeasurements()    [0];    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
51	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [2];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [2];  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [2];	  EstimationProblem    wm    =    problem.getMeasurements()    [0];    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
52	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [0],  criterion);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [0],  criterion);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [0],  criterion);	  EstimationProblem    wm    =    problem.getMeasurements()    [0];    	non-compiled	[CE]  ';'  expected	91	None	replace
53	[BUG]  [BUGGY]  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;	  int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.length;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
54	[BUG]  [BUGGY]  long  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  long  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	long  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;	  int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.length;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
55	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  w[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  w[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  w[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.length;    }    	non-compiled	[CE]  >  expected	65	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result  *  wm  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result  *  wm  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result  *  wm	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    wm    	non-compiled	[CE]  ';'  expected	37	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  ref  *  wm  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  ref  *  wm  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  ref  *  wm	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    wm    	non-compiled	[CE]  ';'  expected	37	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  remaining  *  wm  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  remaining  *  wm  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  remaining  *  wm	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    wm    	non-compiled	[CE]  ';'  expected	37	None	replace
59	[BUG]  [BUGGY]  int  cols  =  wm.length  +  2;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  +  2;	  int    cols    =    wm.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  reciterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  reciterion;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  reciterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  reciterion;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  reciterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  reciterion;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    reciterion;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  reciterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  reciterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  reciterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    reciterion;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMea  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMea  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMea	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    wm    =    wm.getMeasurements    	non-compiled	[CE]  ';'  expected	64	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getM  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getM  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getM	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    wm    =    wm.getMeasurements    	non-compiled	[CE]  ';'  expected	64	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    wm    =    wm.getMeasurements    	non-compiled	[CE]  ';'  expected	64	None	replace
65	[BUG]  [BUGGY]  float  cols  =  wm.length;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  float  cols  =  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	float  cols  =  wm.length;	          int    cols    =    wm.length;    float    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
66	[BUG]  [BUGGY]  double  cols  =  wm.length;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  double  cols  =  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	double  cols  =  wm.length;	          int    cols    =    wm.length;    float    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
67	[BUG]  [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	double  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  >  expected	70	None	replace
68	[BUG]  [BUGGY]  if(wm!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  if(wm!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	if(wm!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  >  expected	70	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm[i].length;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm[i].length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm[i].length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int    i    =    0;    i    <    wm[i].length    +    2;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	35	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm[i].length  +  2;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm[i].length  +  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm[i].length  +  2;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int    i    =    0;    i    <    wm[i].length    +    2;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	35	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm[i].length();  ++i)  {  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm[i].length();  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm[i].length();  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int    i    =    0;    i    <    wm[i].length    +    2;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
72	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    For(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	33	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  variables.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  variables.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  variables.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }	  for(int    i    =    0;    i    <    parameters.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  cannot  find  symbol  	17	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  wm.length  -  1;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	for(int  i  =  1;  i  <  wm.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    for(int    i    =    1;    i    <    wm.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	89	3	replace
75	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  wm.length  -  1;  ++i)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  wm.length  -  1;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  1;  i  <  wm.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    for(int    i    =    1;    i    <    wm.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	89	3	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  int  i  =  0;  i  <  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    	non-compiled	[CE]  >  expected	34	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  int  i  =  0;  i  <  wm.length  +  2;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    	non-compiled	[CE]  >  expected	34	None	replace
78	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm.getSizements();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  SizedMeasurement[]  measurements  =  wm.getSizements();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  wm.getSizements();	  SizedMeasurement[]    measurements    =    problem.getSizements();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
79	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem.getRMS();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  SizedMeasurement[]  measurements  =  problem.getRMS();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  problem.getRMS();	  SizedMeasurement[]    measurements    =    problem.getSizements();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
80	[BUG]  [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	60	None	replace
81	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	Integer  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	60	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2,  ++i)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2,  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  2,  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    for(int    i    =    0;    i    <    wm.length,    ++i)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
83	[BUG]  [BUGGY]  int  cols  =  Math.max(wm.length,  costEvaluations);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  Math.max(wm.length,  costEvaluations);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.max(wm.length,  costEvaluations);	  int    cols    =    Math.min(wm.length,    costEvaluations);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
84	[BUG]  [BUGGY]  int  cols  =  Math.min(wm.length,  costEvaluations  -  1);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  Math.min(wm.length,  costEvaluations  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.min(wm.length,  costEvaluations  -  1);	  int    cols    =    Math.min(wm.length,    costEvaluations);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
85	[BUG]  [BUGGY]  int  cols  =  Math.min(wm.length,  costEvaluations,  criterion);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  Math.min(wm.length,  costEvaluations,  criterion);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.min(wm.length,  costEvaluations,  criterion);	  int    cols    =    Math.min(wm.length,    costEvaluations);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
86	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getMeasurements();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }	  EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
87	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalStateException( " ");  }	  EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
88	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS()  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getRMS()  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getRMS()  +  1;	  EstimationProblem    wm    =    problem.getRMS();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
89	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(),  cost;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(),  cost;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getRMS(),  cost;	  EstimationProblem    wm    =    problem.getRMS();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
90	[BUG]  [BUGGY]  int  cols  =  Math.min(wm.length,  criterion,  cost);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  Math.min(wm.length,  criterion,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.min(wm.length,  criterion,  cost);	  int    cols    =    Math.min(wm.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
91	[BUG]  [BUGGY]  int  cols  =  Math.min(wm.length,  criterion,  costEvaluations);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  Math.min(wm.length,  criterion,  costEvaluations);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.min(wm.length,  criterion,  costEvaluations);	  int    cols    =    Math.min(wm.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
92	[BUG]  [BUGGY]  int  cols  =  Math.min(wm.length,  criterion  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  Math.min(wm.length,  criterion  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.min(wm.length,  criterion  +  1);	  int    cols    =    Math.min(wm.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
93	[BUG]  [BUGGY]  int  cols  =  Math.max(wm.length,  0);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  Math.max(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.max(wm.length,  0);	  int    cols    =    Math.min(wm.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( ". ");  }  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( ". ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ".);    }    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	88	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    3;    ++i)    {    for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  For(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  For(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    3;    ++i)    {    For(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	40	None	add
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    3;    ++i)    {    int  i  =  0;  i  <  wm.length  +  3;  ++i)  {	  	non-compiled	[CE]  >  expected	40	None	add
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  4;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  4;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    3;    ++i)    {    for(int  i  =  0;  i  <  wm.length  +  4;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    3;    ++i)    {    for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  b  =  wm[i].getResidual();  criterion  +=  b[i].getWeight()  *  b.  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  b  =  wm[i].getResidual();  criterion  +=  b[i].getWeight()  *  b.  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  b  =  wm[i].getResidual();  criterion  +=  b[i].getWeight()  *  b.	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    b.    	non-compiled	[CE]  <identifier>  expected	68	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  problem.  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  problem.  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  problem.	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    b.    	non-compiled	[CE]  <identifier>  expected	68	None	replace
102	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	52	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	52	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    criterion    	non-compiled	[CE]  ';'  expected	84	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    criterion    	non-compiled	[CE]  ';'  expected	84	None	replace
106	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	7	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	replace
108	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm.getMeasurements();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  SizedMeasurement[]  measurements  =  wm.getMeasurements();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  wm.getMeasurements();	  SizedMeasurement[]    measurements    =    wm.getSizes();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
109	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm.getRows();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  SizedMeasurement[]  measurements  =  wm.getRows();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  wm.getRows();	  SizedMeasurement[]    measurements    =    wm.getSizes();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i]);  }  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i]);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]    ==    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  cannot  find  symbol  	18	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -1;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -1;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -1;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    -result;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -result;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -result;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -result;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    -result;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
113	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	61	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problem.getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	8	None	replace
115	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	8	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  0,  wm.length;  ++i)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0,  wm.length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0,  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int    i    =    0,    i    <    wm.length    +    2;    ++i)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  wm.length;  ++i)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0,  len  =  wm.length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0,  len  =  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int    i    =    0,    i    <    wm.length    +    2;    ++i)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0,  l  =  wm.length;  ++i)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0,  l  =  wm.length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0,  l  =  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int    i    =    0,    i    <    wm.length    +    2;    ++i)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
119	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0,  j  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	for(int  i  =  0,  j  =  0;  i  <  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int    i    =    0,    i    <    wm.length    +    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	1	replace
120	[BUG]  [BUGGY]  for(int  i  =  0,  j  =  0;  i  <  wm.length;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0,  j  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0,  j  =  0;  i  <  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int    i    =    0,    i    <    wm.length    +    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	1	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  wm.length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	for(int  i  =  1;  i  <  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    for(int    i    =    1;    i    <    wm.length    +    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
122	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  wm.length;  ++i)  {  [FE]  AssertionFailedError  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  wm.length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  1;  i  <  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    for(int    i    =    1;    i    <    wm.length    +    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
123	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem.getStandardMeasurements();  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  SizedMeasurement[]  measurements  =  problem.getStandardMeasurements();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  problem.getStandardMeasurements();	  SizedMeasurement[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  criterion  -  1)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  criterion  -  1)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  1,  criterion  -  1)  {	  for(int    i    =    0;    i    <    wm.length    -    1,    ++i)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  criterion  +  1)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  criterion  +  1)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  1,  criterion  +  1)  {	  for(int    i    =    0;    i    <    wm.length    -    1,    ++i)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  /  ';'  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  /  ';'  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  /  ';'	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    &    ';'    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
127	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  ';'  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  ';'  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  ';'	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    &    ';'    	non-compiled	[CE]  '.class'  expected	74	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  jacobianEvaluations  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  jacobianEvaluations  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  jacobianEvaluations	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    &    ';'    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
129	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getMeasurements();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
130	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
131	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	63	None	replace
132	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  0;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length;  int  wm.length  =  0;	          int    cols    =    wm.length;    int    wm.length;    	non-compiled	[CE]  ';'  expected	78	None	replace
133	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  wm.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  parameters.length;  int  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  parameters.length;  int  wm.length;	          int    cols    =    wm.length;    int    wm.length;    	non-compiled	[CE]  ';'  expected	78	None	replace
134	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    	non-compiled	[CE]  >  expected	55	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    wm    =    wm.getMeasurements()    	non-compiled	[CE]  ';'  expected	30	None	replace
136	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRsidual()  +  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getRsidual()  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getRsidual()  +  1;	  EstimationProblem    wm    =    problem.getRsidual();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
137	[BUG]  [BUGGY]  Int  cols  =  wm.length;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  Int  cols  =  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	Int  cols  =  wm.length;	          int    cols    =    wm.length;    Int    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
138	[BUG]  [BUGGY]  Integer  cols  =  wm.length;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  Integer  cols  =  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	Integer  cols  =  wm.length;	          int    cols    =    wm.length;    Integer    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
139	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	83	None	replace
140	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  *  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  *  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  *  1;	  EstimationProblem    wm    =    problem.getMeasurements()    +    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    4;    ++i)    {    for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  For(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  For(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    4;    ++i)    {    For(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	26	None	add
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    4;    ++i)    {    int  i  =  0;  i  <  wm.length  -  4;  ++i)  {	  	non-compiled	[CE]  >  expected	26	None	add
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  5;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  5;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    4;    ++i)    {    for(int  i  =  0;  i  <  wm.length  -  5;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  4;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  4;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    4;    ++i)    {    for(int  i  =  0;  i  <  wm.length  +  4;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
146	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  cols.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  cols.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length;  int  wm.length  =  cols.length;	          int    cols    =    wm.length;    int    wm.length    =    wm.length;    	non-compiled	[CE]  ';'  expected	49	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  int  i  =  0;  ++i)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  int  i  =  0;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  int  i  =  0;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    int    i    =    0;    ++i)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  int  i  =  0;  ++i)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  int  i  =  0;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  int  i  =  0;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    int    i    =    0;    ++i)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
149	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	53	None	replace
150	[BUG]  [BUGGY]  int  cols  =  wm.length  -  1  +  cost;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  -  1  +  cost;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  -  1  +  cost;	  int    cols    =    wm.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    criterion;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  b  =  wm[i].getResidual();  criterion  +=  b[i].getWeight()  *  b  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  b  =  wm[i].getResidual();  criterion  +=  b[i].getWeight()  *  b  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  b  =  wm[i].getResidual();  criterion  +=  b[i].getWeight()  *  b	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    b.    	non-compiled	[CE]  ';'  expected	68	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  b  =  wm[i].getResidual();  criterion  +=  b[i].getWeight()  *  factor;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  b  =  wm[i].getResidual();  criterion  +=  b[i].getWeight()  *  factor;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  b  =  wm[i].getResidual();  criterion  +=  b[i].getWeight()  *  factor;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    b.    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i],  cost);  }  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i],  cost);  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i],  cost);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]    ==    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  cannot  find  symbol  	18	None	replace
155	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i]);  }  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i]);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]    ==    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  '.class'  expected	18	None	replace
156	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(problem);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(problem);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getRMS(problem);	  EstimationProblem    wm    =    problem.getRMS(criterion);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
157	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [0],  cost);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [0],  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [0],  cost);	  EstimationProblem    wm    =    problem.getMeasurements()    [0];    	non-compiled	[CE]  ';'  expected	91	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  factor  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  factor  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  factor  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    residual    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    factor    	non-compiled	[CE]  ';'  expected	76	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  result  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  result  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  result  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    residual    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    factor    	non-compiled	[CE]  ';'  expected	76	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasure  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasure  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasure	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    wm    =    wm.getMeasurements()    	non-compiled	[CE]  ';'  expected	30	None	replace
161	[BUG]  [BUGGY]  int  cols  =  wm.length  -  2  +  costEvaluations;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  -  2  +  costEvaluations;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  -  2  +  costEvaluations;	  int    cols    =    wm.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
162	[BUG]  [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	if(result!=  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  if(wm.length    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  '.class'  expected	85	None	replace
163	[BUG]  [BUGGY]  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	  if(wm.length    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  '.class'  expected	85	None	replace
164	[BUG]  [BUGGY]  int  cols  =  wm.length  +  1;  float  cols  =  wm.length;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  +  1;  float  cols  =  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  +  1;  float  cols  =  wm.length;	          int    cols    =    wm.length;    float    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  For(int  i  =  0;  i  <  wm.length;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  For(int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  For(int  i  =  0;  i  <  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    For(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	33	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  For(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  For(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  For(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    For(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	33	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  For(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  For(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  For(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    For(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	33	None	replace
168	[BUG]  [BUGGY]  int  cols  =  wm.length  *  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  *  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  *  1;	  int    cols    =    wm.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  c  =  wm[i].getResidual();  criterion  +=  c[i].getWeight()  *  criterion  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  c  =  wm[i].getResidual();  criterion  +=  c[i].getWeight()  *  criterion  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  c  =  wm[i].getResidual();  criterion  +=  c[i].getWeight()  *  criterion	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    criterion    	non-compiled	[CE]  ';'  expected	84	None	replace
170	[BUG]  [BUGGY]  int  cols  =  wm.length  -  1;  int  wm.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  -  1;  int  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  -  1;  int  wm.length;	          int    cols    =    wm.length;    int    wm.length;    	non-compiled	[CE]  ';'  expected	78	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  *  wm  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  *  wm  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  *  wm	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    wm    	non-compiled	[CE]  ';'  expected	37	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  criterion  ++i)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  criterion  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  1,  criterion  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    1,    ++i)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  criterion++)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  criterion++)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  1,  criterion++)  {	  for(int    i    =    0;    i    <    wm.length    -    1,    ++i)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
174	[BUG]  [BUGGY]  int  cols  =  Math.min(wm.length,  cost);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  Math.min(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.min(wm.length,  cost);	  int    cols    =    Math.min(wm.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  /  3;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  /  3;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    /    2;    ++i)    {    for(int  i  =  0;  i  <  wm.length  /  3;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  *  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  *  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    /    2;    ++i)    {    for(int  i  =  0;  i  <  wm.length  *  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
177	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  wm.length  +  1;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  wm.length  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length;  int  wm.length  =  wm.length  +  1;	          int    cols    =    wm.length;    int    wm.length    =    wm.length;    	non-compiled	[CE]  ';'  expected	49	None	replace
178	[BUG]  [BUGGY]  int  cols  =  wm.length  -  1;  int  wm.length  =  wm.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  -  1;  int  wm.length  =  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  -  1;  int  wm.length  =  wm.length;	          int    cols    =    wm.length;    int    wm.length    =    wm.length;    	non-compiled	[CE]  ';'  expected	49	None	replace
179	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm.getResidual();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  SizedMeasurement[]  measurements  =  wm.getResidual();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  wm.getResidual();	  SizedMeasurement[]    measurements    =    wm.getSizes();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0,  i  <  wm.length;  ++i)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0,  i  <  wm.length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0,  i  <  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int    i    =    0,    i    <    wm.length    +    2;    ++i)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0,  l  <  wm.length;  ++i)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0,  l  <  wm.length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0,  l  <  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int    i    =    0,    i    <    wm.length    +    2;    ++i)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    3;    ++i)    {    for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
183	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  >  expected	70	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  int  i  =  0;  i  <  wm.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    	non-compiled	[CE]  >  expected	2	None	replace
185	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  parameters.getMeasurements();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  SizedMeasurement[]  measurements  =  parameters.getMeasurements();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  parameters.getMeasurements();	  SizedMeasurement[]    measurements    =    parameters.getSizes();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
186	[BUG]  [BUGGY]  int  cols  =  wm.length  +  1;  Int  cols  =  wm.length;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  +  1;  Int  cols  =  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  +  1;  Int  cols  =  wm.length;	          int    cols    =    wm.length;    Int    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    residual    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
188	[BUG]  [BUGGY]  long  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  long  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	long  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.length;    }    	non-compiled	[CE]  >  expected	65	None	replace
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2  +  1;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	for(int  i  =  0;  i  <  wm.length  /  2  +  1;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    /    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
190	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2  +  1;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2  +  1;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  /  2  +  1;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    /    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
191	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  +  1;  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  +  1;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  +  1;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm    +    1;    }    	non-compiled	[CE]  >  expected	75	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  +  2;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  +  2;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  +  2;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  variables.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  variables.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  variables.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i].getResidual());    }    	non-compiled	[CE]  cannot  find  symbol  	16	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  ';  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  ';  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  ';	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    &    ';'    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -  ';'  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -  ';'  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -  ';'	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    &    ';'    	non-compiled	[CE]  ';'  expected	74	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -reciterion;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -reciterion;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -reciterion;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    -result;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -2;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -2;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -2;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    -result;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
198	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm[i].length;  ++i)  {  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  wm[i].length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm[i].length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int    i    =    0;    i    <    wm[i].length    +    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	35	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    For(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	44	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  reciterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  reciterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  reciterion  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    reciterion;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
201	[BUG]  [BUGGY]  int  cols  =  wm.length  /  2  +  costEvaluations;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  /  2  +  costEvaluations;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  /  2  +  costEvaluations;	  int    cols    =    wm.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
202	[BUG]  [BUGGY]  int  cols  =  wm.length  /  2  +  cost;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  /  2  +  cost;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  /  2  +  cost;	  int    cols    =    wm.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  *  wm  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  *  wm  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  *  wm	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    wm    	non-compiled	[CE]  ';'  expected	37	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  *  residual  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  *  residual  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  *  residual	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual    *    wm    	non-compiled	[CE]  ';'  expected	37	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  for(int  i  =  0,  i  <  wm.length  /  2;  ++i)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  for(int  i  =  0,  i  <  wm.length  /  2;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    /    2;    ++i)    {    for(int  i  =  0,  i  <  wm.length  /  2;  ++i)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
206	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  factor;  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  factor;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  factor;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    &    ';'    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  factor;  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  factor;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  factor;	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    &    ';'    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
208	[BUG]  [BUGGY]  int  cols  =  Math.min(wm.length,  criterion  +  1,  wm.length);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  Math.min(wm.length,  criterion  +  1,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.min(wm.length,  criterion  +  1,  wm.length);	  int    cols    =    Math.min(wm.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
209	[BUG]  [BUGGY]  int  cols  =  Math.min(wm.length,  0);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  Math.min(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.min(wm.length,  0);	  int    cols    =    Math.min(wm.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
210	[BUG]  [BUGGY]  int  cols  =  wm.length  -  2  +  cost;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  -  2  +  cost;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  -  2  +  cost;	  int    cols    =    wm.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
211	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  ref  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  ref  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  ref  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    residual    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    factor    	non-compiled	[CE]  ';'  expected	76	None	replace
212	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    wm    =    wm.getMeasurements()    	non-compiled	[CE]  >  expected	30	None	replace
213	[BUG]  [BUGGY]  int  i  =  0;  i  <  parameters.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  parameters.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  parameters.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  >  expected	70	None	replace
214	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length  -  1)  {	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	83	None	replace
215	[BUG]  [BUGGY]  int  wm.length  =  wm.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  wm.length  =  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  wm.length  =  wm.length;	          int    cols    =    wm.length;    int    wm.length    =    wm.length;    	non-compiled	[CE]  ';'  expected	49	None	replace
216	[BUG]  [BUGGY]  int  cols  =  wm.length  -  2;  int  wm.length  =  wm.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  -  2;  int  wm.length  =  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  -  2;  int  wm.length  =  wm.length;	          int    cols    =    wm.length;    int    wm.length    =    wm.length;    	non-compiled	[CE]  ';'  expected	49	None	replace
217	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  wm.length  -  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  wm.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length;  int  wm.length  =  wm.length  -  1;	          int    cols    =    wm.length;    int    wm.length    =    wm.length;    	non-compiled	[CE]  ';'  expected	49	None	replace
218	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getStandardResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getStandardResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
219	[BUG]  [BUGGY]  int  cols  =  wm.length  -  2;  int  wm.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  -  2;  int  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  -  2;  int  wm.length;	          int    cols    =    wm.length;    int    wm.length;    	non-compiled	[CE]  ';'  expected	78	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  measurements.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  measurements.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }	  for(int    i    =    0;    i    <    parameters.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  cannot  find  symbol  	17	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4,  ++i)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4,  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  4,  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    1,    ++i)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
222	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3,  ++i)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3,  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  3,  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    1,    ++i)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  1,  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	61	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    result;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
226	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getStandardResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getStandardResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }	  EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor.  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor.  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor.	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    b.    	non-compiled	[CE]  <identifier>  expected	68	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    residual    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    residual;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    wm    =    wm.getMeasurements    	non-compiled	[CE]  not  a  statement	64	None	replace
230	[BUG]  [BUGGY]  int  cols  =  parameters.length;  Int  cols  =  wm.length;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  parameters.length;  Int  cols  =  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  parameters.length;  Int  cols  =  wm.length;	          int    cols    =    wm.length;    Int    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  -result;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  -result;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  -result;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    -result;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
232	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  wm.length;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  Integer  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	Integer  i  =  0;  i  <  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    	non-compiled	[CE]  >  expected	34	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalStateException( " "));  }  [CE]  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalStateException( " "));  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
234	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problems.getSizements();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  SizedMeasurement[]  measurements  =  problems.getSizements();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  problems.getSizements();	  SizedMeasurement[]    measurements    =    problem.getSizements();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
235	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [criterion];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [criterion];  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [criterion];	  EstimationProblem    wm    =    problem.getMeasurements()    +    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
236	[BUG]  [BUGGY]  int  cols  =  Math.max(wm.length,  criterion);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  Math.max(wm.length,  criterion);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.max(wm.length,  criterion);	  int    cols    =    Math.min(wm.length,    costEvaluations);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
237	[BUG]  [BUGGY]  int  cols  =  Math.min(wm.length,  2);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  Math.min(wm.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.min(wm.length,  2);	  int    cols    =    Math.min(wm.length,    costEvaluations);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ")  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ")  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ")	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ".);    }    	non-compiled	[CE]  	88	None	replace
239	[BUG]  [BUGGY]  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
240	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion;  }  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.length;    }    	non-compiled	[CE]  '.class'  expected	66	None	replace
241	[BUG]  [BUGGY]  int  cols  =  wm.length  -  1;  float  cols  =  wm.length;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  cols  =  wm.length  -  1;  float  cols  =  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  -  1;  float  cols  =  wm.length;	          int    cols    =    wm.length;    float    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
242	[BUG]  [BUGGY]  int  i  =  0;  ++i)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;      [BUGGY]  int  i  =  0;  ++i)  {  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    int    i    =    0;    ++i)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
