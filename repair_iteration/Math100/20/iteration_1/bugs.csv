bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    EstimationProblem  wm  =  problem.getResidual();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]    EstimationProblem  wm  =  problem.getResidual();  [BUGGY]  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	    EstimationProblem  wm  =  problem.getResidual();		non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	41	None	add
2	[BUG]  [BUGGY]    EstimationProblem  wm  =  problem.getMeasurements();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]    EstimationProblem  wm  =  problem.getMeasurements();  [BUGGY]  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	    EstimationProblem  wm  =  problem.getMeasurements();		non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	41	None	add
3	[BUG]  [BUGGY]    SizedMeasurement[]  measurements  =  problem.getSize();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]    SizedMeasurement[]  measurements  =  problem.getSize();  [BUGGY]  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	    SizedMeasurement[]  measurements  =  problem.getSize();		non-compiled	[CE]  cannot  find  symbol	41	None	add
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]    int  cols  =  wm.length;  [BUGGY]  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	    int  cols  =  wm.length;		compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	add
5	[BUG]  [BUGGY]    int  cols  =  wm.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]    int  cols  =  wm.length;  [BUGGY]  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	    int  cols  =  wm.length;		compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	add
6	[BUG]  [BUGGY]    SizedMeasurement[]  measurements  =  problem.getSizes();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]    SizedMeasurement[]  measurements  =  problem.getSizes();  [BUGGY]  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	    SizedMeasurement[]  measurements  =  problem.getSizes();		non-compiled	[CE]  cannot  find  symbol	41	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {	for  (int  i  =  0;  i  <  wm.length;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	40	2	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {	for  (int  i  =  0;  i  <  wm.length;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	40	2	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {	for  (int  i  =  0;  i  <  wm.length;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	40	2	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {	for  (int  i  =  0;  i  <  wm.length;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	40	2	replace
11	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {	for  (int  i  =  0;  i  <  wm.length;  ++i)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	10	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {	for  (int  i  =  0;  i  <  wm.length;  ++i)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	10	replace
13	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [BUGGY]  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	    for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }		non-compiled	[CE]  illegal  start  of  expression	41	None	add
14	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	41	None	add
15	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	41	None	add
16	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()[i]  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()[i]  [BUGGY]  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	    for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()[i]		non-compiled	[CE]  ';'  expected	41	None	add
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {	for  (int  i  =  0;  i  <  wm.length;  ++i)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	10	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {	for  (int  i  =  0;  i  <  wm.length;  ++i)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	10	replace
19	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }  [BUGGY]  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	    for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }		non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	41	None	add
20	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.  [BUGGY]  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	    for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.		non-compiled	[CE]  <identifier>  expected	41	None	add
21	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  [BUGGY]  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	    for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm		non-compiled	[CE]  ';'  expected	41	None	add
