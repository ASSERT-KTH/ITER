bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    int  i  =  0;  i  <  wm.length  +  1;  ++i)  {	  	non-compiled	[CE]  >  expected	17	None	add
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  For(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  For(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    For(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	17	None	add
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  for(int  i  =  1;  i  <  wm.length  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  for(int  i  =  1;  i  <  wm.length  +  1;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    for(int  i  =  1;  i  <  wm.length  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
6	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	14	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	14	None	replace
9	[BUG]  [BUGGY]  int  cols  =  wm.length  -  1;  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  int  cols  =  wm.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  -  1;	      int    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  int  cols  =  wm.length  -  2;  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  int  cols  =  wm.length  -  2;  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  -  2;	      int    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  int  cols  =  wm.length  +  1;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  int  cols  =  wm.length  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  +  1;	      int    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  int  cols  =  Math.min(wm.length,  criterion);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  int  cols  =  Math.min(wm.length,  criterion);  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.min(wm.length,  criterion);	      int    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm.getSizes();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  SizedMeasurement[]  measurements  =  wm.getSizes();  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  wm.getSizes();	      SizedMeasurement[]    measurements    =    problem.getSizes();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problems.getSizes();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  SizedMeasurement[]  measurements  =  problems.getSizes();  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  problems.getSizes();	      SizedMeasurement[]    measurements    =    problem.getSizes();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem.getMeasurements();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  SizedMeasurement[]  measurements  =  problem.getMeasurements();  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  problem.getMeasurements();	      SizedMeasurement[]    measurements    =    problem.getSizes();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i].getResidual());  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  cannot  find  symbol  	13	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  cannot  find  symbol  	13	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i]);  }  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]  ==  null)  {  return  Math.sqrt(variables[i]);  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  cannot  find  symbol  	13	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	8	3	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	8	3	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  /  2;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual;  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual;  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual;  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.length;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual;  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual;  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual;  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.length;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  reciterion;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  reciterion;  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  reciterion;  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.length;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	10	3	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  4;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	10	3	replace
28	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS();  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  EstimationProblem  wm  =  problem.getRMS();  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getRMS();	      EstimationProblem    wm    =    problem.getMeasurements();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
29	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  +  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  +  1;	      EstimationProblem    wm    =    problem.getMeasurements();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    wm    =    wm.getMeasurements()[i]    	non-compiled	[CE]  ';'  expected	16	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()[i]  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()[i]  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements()[i]  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    wm    =    wm.getMeasurements()[i]    	non-compiled	[CE]  ';'  expected	16	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  For(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  For(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    For(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	11	None	add
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    int  i  =  0;  i  <  wm.length  +  2;  ++i)  {	  	non-compiled	[CE]  >  expected	11	None	add
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  for(int  i  =  0;  i  <  wm[i].length  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  for(int  i  =  0;  i  <  wm[i].length  +  2;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int  i  =  0;  i  <  wm[i].length  +  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  for(int  i  =  0,  i  <  wm.length  +  2;  ++i)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  for(int  i  =  0,  i  <  wm.length  +  2;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int  i  =  0,  i  <  wm.length  +  2;  ++i)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  wm  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  wm  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  wm	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm    	non-compiled	[CE]  ';'  expected	21	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -result;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -result;  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  -result;  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
39	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm.getSize();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  SizedMeasurement[]  measurements  =  wm.getSize();  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  wm.getSize();	      SizedMeasurement[]    measurements    =    problem.getSize();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	10	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	10	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    int  i  =  0;  i  <  wm.length  -  2;  ++i)  {	  	non-compiled	[CE]  >  expected	7	None	add
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length,  ++i)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length,  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    for(int  i  =  0;  i  <  wm.length,  ++i)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion;  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion;  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion;  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
48	[BUG]  [BUGGY]      int  cols  =  wm.length;  int  cols  =  wm.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]      int  cols  =  wm.length;  int  cols  =  wm.length;  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	        int    cols    =    wm.length;    int  cols  =  wm.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	4	None	add
49	[BUG]  [BUGGY]      int  cols  =  wm.length;  int  wm.length  =  wm.length;  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]      int  cols  =  wm.length;  int  wm.length  =  wm.length;  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	        int    cols    =    wm.length;    int  wm.length  =  wm.length;	  	non-compiled	[CE]  ';'  expected	4	None	add
50	[BUG]  [BUGGY]      int  cols  =  wm.length;  Integer  cols  =  wm.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]      int  cols  =  wm.length;  Integer  cols  =  wm.length;  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	        int    cols    =    wm.length;    Integer  cols  =  wm.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	4	None	add
51	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	15	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm  ==  null)  {  throw  new  IllegalStateException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	15	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    int  i  =  0;  i  <  wm.length  -  1;  ++i)  {	  	non-compiled	[CE]  >  expected	9	None	add
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	9	None	add
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  wm.length,  ++i)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  wm.length,  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    for(int  i  =  0;  i  <  wm.length,  ++i)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
59	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRsidual();  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  EstimationProblem  wm  =  problem.getRsidual();  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getRsidual();	      EstimationProblem    wm    =    problem.getResidual();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
60	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	15	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	15	None	replace
62	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	14	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	14	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  wm  =  wm.getMeasurements	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    wm    =    wm.getMeasurements()[i]    	non-compiled	[CE]  ';'  expected	16	None	replace
65	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.length;    }    	non-compiled	[CE]  >  expected	19	None	replace
66	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm.length;  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.length;    }    	non-compiled	[CE]  '.class'  expected	19	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  int  i  =  0;  ++i)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  int  i  =  0;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    1;    ++i)    {    int  i  =  0;  ++i)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  b.  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  b.  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  b.	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.    	non-compiled	[CE]  <identifier>  expected	20	None	replace
69	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(criterion);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  EstimationProblem  wm  =  problem.getRMS(criterion);  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getRMS(criterion);	      EstimationProblem    wm    =    problem.getResidual();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
70	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  >  expected	13	None	replace
71	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  if(variables[i]!=  null)  {  return  Math.sqrt(variables[i]);  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    if(variables[i]!=    null)    {    return    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  '.class'  expected	13	None	replace
72	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem.str.getSizes();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  SizedMeasurement[]  measurements  =  problem.str.getSizes();  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  problem.str.getSizes();	      SizedMeasurement[]    measurements    =    problem.getSizes();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  int  cols  =  Math.min(wm.length,  costEvaluations);  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  int  cols  =  Math.min(wm.length,  costEvaluations);  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  Math.min(wm.length,  costEvaluations);	      int    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  ';'  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  ';'  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  &  ';'	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  +  1;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  +  1;  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  wm  +  1;  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  factor	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm    	non-compiled	[CE]  ';'  expected	21	None	replace
77	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem.getSizements();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  SizedMeasurement[]  measurements  =  problem.getSizements();  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  problem.getSizements();	      SizedMeasurement[]    measurements    =    problem.getSize();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
78	[BUG]  [BUGGY]      int  cols  =  wm.length;  int  wm.length;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]      int  cols  =  wm.length;  int  wm.length;  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	        int    cols    =    wm.length;    int  wm.length;	  	non-compiled	[CE]  ';'  expected	4	None	add
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    for(int  i  =  0;  i  <  wm.length  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  +  2;  ++i)  {  for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    for(int  i  =  0;  i  <  wm.length  +  3;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
81	[BUG]  [BUGGY]  int  cols  =  wm.length  /  2;  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  int  cols  =  wm.length  /  2;  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	int  cols  =  wm.length  /  2;	      int    cols    =    wm.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result;  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result;  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  result;  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm.    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
83	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  [CE]  '.class'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    wm.length    +    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  criterion	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm    	non-compiled	[CE]  ';'  expected	21	None	replace
85	[BUG]  [BUGGY]  if(wm.length  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  if(wm.length  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	if(wm.length  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  wm  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    wm    =    wm[i].getResidual();    criterion    +=    wm[i].getWeight()    *    wm    	non-compiled	[CE]  '.class'  expected	21	None	replace
86	[BUG]  [BUGGY]      int  cols  =  wm.length;  Int  cols  =  wm.length;  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]      int  cols  =  wm.length;  Int  cols  =  wm.length;  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	        int    cols    =    wm.length;    Int  cols  =  wm.length;	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
87	[BUG]  [BUGGY]      int  cols  =  wm.length;  float  cols  =  wm.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]      int  cols  =  wm.length;  float  cols  =  wm.length;  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	        int    cols    =    wm.length;    float  cols  =  wm.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	4	None	add
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  wm  =  problem.getResidual();  if(wm!=  null)  {  throw  new  IllegalStateException( " ".);  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    wm    =    problem.getResidual();    if(wm!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  for(int  i  =  1;  i  <  wm.length  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  for(int  i  =  1;  i  <  wm.length  -  1;  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    for(int  i  =  1;  i  <  wm.length  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
90	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  parameters.getSizes();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  SizedMeasurement[]  measurements  =  parameters.getSizes();  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	SizedMeasurement[]  measurements  =  parameters.getSizes();	      SizedMeasurement[]    measurements    =    problem.getSizes();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
91	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [0];  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [0];  [BUGGY]    for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [0];	      EstimationProblem    wm    =    problem.getMeasurements();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  ++i)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  ++i)  {  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	for(int  i  =  0;  i  <  wm.length  -  1,  ++i)  {	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
