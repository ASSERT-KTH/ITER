bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  cols  =  1;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  1;	  int    cols    =    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
2	[BUG]  [BUGGY]  int  cols  =  getColumnsCount();  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  getColumnsCount();  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  getColumnsCount();	  int    cols    =    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
3	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(results.length,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(results.length,  parameters.length  -  1);	  int    rows    =    Math.min(results.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
4	[BUG]  [BUGGY]  int  rows  =  Math.max(results.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(results.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(results.length,  parameters.length);	  int    rows    =    Math.min(results.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
5	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  results.length);  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(parameters.length,  results.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(parameters.length,  results.length);	  int    rows    =    Math.min(results.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
6	[BUG]  [BUGGY]  Arrays.fill(runs,  0,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(runs,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(runs,  0,  cols);	  Arrays.fill(runs,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	105	None	replace
7	[BUG]  [BUGGY]  Arrays.fill(runs,  1);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(runs,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(runs,  1);	  Arrays.fill(runs,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	105	None	replace
8	[BUG]  [BUGGY]  Arrays.fill(remainings,  0,  residuals.length);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(remainings,  0,  residuals.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  0,  residuals.length);	  Arrays.fill(remainings,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	104	None	replace
9	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  residuals.length);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  residuals.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  residuals.length);	  Arrays.fill(remainings,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	104	None	replace
10	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(this.results,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(this.results,  0,  cols);	  Arrays.fill(this.results,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
11	[BUG]  [BUGGY]  Arrays.fill(this.results,  1);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(this.results,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(this.results,  1);	  Arrays.fill(this.results,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
12	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  this.rows);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(this.results,  0,  this.rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(this.results,  0,  this.rows);	  Arrays.fill(this.results,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
13	[BUG]  [BUGGY]  Arrays.fill(cols,  index);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  index);	  Arrays.fill(rows,    index);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
14	[BUG]  [BUGGY]  Arrays.fill(rows,  index  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  index  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  index  +  1);	  Arrays.fill(rows,    index);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
15	[BUG]  [BUGGY]  Arrays.fill(index,  rows);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(index,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(index,  rows);	  Arrays.fill(rows,    index);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
16	[BUG]  [BUGGY]  Arrays.fill(colons,  index);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(colons,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(colons,  index);	  Arrays.fill(rows,    index);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
17	[BUG]  [BUGGY]  int  cols  =  parameters.length  /  2;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  parameters.length  /  2;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length  /  2;	  int    cols    =    parameters.length    -    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
18	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  int  rows  =  parameters.length;  int  fields  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  int  rows  =  parameters.length;  int  fields  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    fields    =    parameters.length;    int  rows  =  parameters.length;  int  fields  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	16	None	add
19	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  Integer  rows  =  parameters.length;  int  fields  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  Integer  rows  =  parameters.length;  int  fields  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    fields    =    parameters.length;    Integer  rows  =  parameters.length;  int  fields  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	16	None	add
20	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  int  row  =  parameters.length;  int  fields  =  parameters.length;  [CE]  variable  fields  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  int  row  =  parameters.length;  int  fields  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    fields    =    parameters.length;    int  row  =  parameters.length;  int  fields  =  parameters.length;	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  updateJacobian()	16	None	add
21	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  int  rows  =  variables.length;  int  fields  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  int  rows  =  variables.length;  int  fields  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    fields    =    parameters.length;    int  rows  =  variables.length;  int  fields  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	16	None	add
22	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  cols);	  Arrays.fill(rows,    0,    rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
23	[BUG]  [BUGGY]  Arrays.fill(colons,  0,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(colons,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(colons,  0,  cols);	  Arrays.fill(rows,    0,    rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
24	[BUG]  [BUGGY]  int  rows  =  Math.min(periods.length,  cols.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(periods.length,  cols.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(periods.length,  cols.length  -  1);	  int    rows    =    Math.min(periods.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
25	[BUG]  [BUGGY]  int  rows  =  Math.min(periods.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(periods.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(periods.length,  parameters.length);	  int    rows    =    Math.min(periods.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
26	[BUG]  [BUGGY]  int  rows  =  Math.min(periods.length,  index);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(periods.length,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(periods.length,  index);	  int    rows    =    Math.min(periods.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
27	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  jacobianEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  jacobianEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  jacobianEvaluations);	          Arrays.fill(jacobian,    0);    Arrays.fill(rows,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
28	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(jacobian,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(jacobian,  0,  cols);	          Arrays.fill(jacobian,    0);    Arrays.fill(rows,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
29	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(jacobian,  0,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(jacobian,  0,  rows);	          Arrays.fill(jacobian,    0);    Arrays.fill(rows,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
30	[BUG]  [BUGGY]  Arrays.fill(rows,  1);  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  1);	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
31	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1);  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(jacobian,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(jacobian,  1);	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
32	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  results.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(cols.length,  results.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(cols.length,  results.length);	  int    rows    =    Math.min(results.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
33	[BUG]  [BUGGY]  int  rows  =  Math.min(rows.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(rows.length,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(rows.length,  cols.length);	  int    rows    =    Math.min(results.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
34	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  index);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(results.length,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(results.length,  index);	  int    rows    =    Math.min(results.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
35	[BUG]  [BUGGY]  int  rows  =  getRowCount()  /  cols;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  getRowCount()  /  cols;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  getRowCount()  /  cols;	  int    rows    =    getRowCount()    -    cols;    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
36	[BUG]  [BUGGY]  int  rows  =  getRowCount()  *  cols;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  getRowCount()  *  cols;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  getRowCount()  *  cols;	  int    rows    =    getRowCount()    -    cols;    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
37	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  columns  =  cols.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length;  int  columns  =  cols.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length;  int  columns  =  cols.length;	          int    rows    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
38	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  columns  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length;  int  columns  =  0;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length;  int  columns  =  0;	          int    rows    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
39	[BUG]  [BUGGY]  int  rows  =  parameters.length  -  1;  int  columns  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length  -  1;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length  -  1;  int  columns  =  parameters.length;	          int    rows    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
40	[BUG]  [BUGGY]  int  rows  =  cols.length;  int  columns  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  cols.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  cols.length;  int  columns  =  parameters.length;	          int    rows    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
41	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
42	[BUG]  [BUGGY]  if(rows  ==  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  if(rows  ==  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	if(rows  ==  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
43	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0,  cols);  Arrays.fill(jacobian,  0);  }  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0,  cols);  Arrays.fill(jacobian,  0);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  0,  cols);  Arrays.fill(jacobian,  0);  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
44	[BUG]  [BUGGY]  int  rows  =  this.  measurements.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  this.  measurements.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  this.  measurements.length;	  int    rows    =    measurements.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
45	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(this.measurements);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(this.measurements);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(this.measurements);	  int    rows    =    Arrays.asList(measurements);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
46	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(maxCostEval);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(maxCostEval);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(maxCostEval);	  int    rows    =    Arrays.asList(measurements);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
47	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(parameters);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(parameters);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(parameters);	  int    rows    =    Arrays.asList(measurements);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
48	[BUG]  [BUGGY]  Integer  cols  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Integer  cols  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Integer  cols  =  parameters.length;	          int    cols    =    parameters.length;    Integer    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
49	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  cols,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  cols,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  cols,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
50	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  rows,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  rows,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  rows,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
51	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  cols,  index);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  cols,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  cols,  index);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
52	[BUG]  [BUGGY]  Arrays.fill(index,  0,  cols,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(index,  0,  cols,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(index,  0,  cols,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
53	[BUG]  [BUGGY]  Int  rows  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Int  rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Int  rows  =  parameters.length;	          int    rows    =    parameters.length;    Int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
54	[BUG]  [BUGGY]  int  rows  =  cols.length;  Int  rows  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  cols.length;  Int  rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  cols.length;  Int  rows  =  parameters.length;	          int    rows    =    parameters.length;    Int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
55	[BUG]  [BUGGY]  int  rows  =  getColsCount();  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  getColsCount();  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  getColsCount();	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
56	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(random,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(random,  parameters.length  -  1);	  int    rows    =    Math.min(random,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
57	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(random,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(random,  parameters.length  +  1);	  int    rows    =    Math.min(random,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
58	[BUG]  [BUGGY]  int  rows  =  Math.max(random,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(random,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(random,  parameters.length);	  int    rows    =    Math.min(random,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
59	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	add
60	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	add
61	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0,  0);  Arrays.fill(jacobian,  0);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0,  0);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	41	None	add
62	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jocobian,  0);  Arrays.fill(jacobian,  0);  [CE]  cannot  find  symbol  jocobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jocobian,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(jocobian,  0);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	41	None	add
63	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(cols,  0);  Arrays.fill(jacobian,  0);  [CE]  no  suitable  method  found  for  fill(int,int)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(cols,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(cols,  0);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int)	41	None	add
64	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(i,  0);  Arrays.fill(jacobian,  0);  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(i,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(i,  0);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  cannot  find  symbol  i	41	None	add
65	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  parameters.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	73	None	add
66	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  Integer  cols  =  parameters.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  Integer  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    Integer  cols  =  parameters.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	73	None	add
67	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  variables.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  variables.length;  int  rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    int  cols  =  variables.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	73	None	add
68	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(this.bewertungen);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(this.bewertungen);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(this.bewertungen);	  int    rows    =    Arrays.asList(bewertungen);    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
69	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(cols);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(cols);	  int    rows    =    Arrays.asList(bewertungen);    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
70	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(bewertungen,  parameters);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(bewertungen,  parameters);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(bewertungen,  parameters);	  int    rows    =    Arrays.asList(bewertungen);    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  index;  i++)  {  [CE]  cannot  find  symbol  index  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  index;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  measurements.length;  i  <  index;  i++)  {	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int    i    =    0,    index    =    0;    i    <    measurement.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	30	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  measurements.length;  i  <  len;  i++)  {  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  len  =  measurements.length;  i  <  len;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  len  =  measurements.length;  i  <  len;  i++)  {	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int    i    =    0,    index    =    0;    i    <    measurement.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	30	None	replace
73	[BUG]  [BUGGY]  int  rows  =  Math.min(randoms.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(randoms.length,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(randoms.length,  cols.length);	  int    rows    =    Math.min(randoms.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
74	[BUG]  [BUGGY]  int  rows  =  Math.min(randoms.length,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(randoms.length,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(randoms.length,  parameters.length  -  1);	  int    rows    =    Math.min(randoms.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
75	[BUG]  [BUGGY]  int  rows  =  Math.max(randoms.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(randoms.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(randoms.length,  parameters.length);	  int    rows    =    Math.min(randoms.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
76	[BUG]  [BUGGY]  int  rows  =  Math.min(randoms.length,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(randoms.length,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(randoms.length,  parameters.length  +  1);	  int    rows    =    Math.min(randoms.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
77	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(results,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(results,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(results,  parameters.length  +  1);	  int    rows    =    Arrays.copyOf(results,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
78	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(results,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(results,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(results,  measurements.length);	  int    rows    =    Arrays.copyOf(results,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
79	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(results,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(results,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(results,  parameters.length  -  1);	  int    rows    =    Arrays.copyOf(results,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
80	[BUG]  [BUGGY]  int  cols  =  measurements.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  measurements.length  -  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  measurements.length  -  1;	  int    cols    =    measurements.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
81	[BUG]  [BUGGY]  int  cols  =  this.  measurements.length;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  this.  measurements.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  this.  measurements.length;	  int    cols    =    measurements.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
82	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  cols.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(results.length,  cols.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(results.length,  cols.length  -  1);	  int    rows    =    Math.min(cols.length,    residuals.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
83	[BUG]  [BUGGY]  int  rows  =  Math.max(results.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(results.length,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(results.length,  cols.length);	  int    rows    =    Math.min(cols.length,    residuals.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0,  j  =  0;  i  <  cols.length;  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  j  =  0;  i  <  cols.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  j  =  0;  i  <  cols.length;  i++)  {	  for(int    i    =    0,    j    =    0;    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	53	None	replace
85	[BUG]  [BUGGY]  int  rows  =  Math.min(index,  cols.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(index,  cols.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(index,  cols.length  -  1);	  int    rows    =    Math.min(index,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
86	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  index);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(cols.length,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(cols.length,  index);	  int    rows    =    Math.min(index,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
87	[BUG]  [BUGGY]  int  rows  =  Math.max(index,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(index,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(index,  cols.length);	  int    rows    =    Math.min(index,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
88	[BUG]  [BUGGY]  Arrays.fill(random,  0);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(random,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(random,  0);	          Arrays.fill(jacobian,    0);    Arrays.fill(coefficients,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
89	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(dataset,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(dataset,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(dataset,  parameters.length);	  int    rows    =    Arrays.copyOf(parameters,    dataset.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
90	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  dataset.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  dataset.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(remainings,  dataset.length);	  int    rows    =    Arrays.copyOf(parameters,    dataset.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
91	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(results,  dataset.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(results,  dataset.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(results,  dataset.length);	  int    rows    =    Arrays.copyOf(parameters,    dataset.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
92	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(random,  dataset.length);  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(random,  dataset.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(random,  dataset.length);	  int    rows    =    Arrays.copyOf(parameters,    dataset.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
93	[BUG]  [BUGGY]  Arrays.fill(index,  0,  rows);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(index,  0,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(index,  0,  rows);	  Arrays.fill(index,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
94	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  index);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  index);	  Arrays.fill(index,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
95	[BUG]  [BUGGY]  Arrays.fill(index,  0,  cols  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(index,  0,  cols  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(index,  0,  cols  +  1);	  Arrays.fill(index,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
96	[BUG]  [BUGGY]  if(this.results!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  }  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  if(this.results!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	if(this.results!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  }	          Arrays.fill(jacobian,    0);    Arrays.fill(this.results,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
97	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  jacobianEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(this.results,  0,  jacobianEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(this.results,  0,  jacobianEvaluations);	          Arrays.fill(jacobian,    0);    Arrays.fill(this.results,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
98	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  null);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(this.results,  0,  null);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(this.results,  0,  null);	          Arrays.fill(jacobian,    0);    Arrays.fill(this.results,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
99	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(this.results);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(this.results);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(this.results);	  int    rows    =    Arrays.asList(results);    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
100	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(results,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(results,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(results,  cols);	  int    rows    =    Arrays.asList(results);    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
101	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(results,  parameters);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(results,  parameters);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(results,  parameters);	  int    rows    =    Arrays.asList(results);    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
102	[BUG]  [BUGGY]  For(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  For(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	For(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int    i    =    0,    cols    =    0;    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	27	None	replace
103	[BUG]  [BUGGY]  int  cols  =  parameters.length  /  1;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  parameters.length  /  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length  /  1;	  int    cols    =    parameters.length    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  this.rows.length;  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  this.rows.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  this.rows.length;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    rows.length;    i++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	86	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  1;  i  <  measurements.length;  i++)  {  [CE]  cannot  find  symbol  index  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  1;  i  <  measurements.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  1;  i  <  measurements.length;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	1	None	replace
106	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(this.remainings,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(this.remainings,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(this.remainings,  cols);	  int    rows    =    Arrays.asList(this.remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
107	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(this.remainings,  parameters);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(this.remainings,  parameters);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(this.remainings,  parameters);	  int    rows    =    Arrays.asList(this.remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
108	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(this.remainings,  measurements);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(this.remainings,  measurements);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(this.remainings,  measurements);	  int    rows    =    Arrays.asList(this.remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
109	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(this.remainings,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(this.remainings,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(this.remainings,  measurements.length);	  int    rows    =    Arrays.asList(this.remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
110	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(cols.length,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(cols.length,  measurements.length);	  int    rows    =    Math.min(measures.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
111	[BUG]  [BUGGY]  int  rows  =  Math.min(measures.length,  index);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(measures.length,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(measures.length,  index);	  int    rows    =    Math.min(measures.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
112	[BUG]  [BUGGY]  int  rows  =  Math.max(measures.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(measures.length,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(measures.length,  cols.length);	  int    rows    =    Math.min(measures.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  errors.length;  i  <  measurements.length;  i++)  {  [CE]  cannot  find  symbol  errors  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  errors.length;  i  <  measurements.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  errors.length;  i  <  measurements.length;  i++)  {	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int    i    =    0,    error.length());    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  errors	28	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  errors.length();  i  <  index;  i++)  {  [CE]  cannot  find  symbol  errors  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  index  =  errors.length();  i  <  index;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  index  =  errors.length();  i  <  index;  i++)  {	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int    i    =    0,    error.length());    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  errors	28	None	replace
115	[BUG]  [BUGGY]  int  rows  =  Math.min(measurements.length,  residuals.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(measurements.length,  residuals.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(measurements.length,  residuals.length);	  int    rows    =    Math.min(remainders.length,    measurements.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
116	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  measurements.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(remainders.length,  measurements.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(remainders.length,  measurements.length  -  1);	  int    rows    =    Math.min(remainders.length,    measurements.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i];  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i];	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters.length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	106	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].length;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].length;	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters.length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	106	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  parameters[index].length;  [CE]  cannot  find  symbol  length  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  parameters[index].length;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  parameters[index].length;	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol  length	106	None	replace
120	[BUG]  [BUGGY]  int  rows  =  this.maxCostEval?  getRowCount()  :  0;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  this.maxCostEval?  getRowCount()  :  0;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  this.maxCostEval?  getRowCount()  :  0;	  int    rows    =    getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
121	[BUG]  [BUGGY]  int  rows  =  this.maxCostEval;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  this.maxCostEval;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  this.maxCostEval;	  int    rows    =    getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
122	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(parameters,  cols.length);	  int    rows    =    Arrays.copyOf(parameters,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
123	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(parameters,  parameters.length  +  1);	  int    rows    =    Arrays.copyOf(parameters,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
124	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(cols.length,  cols.length  -  1);	  int    rows    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
125	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(cols.length,  cols.length  +  1);	  int    rows    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
126	[BUG]  [BUGGY]  int  rows  =  Math.max(cols.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(cols.length,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(cols.length,  cols.length);	  int    rows    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
127	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  lines  =  cols.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length;  int  lines  =  cols.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length;  int  lines  =  cols.length;	          int    rows    =    parameters.length;    int    lines    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
128	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  lines  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length;  int  lines  =  0;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length;  int  lines  =  0;	          int    rows    =    parameters.length;    int    lines    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
129	[BUG]  [BUGGY]  int  rows  =  parameters.length  -  1;  int  lines  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length  -  1;  int  lines  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length  -  1;  int  lines  =  parameters.length;	          int    rows    =    parameters.length;    int    lines    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
130	[BUG]  [BUGGY]  int  rows  =  cols.length;  int  lines  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  cols.length;  int  lines  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  cols.length;  int  lines  =  parameters.length;	          int    rows    =    parameters.length;    int    lines    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
131	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  index,  rows);  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  index,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  index,  rows);	  Arrays.fill(rows,    0,    index,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
132	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  rows,  index);  [CE]  class,  interface,  or  enum  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  rows,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  rows,  index);	  Arrays.fill(rows,    0,    index,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
133	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  index,  jacobianEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  index,  jacobianEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  index,  jacobianEvaluations);	  Arrays.fill(rows,    0,    index,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
134	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(size);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(size);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(size);	  int    rows    =    Arrays.asList(scales);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
135	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(parameters.length,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(parameters.length,  cols.length);	  int    rows    =    Math.min(cols.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
136	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(cols.length,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(cols.length,  parameters.length  -  1);	  int    rows    =    Math.min(cols.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
137	[BUG]  [BUGGY]  int  rows  =  Math.max(parameters.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(parameters.length,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(parameters.length,  cols.length);	  int    rows    =    Math.min(cols.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
138	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  jacobianEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  jacobianEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  jacobianEvaluations);	          Arrays.fill(jacobian,    0);    Arrays.fill(cols,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
139	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  jacobian);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  jacobian);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  jacobian);	          Arrays.fill(jacobian,    0);    Arrays.fill(cols,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
140	[BUG]  [BUGGY]  Arrays.fill(cols,  index,  0);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  index,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  index,  0);	  Arrays.fill(rows,    index,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
141	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  2);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  index,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  index,  2);	  Arrays.fill(rows,    index,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
142	[BUG]  [BUGGY]  Arrays.fill(colons,  index,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(colons,  index,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(colons,  index,  0);	  Arrays.fill(rows,    index,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
143	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  index,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  index,  1);	  Arrays.fill(rows,    index,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
144	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  cols.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(random,  cols.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(random,  cols.length  -  1);	  int    rows    =    Math.min(random,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
145	[BUG]  [BUGGY]  int  rows  =  Math.max(random,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(random,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(random,  cols.length);	  int    rows    =    Math.min(random,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
146	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  cols.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(random,  cols.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(random,  cols.length  +  1);	  int    rows    =    Math.min(random,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
147	[BUG]  [BUGGY]  int  rows  =  this.parameters.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  this.parameters.length  -  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  this.parameters.length  -  1;	  int    rows    =    this.parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
148	[BUG]  [BUGGY]  int  rows  =  this.parameters.length  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  this.parameters.length  -  2;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  this.parameters.length  -  2;	  int    rows    =    this.parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
149	[BUG]  [BUGGY]  int  rows  =  this.parameters.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  this.parameters.length  +  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  this.parameters.length  +  1;	  int    rows    =    this.parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
150	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  residuals);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  residuals);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  residuals);	  Arrays.fill(remainings,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
151	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  remainings);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  remainings);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  remainings);	  Arrays.fill(remainings,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
152	[BUG]  [BUGGY]  Arrays.fill(this.remainings,  0,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(this.remainings,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(this.remainings,  0,  cols);	  Arrays.fill(remainings,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
153	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(parameters,  parameters.length,  parameters.length);	  int    rows    =    Arrays.copyOf(jacobian,    parameters.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
154	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(parameters,  parameters.length,  cols.length);	  int    rows    =    Arrays.copyOf(jacobian,    parameters.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
155	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length,  jacobian.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length,  jacobian.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(parameters,  parameters.length,  jacobian.length);	  int    rows    =    Arrays.copyOf(jacobian,    parameters.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
156	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(results,  parameters.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(results,  parameters.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(results,  parameters.length,  parameters.length);	  int    rows    =    Arrays.copyOf(jacobian,    parameters.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
157	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(parameters.length,  parameters.length  -  1);	  int    rows    =    Math.min(parameters.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
158	[BUG]  [BUGGY]  int  rows  =  Math.max(parameters.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(parameters.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(parameters.length,  parameters.length);	  int    rows    =    Math.min(parameters.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
159	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(parameters.length,  parameters.length  +  1);	  int    rows    =    Math.min(parameters.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
160	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
161	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  rows  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  0;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length;  int  rows  =  0;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
162	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
163	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(this.datasets);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(this.datasets);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(this.datasets);	  int    rows    =    Arrays.asList(datasets);    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
164	[BUG]  [BUGGY]  int  cols  =  measurements[i].getWeight();  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  measurements[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  measurements[i].getWeight();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    measurements[i].getWeight();    	non-compiled	[CE]  class,  interface,  or  enum  expected	125	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  measurements[i].getWeight();  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  measurements[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  measurements[i].getWeight();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    measurements[i].getWeight();    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	125	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  measurements[i].getWeight();  }  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  measurements[i].getWeight();  }  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  measurements[i].getWeight();  }	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    measurements[i].getWeight();    	non-compiled	[CE]  class,  interface,  or  enum  expected	125	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  index;  i++)  {  int  cols  =  measurements[i].getWeight();  [CE]  cannot  find  symbol  index  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  index;  i++)  {  int  cols  =  measurements[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  measurements.length;  i  <  index;  i++)  {  int  cols  =  measurements[i].getWeight();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    measurements[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol  index	125	None	replace
168	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  rawRows);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  rawRows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  rawRows);	  Arrays.fill(rawRows,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
169	[BUG]  [BUGGY]  Arrays.fill(rawRows,  0,  cols  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rawRows,  0,  cols  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rawRows,  0,  cols  +  1);	  Arrays.fill(rawRows,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
170	[BUG]  [BUGGY]  Arrays.fill(rawRows,  0,  rows);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rawRows,  0,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rawRows,  0,  rows);	  Arrays.fill(rawRows,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
171	[BUG]  [BUGGY]  int  rows  =  parameters.copyOf(data,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.copyOf(data,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.copyOf(data,  parameters.length);	  int    rows    =    parameters.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
172	[BUG]  [BUGGY]  int  rows  =  parameters.copyOf(jacobian,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.copyOf(jacobian,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.copyOf(jacobian,  cols.length);	  int    rows    =    parameters.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
173	[BUG]  [BUGGY]  int  rows  =  parameters.copyOf(variables,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.copyOf(variables,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.copyOf(variables,  parameters.length);	  int    rows    =    parameters.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
174	[BUG]  [BUGGY]  int  rows  =  parameters.copyOf(this.parameters,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.copyOf(this.parameters,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.copyOf(this.parameters,  parameters.length);	  int    rows    =    parameters.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
175	[BUG]  [BUGGY]  int  rows  =  cols.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  cols.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  cols.length;	          int    rows    =    parameters.length;    int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
176	[BUG]  [BUGGY]  Integer  rows  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Integer  rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Integer  rows  =  parameters.length;	          int    rows    =    parameters.length;    int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  0;  i  <  cols.length;  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  len  =  0;  i  <  cols.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  len  =  0;  i  <  cols.length;  i++)  {	  for(int    i    =    0,    len    =    0;    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	52	None	replace
178	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  cols  =  cols;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length;  int  cols  =  cols;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length;  int  cols  =  cols;	          int    rows    =    parameters.length;    int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
179	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  cols  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length;  int  cols  =  0;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length;  int  cols  =  0;	          int    rows    =    parameters.length;    int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
180	[BUG]  [BUGGY]  int  rows  =  parameters.length  -  1;  int  cols  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length  -  1;  int  cols  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length  -  1;  int  cols  =  parameters.length;	          int    rows    =    parameters.length;    int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
181	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(estimates,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(estimates,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(estimates,  parameters.length  +  1);	  int    rows    =    Arrays.copyOf(estimates,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
182	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(measures,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(measures,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(measures,  cols.length);	  int    rows    =    Arrays.copyOf(measures,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
183	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  int  rows  =  parameters.length;  int  lines  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  int  rows  =  parameters.length;  int  lines  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    lines    =    parameters.length;    int  rows  =  parameters.length;  int  lines  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	14	None	add
184	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  Integer  rows  =  parameters.length;  int  lines  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  Integer  rows  =  parameters.length;  int  lines  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    lines    =    parameters.length;    Integer  rows  =  parameters.length;  int  lines  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	14	None	add
185	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  int  row  =  parameters.length;  int  lines  =  parameters.length;  [CE]  variable  lines  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  int  row  =  parameters.length;  int  lines  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    lines    =    parameters.length;    int  row  =  parameters.length;  int  lines  =  parameters.length;	  	non-compiled	[CE]  variable  lines  is  already  defined  in  method  updateJacobian()	14	None	add
186	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  int  lines  =  parameters.length;  int  lines  =  parameters.length;  [CE]  variable  lines  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  int  lines  =  parameters.length;  int  lines  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    lines    =    parameters.length;    int  lines  =  parameters.length;  int  lines  =  parameters.length;	  	non-compiled	[CE]  variable  lines  is  already  defined  in  method  updateJacobian()	14	None	add
187	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  cols  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	76	None	add
188	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  Integer  cols  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  Integer  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    Integer  cols  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	76	None	add
189	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  columns  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  columns  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  columns  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  columns  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  columns  is  already  defined  in  method  updateJacobian()	76	None	add
190	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  rows  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  columns  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  rows  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  rows  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  columns  is  already  defined  in  method  updateJacobian()	76	None	add
191	[BUG]  [BUGGY]  Arrays.fill(index,  2);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(index,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(index,  2);	  Arrays.fill(index,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	93	None	replace
192	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
193	[BUG]  [BUGGY]  int  cols  =  0;  int  columns  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  0;  int  columns  =  0;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  0;  int  columns  =  0;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
194	[BUG]  [BUGGY]  int  cols  =  0;  int  columns  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  0;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  0;  int  columns  =  parameters.length;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
195	[BUG]  [BUGGY]  int  rows  =  Math.min(methods.length,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(methods.length,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(methods.length,  parameters.length  -  1);	  int    rows    =    Math.min(methods.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
196	[BUG]  [BUGGY]  int  rows  =  Math.min(methods.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(methods.length,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(methods.length,  cols.length);	  int    rows    =    Math.min(methods.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
197	[BUG]  [BUGGY]  int  rows  =  Math.max(methods.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(methods.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(methods.length,  parameters.length);	  int    rows    =    Math.min(methods.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
198	[BUG]  [BUGGY]  int  rows  =  Math.min(methods.length,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(methods.length,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(methods.length,  parameters.length  +  1);	  int    rows    =    Math.min(methods.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
199	[BUG]  [BUGGY]  Arrays.fill(this.cols,  0,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(this.cols,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(this.cols,  0,  cols);	  Arrays.fill(cols,    0,    rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
200	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  rows,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  rows,  cols);	  Arrays.fill(rows,    0,    rows,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
201	[BUG]  [BUGGY]  Arrays.fill(index,  0,  rows,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(index,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(index,  0,  rows,  cols);	  Arrays.fill(rows,    0,    rows,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
202	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(data,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(data,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(data,  parameters.length);	  int    rows    =    Arrays.copyOf(parameters,    data.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
203	[BUG]  [BUGGY]  int  rows  =  cols.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  cols.length  -  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  cols.length  -  1;	  int    rows    =    parameters.length    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
204	[BUG]  [BUGGY]  int  rows  =  parameters.length  /  1;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length  /  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length  /  1;	  int    rows    =    parameters.length    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  1;  i  <  parameters.length;  i++)  {  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  1;  i  <  parameters.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  1;  i  <  parameters.length;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    parameters.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	3	None	replace
206	[BUG]  [BUGGY]  int  rows  =  Math.min(mappings.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(mappings.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(mappings.length,  parameters.length);	  int    rows    =    Math.min(    measurements.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
207	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(random,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(random,  measurements.length);	  int    rows    =    Math.min(    measurements.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
208	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  maxCostEval);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(parameters.length,  maxCostEval);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(parameters.length,  maxCostEval);	  int    rows    =    Math.min(maxCostEval,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
209	[BUG]  [BUGGY]  int  rows  =  Math.min(randomEval,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(randomEval,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(randomEval,  parameters.length);	  int    rows    =    Math.min(maxCostEval,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
210	[BUG]  [BUGGY]  int  rows  =  Math.min(maxCostEval,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(maxCostEval,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(maxCostEval,  parameters.length  -  1);	  int    rows    =    Math.min(maxCostEval,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
211	[BUG]  [BUGGY]  int  rows  =  cols.length;  int  parameters  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  cols.length;  int  parameters  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  cols.length;  int  parameters  =  parameters.length;	          int    rows    =    parameters.length;    int    parameters    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
212	[BUG]  [BUGGY]  int  rows  =  0;  int  parameters  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  0;  int  parameters  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  0;  int  parameters  =  parameters.length;	          int    rows    =    parameters.length;    int    parameters    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
213	[BUG]  [BUGGY]  int  parameters  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  parameters  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  parameters  =  parameters.length;	          int    rows    =    parameters.length;    int    parameters    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
214	[BUG]  [BUGGY]  int  rows  =  Math.min(indices.length,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(indices.length,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(indices.length,  parameters.length  -  1);	  int    rows    =    Math.min(indices.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
215	[BUG]  [BUGGY]  int  rows  =  Math.min(indices.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(indices.length,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(indices.length,  cols.length);	  int    rows    =    Math.min(indices.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
216	[BUG]  [BUGGY]  int  rows  =  Math.min(estimates.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(estimates.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(estimates.length,  parameters.length);	  int    rows    =    Math.min(indices.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
217	[BUG]  [BUGGY]  int  cols  =  this.parameters.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  this.parameters.length  -  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  this.parameters.length  -  1;	  int    cols    =    this.parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
218	[BUG]  [BUGGY]  int  cols  =  this.parameters.length  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  this.parameters.length  -  2;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  this.parameters.length  -  2;	  int    cols    =    this.parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
219	[BUG]  [BUGGY]  int  cols  =  this.parameters.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  this.parameters.length  +  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  this.parameters.length  +  1;	  int    cols    =    this.parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
220	[BUG]  [BUGGY]  int  rows  =  1;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  1;	  int    rows    =    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
221	[BUG]  [BUGGY]  int  rows  =  0L;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  0L;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  0L;	  int    rows    =    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
222	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  int  rows  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  int  rows  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    columns    =    parameters.length;    int  rows  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	10	None	add
223	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  Integer  rows  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  Integer  rows  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    columns    =    parameters.length;    Integer  rows  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	10	None	add
224	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  int  row  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  columns  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  int  row  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    columns    =    parameters.length;    int  row  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  columns  is  already  defined  in  method  updateJacobian()	10	None	add
225	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  parameters.length  -  1  +  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length  -  1  +  1;	  int    cols    =    parameters.length    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
226	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(random,  parameters.length,  cols);	  int    rows    =    Arrays.copyOf(random,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
227	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(random,  parameters.length  +  1);	  int    rows    =    Arrays.copyOf(random,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
228	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length,  maxCostEval);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length,  maxCostEval);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(random,  parameters.length,  maxCostEval);	  int    rows    =    Arrays.copyOf(random,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
229	[BUG]  [BUGGY]  Arrays.fill(this.resistances,  0);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(this.resistances,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(this.resistances,  0);	          Arrays.fill(jacobian,    0);    Arrays.fill(colons,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
230	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  data.length);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  data.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  data.length);	  Arrays.fill(data,    0,    data.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
231	[BUG]  [BUGGY]  Arrays.fill(this.data,  0,  data.length);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(this.data,  0,  data.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(this.data,  0,  data.length);	  Arrays.fill(data,    0,    data.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
232	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  data.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  data.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  data.length);	  Arrays.fill(data,    0,    data.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
233	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  fields  =  cols.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length;  int  fields  =  cols.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length;  int  fields  =  cols.length;	          int    rows    =    parameters.length;    int    fields    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
234	[BUG]  [BUGGY]  int  rows  =  cols.length;  int  fields  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  cols.length;  int  fields  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  cols.length;  int  fields  =  parameters.length;	          int    rows    =    parameters.length;    int    fields    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
235	[BUG]  [BUGGY]  int  rows  =  0;  int  fields  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  0;  int  fields  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  0;  int  fields  =  parameters.length;	          int    rows    =    parameters.length;    int    fields    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
236	[BUG]  [BUGGY]  int  rows  =  parameters.length  -  1;  int  fields  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length  -  1;  int  fields  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length  -  1;  int  fields  =  parameters.length;	          int    rows    =    parameters.length;    int    fields    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
237	[BUG]  [BUGGY]  int  rows  =  Math.min(colons.length,  cols.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(colons.length,  cols.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(colons.length,  cols.length  -  1);	  int    rows    =    Math.min(colons.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
238	[BUG]  [BUGGY]  Arrays.fill(cols,  index,  rows);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  index,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  index,  rows);	  Arrays.fill(rows,    index,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
239	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  0,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  index,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  index,  0,  cols);	  Arrays.fill(rows,    index,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
240	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  parameters.length;  int  cols  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  parameters.length;  int  cols  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	12	None	add
241	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  Integer  rows  =  parameters.length;  int  cols  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  Integer  rows  =  parameters.length;  int  cols  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    cols    =    parameters.length;    Integer  rows  =  parameters.length;  int  cols  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	12	None	add
242	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  row  =  parameters.length;  int  cols  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  row  =  parameters.length;  int  cols  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    cols    =    parameters.length;    int  row  =  parameters.length;  int  cols  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	12	None	add
243	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  parameters.length;  int  cols  =  parameters.length;  ++j;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  parameters.length;  int  cols  =  parameters.length;  ++j;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  parameters.length;  ++j;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	12	None	add
244	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getWeight();  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getWeight();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getWeight();    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	108	None	replace
245	[BUG]  [BUGGY]  int  cols  =  parameters[i].getWeight();  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  parameters[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters[i].getWeight();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getWeight();    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
246	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getWeight();  }  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getWeight();  }  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getWeight();  }	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getWeight();    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
247	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  parameters[i].getWeight();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  parameters[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  parameters[i].getWeight();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
248	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(array,  parameters.length,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(array,  parameters.length,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(array,  parameters.length,  cols);	  int    rows    =    Arrays.copyOf(array,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
249	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(array,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(array,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(array,  parameters.length  +  1);	  int    rows    =    Arrays.copyOf(array,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
250	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(measurements,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(measurements,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(measurements,  parameters.length  +  1);	  int    rows    =    Arrays.copyOf(measurements,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
251	[BUG]  [BUGGY]  int  rows  =  parameters.length  /  2;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length  /  2;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length  /  2;	  int    rows    =    parameters.length    -    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
252	[BUG]  [BUGGY]  int  rows  =  parameters.length  -  3;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length  -  3;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length  -  3;	  int    rows    =    parameters.length    -    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
253	[BUG]  [BUGGY]  int  rows  =  Math.min(index,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(index,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(index,  parameters.length  -  1);	  int    rows    =    Math.min(index,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
254	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  index);  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(parameters.length,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(parameters.length,  index);	  int    rows    =    Math.min(index,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
255	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	1	add
256	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	1	add
257	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0,  0);  Arrays.fill(jacobian,  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0,  0);  Arrays.fill(jacobian,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  0,  0);  Arrays.fill(jacobian,  1);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	46	None	add
258	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jocobian,  0);  Arrays.fill(jacobian,  1);  [CE]  cannot  find  symbol  jocobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jocobian,  0);  Arrays.fill(jacobian,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jocobian,  0);  Arrays.fill(jacobian,  1);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	46	None	add
259	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	1	add
260	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	1	add
261	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	1	add
262	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	1	add
263	[BUG]  [BUGGY]  int  rows  =  Math.min(estimates.length,  0);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(estimates.length,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(estimates.length,  0);	  int    rows    =    Math.min(estimates.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
264	[BUG]  [BUGGY]  int  rows  =  Math.max(estimates.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(estimates.length,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(estimates.length,  cols.length);	  int    rows    =    Math.min(estimates.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
265	[BUG]  [BUGGY]  int  rows  =  Math.min(estimates.length,  cols.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(estimates.length,  cols.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(estimates.length,  cols.length  -  1);	  int    rows    =    Math.min(estimates.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
266	[BUG]  [BUGGY]  Arrays.fill(jocobian,  0,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(jocobian,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(jocobian,  0,  cols);	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
267	[BUG]  [BUGGY]  Arrays.fill(cols,  1);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  1);	  Arrays.fill(cols,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
268	[BUG]  [BUGGY]  int  rows  =  Math.min(random.length,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(random.length,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(random.length,  parameters.length  -  1);	  int    rows    =    Math.min(random.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
269	[BUG]  [BUGGY]  int  rows  =  Math.min(random.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(random.length,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(random.length,  cols.length);	  int    rows    =    Math.min(random.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
270	[BUG]  [BUGGY]  int  rows  =  Math.min(random.length,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(random.length,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(random.length,  parameters.length  +  1);	  int    rows    =    Math.min(random.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
271	[BUG]  [BUGGY]  int  rows  =  Math.max(random.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(random.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(random.length,  parameters.length);	  int    rows    =    Math.min(random.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
272	[BUG]  [BUGGY]  int  rows  =  Math.min(measures.length,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(measures.length,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(measures.length,  parameters.length  -  1);	  int    rows    =    Math.min(measures.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
273	[BUG]  [BUGGY]  int  rows  =  Math.max(measures.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(measures.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(measures.length,  parameters.length);	  int    rows    =    Math.min(measures.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
274	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(parameters.length,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(parameters.length,  measurements.length);	  int    rows    =    Math.min(measures.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getColumnCount();  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getColumnCount();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getColumnCount();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	107	None	replace
276	[BUG]  [BUGGY]  int  cols  =  parameters[i].getColumnCount();  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  parameters[i].getColumnCount();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters[i].getColumnCount();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getColumnCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getColumnCount();  }  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getColumnCount();  }	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getRowCount();  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getRowCount();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getRowCount();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	107	None	replace
279	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  residuals);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  residuals);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  residuals);	  Arrays.fill(remainings,    0,    rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
280	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  remainings);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  remainings);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  remainings);	  Arrays.fill(remainings,    0,    rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0,  size  =  0;  i  <  measurements.length;  i++)  {  [CE]  cannot  find  symbol  index  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  size  =  0;  i  <  measurements.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  size  =  0;  i  <  measurements.length;  i++)  {	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int    i    =    0,    index    =    0;    i    <    measurements.length);    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	29	None	replace
282	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  measurements[i].getWeight();  [CE]  possible  loss  of  precision  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  measurements[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  measurements[i].getWeight();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    measurements[i].getWeight();    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
283	[BUG]  [BUGGY]  Arrays.fill(results,  0);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(results,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(results,  0);	  Arrays.fill(this.results,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
284	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  +  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length;  int  rows  =  parameters.length  +  1;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
285	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(remainders);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(remainders);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(remainders);	  int    rows    =    Arrays.asList(datasets);    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
286	[BUG]  [BUGGY]  if(this.results!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  }  else  {  [CE]  cannot  find  symbol  results  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  if(this.results!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  }  else  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	if(this.results!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  }  else  {	          Arrays.fill(jacobian,    0);    Arrays.fill(this.results,    0);    	non-compiled	[CE]  cannot  find  symbol  results	123	None	replace
287	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(this.results,  0,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(this.results,  0,  costEvaluations);	          Arrays.fill(jacobian,    0);    Arrays.fill(this.results,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
288	[BUG]  [BUGGY]  Arrays.fill(remainings,  0,  rows,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(remainings,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  0,  rows,  cols);	  Arrays.fill(rows,    0,    rows,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
289	[BUG]  [BUGGY]  Arrays.fill(randoms,  0,  rows,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(randoms,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(randoms,  0,  rows,  cols);	  Arrays.fill(rows,    0,    rows,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
290	[BUG]  [BUGGY]  int  cols  =  Arrays.binarySearch(this.parameters,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  Arrays.binarySearch(this.parameters,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  Arrays.binarySearch(this.parameters,  parameters.length);	  int    cols    =    this.parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
291	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  getColumnCount()  -  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  getColumnCount()  -  1;	  int    rows    =    getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
292	[BUG]  [BUGGY]  int  rows  =  this.getRowCount();  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  this.getRowCount();  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  this.getRowCount();	  int    rows    =    getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
293	[BUG]  [BUGGY]  Arrays.fill(remainings,  index,  0);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(remainings,  index,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  index,  0);	  Arrays.fill(rows,    index,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
294	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  +  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length;  int  columns  =  parameters.length  +  1;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
295	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
296	[BUG]  [BUGGY]  Arrays.fill(jocobian,  0);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(jocobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(jocobian,  0);	  Arrays.fill(remainings,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	104	None	replace
297	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  costEvaluations);	          Arrays.fill(jacobian,    0);    Arrays.fill(rows,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
298	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1  +  rows;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  parameters.length  -  1  +  rows;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length  -  1  +  rows;	  int    cols    =    parameters.length    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
299	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(results.length,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(results.length,  costEvaluations);	  int    rows    =    Math.min(colons.length,    residuals.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
300	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  coefficients.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(results.length,  coefficients.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(results.length,  coefficients.length);	  int    rows    =    Math.min(colons.length,    residuals.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
301	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(cols,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(cols,  cols.length);	  int    rows    =    Math.min(random,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
302	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(results.length,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(results.length,  parameters.length  +  1);	  int    rows    =    Math.min(results.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
303	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  tests.length;  i++)  {  [CE]  cannot  find  symbol  tests  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  tests.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  tests.length;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    rows.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  tests	86	None	replace
304	[BUG]  [BUGGY]  int  rows  =  Math.min(  measurements.length,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(  measurements.length,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(  measurements.length,  parameters.length  -  1);	  int    rows    =    Math.min(    measurements.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
305	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurement.length;  i++)  {  [CE]  cannot  find  symbol  measurement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurement.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurement.length;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  measurement	1	None	replace
306	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  columns  =  parameters.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length;  int  columns  =  parameters.length  +  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length;  int  columns  =  parameters.length  +  1;	          int    rows    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
307	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  columns  =  parameters.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length;  int  columns  =  parameters.length  -  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length;  int  columns  =  parameters.length  -  1;	          int    rows    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
308	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(array,  parameters.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(array,  parameters.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(array,  parameters.length,  parameters.length);	  int    rows    =    Arrays.copyOf(array,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
309	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(this.remainings,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(this.remainings,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(this.remainings,  costEvaluations);	  int    rows    =    Arrays.asList(this.remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
310	[BUG]  [BUGGY]  int  rows  =  getColumnsCount();  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  getColumnsCount();  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  getColumnsCount();	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
311	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  dataset.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  dataset.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(parameters,  dataset.length,  parameters.length);	  int    rows    =    Arrays.copyOf(parameters,    dataset.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
312	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  fields  =  parameters.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length;  int  fields  =  parameters.length  +  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length;  int  fields  =  parameters.length  +  1;	          int    rows    =    parameters.length;    int    fields    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
313	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  fields  =  parameters.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length;  int  fields  =  parameters.length  -  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length;  int  fields  =  parameters.length  -  1;	          int    rows    =    parameters.length;    int    fields    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
314	[BUG]  [BUGGY]  Arrays.fill(coefficients,  0);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(coefficients,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(coefficients,  0);	          Arrays.fill(jacobian,    0);    Arrays.fill(coefficients,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
315	[BUG]  [BUGGY]  int  rows  =  getLeftCount();  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  getLeftCount();  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  getLeftCount();	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
316	[BUG]  [BUGGY]  Arrays.fill(remainings,  0,  index,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(remainings,  0,  index,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  0,  index,  cols);	  Arrays.fill(rows,    0,    index,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
317	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	1	add
318	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  Arrays.fill(jacobian,  0);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	1	add
319	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	                int        rows        =        parameters.length;        int    lines    =    parameters.length;    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
320	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  Arrays.fill(jacobian,  0);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    lines    =    parameters.length;    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
321	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getWeight();  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getWeight();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getWeight();    	non-compiled	[CE]  ']'  expected	108	None	replace
322	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i].getWeight();  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i].getWeight();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getWeight();    	non-compiled	[CE]  ']'  expected	108	None	replace
323	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getWeight();  }  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getWeight();  }  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getWeight();  }	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getWeight();    	non-compiled	[CE]  ']'  expected	108	None	replace
324	[BUG]  [BUGGY]  int  rows  =  measurements.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  measurements.length  -  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  measurements.length  -  1;	  int    rows    =    measurements.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
325	[BUG]  [BUGGY]  Arrays.fill(remainings,  0,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(remainings,  0,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  0,  parameters.length);	  Arrays.fill(remainings,    0,    rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
326	[BUG]  [BUGGY]  int  cols  =  Arrays.binarySearch(this.results,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  Arrays.binarySearch(this.results,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  Arrays.binarySearch(this.results,  costEvaluations);	  int    cols    =    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
327	[BUG]  [BUGGY]  int  cols  =  Arrays.binarySearch(remainings,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  Arrays.binarySearch(remainings,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  Arrays.binarySearch(remainings,  costEvaluations);	  int    cols    =    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
328	[BUG]  [BUGGY]  int  rows  =  measurements.length;  int  parameters  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  measurements.length;  int  parameters  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  measurements.length;  int  parameters  =  parameters.length;	          int    rows    =    parameters.length;    int    parameters    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
329	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(results,  parameters.length,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(results,  parameters.length,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(results,  parameters.length,  cols);	  int    rows    =    Arrays.copyOf(results,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
330	[BUG]  [BUGGY]  Arrays.fill(remainings,  0,  cols,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(remainings,  0,  cols,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  0,  cols,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
331	[BUG]  [BUGGY]  Arrays.fill(colons,  0,  cols,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(colons,  0,  cols,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(colons,  0,  cols,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
332	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  lines  =  parameters.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length;  int  lines  =  parameters.length  +  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length;  int  lines  =  parameters.length  +  1;	          int    rows    =    parameters.length;    int    lines    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
333	[BUG]  [BUGGY]  Arrays.fill(remainings,  0,  data.length);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(remainings,  0,  data.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  0,  data.length);	  Arrays.fill(data,    0,    data.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
334	[BUG]  [BUGGY]  int  rows  =  Math.min(indices.length,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(indices.length,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(indices.length,  parameters.length  +  1);	  int    rows    =    Math.min(indices.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
335	[BUG]  [BUGGY]  int  rows  =  Math.min(indices.length,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(indices.length,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(indices.length,  measurements.length);	  int    rows    =    Math.min(indices.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
336	[BUG]  [BUGGY]  int  rows  =  Math.min(estimates.length,  estimates.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(estimates.length,  estimates.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(estimates.length,  estimates.length);	  int    rows    =    Math.min(estimates.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
337	[BUG]  [BUGGY]  int  rows  =  Math.min(estimates.length,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(estimates.length,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(estimates.length,  measurements.length);	  int    rows    =    Math.min(estimates.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
338	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  measurements.length;  int  cols  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  measurements.length;  int  cols  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    cols    =    parameters.length;    int  rows  =  measurements.length;  int  cols  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	12	None	add
339	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	                int        rows        =        parameters.length;        int    cols    =    parameters.length;    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	add
340	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  Arrays.fill(jacobian,  0);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    cols    =    parameters.length;    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	add
341	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  colls  =  parameters.length;  int  rows  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  colls  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    int  colls  =  parameters.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	73	None	add
342	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	add
343	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  Arrays.fill(jacobian,  0);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	add
344	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  else  {  [CE]  incomparable  types:  int  and  <null>  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  else  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  else  {	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
345	[BUG]  [BUGGY]  Arrays.fill(remainings,  index,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(remainings,  index,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  index,  cols);	  Arrays.fill(rows,    index,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
346	[BUG]  [BUGGY]  int  rows  =  Math.min(measures.length,  parameters.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(measures.length,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(measures.length,  parameters.length  +  1);	  int    rows    =    Math.min(measures.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
347	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(random,  parameters.length,  parameters.length);	  int    rows    =    Arrays.copyOf(random,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
348	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(random,  parameters.length,  measurements.length);	  int    rows    =    Arrays.copyOf(random,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
349	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  data.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(results.length,  data.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(results.length,  data.length);	  int    rows    =    Math.min(results.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
350	[BUG]  [BUGGY]  Arrays.fill(remainings,  index);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(remainings,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  index);	  Arrays.fill(rows,    index);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
351	[BUG]  [BUGGY]  Arrays.fill(rows,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  cols);	  Arrays.fill(rows,    index);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
352	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters  =  parameters[i];  [CE]  array  required,  but  int  found  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters  =  parameters[i];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters  =  parameters[i];	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters.length;    	non-compiled	[CE]  array  required,  but  int  found	106	None	replace
353	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  parameters.length;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  parameters.length;	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	replace
354	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  parameters.length;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  index  =  parameters.length;	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	replace
355	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters  =  parameters[i].length;  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters  =  parameters[i].length;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters  =  parameters[i].length;	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters.length;    	non-compiled	[CE]  array  required,  but  int  found	106	None	replace
356	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters.length;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters.length;	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters.length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	106	None	replace
357	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(regexps,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(regexps,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(regexps,  parameters.length);	  int    rows    =    Arrays.copyOf(estimates,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
358	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  int  columns  =  parameters.length;  int  fields  =  parameters.length;  [CE]  variable  fields  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  int  columns  =  parameters.length;  int  fields  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    fields    =    parameters.length;    int  columns  =  parameters.length;  int  fields  =  parameters.length;	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  updateJacobian()	16	None	add
359	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	                int        rows        =        parameters.length;        int    fields    =    parameters.length;    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
360	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  Arrays.fill(jacobian,  0);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    fields    =    parameters.length;    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
361	[BUG]  [BUGGY]  int  rows  =  Math.min(measures.length,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(measures.length,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(measures.length,  measurements.length);	  int    rows    =    Math.min(measures.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
362	[BUG]  [BUGGY]  int  rows  =  Math.min(measures.length,  data.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(measures.length,  data.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(measures.length,  data.length);	  int    rows    =    Math.min(measures.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
363	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(cocobian,  0);  Arrays.fill(jacobian,  0);  [CE]  cannot  find  symbol  cocobian  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(cocobian,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(cocobian,  0);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  cannot  find  symbol  cocobian	41	None	add
364	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(colons,  0);  Arrays.fill(jacobian,  0);  [CE]  cannot  find  symbol  colons  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(colons,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(colons,  0);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  cannot  find  symbol  colons	41	None	add
365	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(values);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(values);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(values);	  int    rows    =    Arrays.asList(results);    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
366	[BUG]  [BUGGY]  Arrays.fill(colons,  0);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(colons,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(colons,  0);	          Arrays.fill(jacobian,    0);    Arrays.fill(colons,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
367	[BUG]  [BUGGY]  int  rows  =  parameters.copyOf(jacobian,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.copyOf(jacobian,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.copyOf(jacobian,  parameters.length  -  1);	  int    rows    =    parameters.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
368	[BUG]  [BUGGY]  int  rows  =  parameters.copyOf(parameters,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.copyOf(parameters,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.copyOf(parameters,  parameters.length);	  int    rows    =    parameters.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
369	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  for(int  i  =  0,  cols  =  parameters.length;  i  <  cols;  ++i)  {  if(remainings[i]!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  for(int  i  =  0,  cols  =  parameters.length;  i  <  cols;  ++i)  {  if(remainings[i]!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    columns    =    parameters.length;    for(int  i  =  0,  cols  =  parameters.length;  i  <  cols;  ++i)  {  if(remainings[i]!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
370	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  for(int  i  =  0,  cols  =  parameters.length;  i  <  cols;  ++i)  {  if(remainings[i]!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  for(int  i  =  0,  cols  =  parameters.length;  i  <  cols;  ++i)  {  if(remainings[i]!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    columns    =    parameters.length;    for(int  i  =  0,  cols  =  parameters.length;  i  <  cols;  ++i)  {  if(remainings[i]!=  null)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
371	[BUG]  [BUGGY]  Arrays.fill(remainings,  0,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(remainings,  0,  cost);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  0,  cost);	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
372	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(measurements,  parameters.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(measurements,  parameters.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(measurements,  parameters.length,  parameters.length);	  int    rows    =    Arrays.copyOf(measurements,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
373	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(randoms,  parameters.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(randoms,  parameters.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(randoms,  parameters.length,  parameters.length);	  int    rows    =    Arrays.copyOf(jacobian,    parameters.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
374	[BUG]  [BUGGY]  for(int  i  =  0,  j  =  0;  i  <  parameters.length;  i++)  {  [CE]  variable  j  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  j  =  0;  i  <  parameters.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  j  =  0;  i  <  parameters.length;  i++)  {	  for(int    i    =    0,    j    =    0;    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  variable  j  is  already  defined  in  method  updateJacobian()	53	None	replace
375	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getColumnCount();  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getColumnCount();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getColumnCount();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  ']'  expected	107	None	replace
376	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i].getColumnCount();  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i].getColumnCount();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i].getColumnCount();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  ']'  expected	107	None	replace
377	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getRowCount();  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getRowCount();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getRowCount();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  ']'  expected	107	None	replace
378	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getColumnCount();  }  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getColumnCount();  }  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  parameters[i]  =  parameters[i].getColumnCount();  }	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  ']'  expected	107	None	replace
379	[BUG]  [BUGGY]  int  rows  =  parameters.length  -  1;  Integer  rows  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.length  -  1;  Integer  rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length  -  1;  Integer  rows  =  parameters.length;	          int    rows    =    parameters.length;    Integer    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
380	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  cols;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  getColumnCount()  -  cols;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  getColumnCount()  -  cols;	  int    rows    =    getRowCount()    -    cols;    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
381	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurement.length;  i++)  {  [CE]  cannot  find  symbol  measurement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurement.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  index  =  0;  i  <  measurement.length;  i++)  {	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int    i    =    0,    index    =    0;    i    <    measurement.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  measurement	30	None	replace
382	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  index  =  measurements.length;  i  <  index;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	for(int  i  =  0,  index  =  measurements.length;  i  <  index;  i++)  {	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int    i    =    0,    index    =    0;    i    <    measurement.length;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	replace
383	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  measurements.length;  i  <  index;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  index  =  measurements.length;  i  <  index;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  index  =  measurements.length;  i  <  index;  i++)  {	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int    i    =    0,    index    =    0;    i    <    measurement.length;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	replace
384	[BUG]  [BUGGY]  Arrays.fill(randoms,  0);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(randoms,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(randoms,  0);	          Arrays.fill(jacobian,    0);    Arrays.fill(cocobian,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
385	[BUG]  [BUGGY]  Arrays.fill(colons,  0,  rows);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(colons,  0,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(colons,  0,  rows);	  Arrays.fill(rows,    0,    rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
386	[BUG]  [BUGGY]  if(this.results!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  if(this.results!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	if(this.results!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          Arrays.fill(jacobian,    0);    Arrays.fill(this.results,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
387	[BUG]  [BUGGY]  if(this.results!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  if(this.results!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	if(this.results!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {	          Arrays.fill(jacobian,    0);    Arrays.fill(this.results,    0);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
388	[BUG]  [BUGGY]  int  rows  =  Math.min(lastIndex,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(lastIndex,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(lastIndex,  cols.length);	  int    rows    =    Math.min(random,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
389	[BUG]  [BUGGY]  int  rows  =  measurements.length;  int  cols  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  measurements.length;  int  cols  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  measurements.length;  int  cols  =  parameters.length;	          int    rows    =    parameters.length;    int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
390	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(randomEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(randomEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(randomEvaluations);	  int    rows    =    Arrays.asList(bewertungen);    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
391	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  variables.length;  int  cols  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  variables.length;  int  cols  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    cols    =    parameters.length;    int  rows  =  variables.length;  int  cols  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	12	None	add
392	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  parameters.length;  int  cols  =  variables.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  parameters.length;  int  cols  =  variables.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  variables.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	12	None	add
393	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  parameters[i].getWeight();  }  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  parameters[i].getWeight();  }  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  parameters[i].getWeight();  }	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getWeight();    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
394	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  parameters[i].getWeight();  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  parameters[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  parameters[i].getWeight();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getWeight();    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	108	None	replace
395	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(remainders,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(remainders,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(remainders,  parameters.length);	  int    rows    =    Arrays.copyOf(measurements,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
396	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rows,  index);  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  rows,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  rows,  index);	  Arrays.fill(rows,    0,    index,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
397	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rowCount,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  rowCount,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  rowCount,  cols);	  Arrays.fill(rows,    0,    index,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
398	[BUG]  [BUGGY]  int  rows  =  0;  int  lines  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  0;  int  lines  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  0;  int  lines  =  parameters.length;	          int    rows    =    parameters.length;    int    lines    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
399	[BUG]  [BUGGY]  int  rows  =  measurements.length;  int  lines  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  measurements.length;  int  lines  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  measurements.length;  int  lines  =  parameters.length;	          int    rows    =    parameters.length;    int    lines    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
400	[BUG]  [BUGGY]  int  rows  =  0;  int  lines  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  0;  int  lines  =  0;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  0;  int  lines  =  0;	          int    rows    =    parameters.length;    int    lines    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
401	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters.length;  }  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters.length;  }  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters.length;  }	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	replace
402	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].length;  }  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].length;  }  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].length;  }	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	replace
403	[BUG]  [BUGGY]  Arrays.fill(remainings,  0,  remainings.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(remainings,  0,  remainings.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  0,  remainings.length);	  Arrays.fill(remainings,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
404	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  remainings.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(cols,  0,  remainings.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  remainings.length);	  Arrays.fill(remainings,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
405	[BUG]  [BUGGY]  int  cols  =  getColumnCount();  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  getColumnCount();  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  getColumnCount();	  int    cols    =    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
406	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(this.remainings,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(this.remainings,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(this.remainings,  parameters.length);	  int    rows    =    Arrays.asList(this.remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
407	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(array,  parameters.length,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(array,  parameters.length,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(array,  parameters.length,  measurements.length);	  int    rows    =    Arrays.copyOf(array,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
408	[BUG]  [BUGGY]  Arrays.fill(data,  0,  rows,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(data,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(data,  0,  rows,  cols);	  Arrays.fill(rows,    0,    rows,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
409	[BUG]  [BUGGY]  int  cols  =  measurements.length;  int  rows  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  measurements.length;  int  rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  measurements.length;  int  rows  =  parameters.length;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
410	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  remainings.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  remainings.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  remainings.length);	  Arrays.fill(remainings,    0,    rows);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
411	[BUG]  [BUGGY]  int  rows  =  Math.min(coales.length,  cols.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(coales.length,  cols.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(coales.length,  cols.length  -  1);	  int    rows    =    Math.min(colons.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
412	[BUG]  [BUGGY]  int  rows  =  Math.min(methods.length,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(methods.length,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(methods.length,  measurements.length);	  int    rows    =    Math.min(methods.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
413	[BUG]  [BUGGY]  Arrays.fill(remainders,  0);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(remainders,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainders,  0);	          Arrays.fill(jacobian,    0);    Arrays.fill(cocobian,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
414	[BUG]  [BUGGY]  int  cols  =  measurements.length;  Integer  cols  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  measurements.length;  Integer  cols  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  measurements.length;  Integer  cols  =  parameters.length;	          int    cols    =    parameters.length;    Integer    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
415	[BUG]  [BUGGY]  int  rows  =  Math.max(parameters.length,  maxCostEval);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.max(parameters.length,  maxCostEval);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.max(parameters.length,  maxCostEval);	  int    rows    =    Math.min(maxCostEval,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
416	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  int  rows  =  measurements.length;  int  fields  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  fields  =  parameters.length;  int  rows  =  measurements.length;  int  fields  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    fields    =    parameters.length;    int  rows  =  measurements.length;  int  fields  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	16	None	add
417	[BUG]  [BUGGY]  int  rows  =  dimensions.length;  int  parameters  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  dimensions.length;  int  parameters  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  dimensions.length;  int  parameters  =  parameters.length;	          int    rows    =    parameters.length;    int    parameters    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
418	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  0;  i  <  parameters.length;  i++)  {  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  len  =  0;  i  <  parameters.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  len  =  0;  i  <  parameters.length;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    parameters.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	3	None	replace
419	[BUG]  [BUGGY]  Arrays.fill(rows,  cols,  0);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  cols,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  cols,  0);	          Arrays.fill(jacobian,    0);    Arrays.fill(cols,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
420	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  0);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(cols.length,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(cols.length,  0);	  int    rows    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
421	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(vars,  0);  Arrays.fill(vars,  0);  [CE]  cannot  find  symbol  vars  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(vars,  0);  Arrays.fill(vars,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(vars,  0);  Arrays.fill(vars,  0);	  	non-compiled	[CE]  cannot  find  symbol  vars	41	None	add
422	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(coefficients,  0);  Arrays.fill(jacobian,  0);  [CE]  cannot  find  symbol  coefficients  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(coefficients,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(coefficients,  0);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  cannot  find  symbol  coefficients	41	None	add
423	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(results.length,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(results.length,  measurements.length);	  int    rows    =    Math.min(results.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
424	[BUG]  [BUGGY]  int  rows  =  measurements.length;  int  columns  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  measurements.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  measurements.length;  int  columns  =  parameters.length;	          int    rows    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
425	[BUG]  [BUGGY]  int  rows  =  0;  int  columns  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  0;  int  columns  =  0;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  0;  int  columns  =  0;	          int    rows    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
426	[BUG]  [BUGGY]  int  rows  =  parameters.size();  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  parameters.size();  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.size();	  int    rows    =    parameters.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
427	[BUG]  [BUGGY]  Arrays.fill(rawRows,  0,  rowCount);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rawRows,  0,  rowCount);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rawRows,  0,  rowCount);	  Arrays.fill(rawRows,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
428	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  int  rows  =  variables.length;  int  lines  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  int  rows  =  variables.length;  int  lines  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    lines    =    parameters.length;    int  rows  =  variables.length;  int  lines  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	14	None	add
429	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  int  rows  =  measurements.length;  int  lines  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  lines  =  parameters.length;  int  rows  =  measurements.length;  int  lines  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    lines    =    parameters.length;    int  rows  =  measurements.length;  int  lines  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	14	None	add
430	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  }  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
431	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
432	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  }  else  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  }  else  {  return;  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  }  else  {  return;  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
433	[BUG]  [BUGGY]  int  rows  =  measurements.length;  Int  rows  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  measurements.length;  Int  rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  measurements.length;  Int  rows  =  parameters.length;	          int    rows    =    parameters.length;    Int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
434	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  parameters[i].getColumnCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  parameters[i].getColumnCount();  }  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  parameters[i].getColumnCount();  }	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
435	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  parameters[i].getColumnCount();  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  parameters[i].getColumnCount();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  parameters[i].getColumnCount();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	107	None	replace
436	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  parameters.length;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getColumnCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  parameters.length;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getColumnCount();  }  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  parameters.length;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getColumnCount();  }	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
437	[BUG]  [BUGGY]  Arrays.fill(last,  jacobian,  0,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(last,  jacobian,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(last,  jacobian,  0,  cols);	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
438	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  2;  i  <  measurements.length;  i++)  {  [CE]  cannot  find  symbol  index  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  2;  i  <  measurements.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  2;  i  <  measurements.length;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	1	None	replace
439	[BUG]  [BUGGY]  int  rows  =  Math.min(measures.length,  0);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(measures.length,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(measures.length,  0);	  int    rows    =    Math.min(measures.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
440	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
441	[BUG]  [BUGGY]  int  cols  =  measurements.length;  int  columns  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  cols  =  measurements.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  measurements.length;  int  columns  =  parameters.length;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
442	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(array,  dataset.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(array,  dataset.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(array,  dataset.length);	  int    rows    =    Arrays.copyOf(parameters,    dataset.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
443	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(remainders,  dataset.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(remainders,  dataset.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(remainders,  dataset.length);	  int    rows    =    Arrays.copyOf(parameters,    dataset.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
444	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(random,  parameters.length  -  1);	  int    rows    =    Arrays.copyOf(random,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
445	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rowCount);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  rowCount);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  rowCount);	  Arrays.fill(data,    0,    data.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
446	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  rows);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(this.results,  0,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(this.results,  0,  rows);	  Arrays.fill(this.results,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
447	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(parameters,  parameters.length  -  1);	  int    rows    =    Arrays.copyOf(parameters,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
448	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols.length;  i++)  {  int  cols  =  measurements[i].getWeight();  }  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols.length;  i++)  {  int  cols  =  measurements[i].getWeight();  }  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  measurements.length;  i  <  cols.length;  i++)  {  int  cols  =  measurements[i].getWeight();  }	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    measurements[i].getWeight();    	non-compiled	[CE]  class,  interface,  or  enum  expected	125	None	replace
449	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  measurements[i].getWeight();  }  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  measurements[i].getWeight();  }  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  i++)  {  int  cols  =  measurements[i].getWeight();  }	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    measurements[i].getWeight();    	non-compiled	[CE]  class,  interface,  or  enum  expected	125	None	replace
450	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols.length;  i++)  {  int  cols  =  measurements[i].getWeight();  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols.length;  i++)  {  int  cols  =  measurements[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  measurements.length;  i  <  cols.length;  i++)  {  int  cols  =  measurements[i].getWeight();	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int    cols    =    measurements[i].getWeight();    	non-compiled	[CE]  int  cannot  be  dereferenced	125	None	replace
451	[BUG]  [BUGGY]  int  rows  =  measurements.length;  int  fields  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  measurements.length;  int  fields  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  measurements.length;  int  fields  =  parameters.length;	          int    rows    =    parameters.length;    int    fields    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
452	[BUG]  [BUGGY]  int  rows  =  dimensions.length;  int  fields  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  dimensions.length;  int  fields  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  dimensions.length;  int  fields  =  parameters.length;	          int    rows    =    parameters.length;    int    fields    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
453	[BUG]  [BUGGY]  int  rows  =  Math.min(randomEvaluations,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(randomEvaluations,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(randomEvaluations,  parameters.length);	  int    rows    =    Math.min(index,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
454	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(results.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(results.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(results.length);	  int    rows    =    Arrays.asList(results);    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
455	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(results,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.asList(results,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(results,  parameters.length);	  int    rows    =    Arrays.asList(results);    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
456	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  int  rows  =  variables.length;  int  columns  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  int  rows  =  variables.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    columns    =    parameters.length;    int  rows  =  variables.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	10	None	add
457	[BUG]  [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  int  rows  =  parameters.length;  int  columns  =  variables.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    rows    =    parameters.length;    int  columns  =  parameters.length;  int  rows  =  parameters.length;  int  columns  =  variables.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        rows        =        parameters.length;        int    columns    =    parameters.length;    int  rows  =  parameters.length;  int  columns  =  variables.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	10	None	add
458	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  ++i)  {  [CE]  cannot  find  symbol  index  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  ++i)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  ++i)  {	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int    i    =    0,    cols    =    0;    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	27	None	replace
459	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(parameters,  parameters.length,  cols);	  int    rows    =    Arrays.copyOf(jacobian,    parameters.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
460	[BUG]  [BUGGY]  Arrays.fill(rawRemainings,  0);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rawRemainings,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rawRemainings,  0);	  Arrays.fill(remainings,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	104	None	replace
461	[BUG]  [BUGGY]  int  rows  =  Math.min(colons.length,  index);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(colons.length,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(colons.length,  index);	  int    rows    =    Math.min(index,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
462	[BUG]  [BUGGY]  int  rows  =  Math.min(random.length,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(random.length,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(random.length,  measurements.length);	  int    rows    =    Math.min(random.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
463	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rows,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  rows,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  rows,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
464	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  cols,  indexEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  cols,  indexEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  cols,  indexEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
465	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  columns,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  Arrays.fill(rows,  0,  columns,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  columns,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
466	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  2;  i  <  measurements.length;  i++)  {  [CE]  cannot  find  symbol  index  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  len  =  2;  i  <  measurements.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  len  =  2;  i  <  measurements.length;  i++)  {	  for(int    i    =    0,    len    =    0;    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	52	None	replace
467	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  1;  i  <  measurements.length;  i++)  {  [CE]  cannot  find  symbol  index  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  for(int  i  =  0,  len  =  1;  i  <  measurements.length;  i++)  {  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  len  =  1;  i  <  measurements.length;  i++)  {	  for(int    i    =    0,    len    =    0;    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	52	None	replace
468	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  parameters.length;  int  rows  =  parameters.length;  ++rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  parameters.length;  int  rows  =  parameters.length;  ++rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  parameters.length;  ++rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	73	None	add
469	[BUG]  [BUGGY]  int  rows  =  Math.min(randoms.length,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);      [BUGGY]  int  rows  =  Math.min(randoms.length,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(randoms.length,  measurements.length);	  int    rows    =    Math.min(randoms.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
