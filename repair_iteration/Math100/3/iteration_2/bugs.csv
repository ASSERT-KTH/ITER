bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  [CE]  cannot  find  symbol  index  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    index;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	9	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  costEvaluations;  i++)  {  [CE]  cannot  find  symbol  index  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  costEvaluations;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  costEvaluations;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    index;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	9	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  parameters.length;  i++)  {  [CE]  cannot  find  symbol  index  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  parameters.length;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  parameters.length;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    index;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	9	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  metrics.length;  i++)  {  [CE]  cannot  find  symbol  metrics  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  metrics.length;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  metrics.length;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    index;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  metrics	9	None	replace
5	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  cols  =  parameters.length  -  1;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length  -  1;	      int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
6	[BUG]  [BUGGY]  int  cols  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  cols  =  0;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  0;	      int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
7	[BUG]  [BUGGY]  int  cols  =  this.parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  cols  =  this.parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  this.parameters.length;	      int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
8	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  cols  =  parameters.length  -  2;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length  -  2;	      int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
9	[BUG]  [BUGGY]      int  rows  =  parameters.length;  int  rows  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  rows  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        int    rows    =    parameters.length;    int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	16	None	add
10	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  rows  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	        int    rows    =    parameters.length;    int  columns  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
11	[BUG]  [BUGGY]      int  rows  =  parameters.length;  int  columns  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  rows  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        int    rows    =    parameters.length;    int  columns  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
12	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  rows  =  parameters.length;  int  cols  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	        int    rows    =    parameters.length;    int  cols  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
13	[BUG]  [BUGGY]      int  rows  =  parameters.length;  int  cols  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  rows  =  parameters.length;  int  cols  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        int    rows    =    parameters.length;    int  cols  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
14	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  rows  =  parameters.length;  int  lines  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	        int    rows    =    parameters.length;    int  lines  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
15	[BUG]  [BUGGY]      int  rows  =  parameters.length;  int  lines  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  rows  =  parameters.length;  int  lines  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        int    rows    =    parameters.length;    int  lines  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
16	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  rows  =  parameters.length;  int  fields  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	        int    rows    =    parameters.length;    int  fields  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
17	[BUG]  [BUGGY]      int  rows  =  parameters.length;  int  fields  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  rows  =  parameters.length;  int  fields  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        int    rows    =    parameters.length;    int  fields  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
18	[BUG]  [BUGGY]  int  rows  =  this.parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  this.parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  this.parameters.length;	      int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
19	[BUG]  [BUGGY]  int  rows  =  parameters.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  parameters.length  -  1;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length  -  1;	      int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
20	[BUG]  [BUGGY]  int  rows  =  parameters.length  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  parameters.length  -  2;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.length  -  2;	      int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
21	[BUG]  [BUGGY]  int  rows  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  0;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  0;	      int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
22	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(parameters.length,  parameters.length);	      int    rows    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
23	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(results.length,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(results.length,  parameters.length);	      int    rows    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
24	[BUG]  [BUGGY]  int  rows  =  Math.min(maxCostEval,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(maxCostEval,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(maxCostEval,  parameters.length);	      int    rows    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
25	[BUG]  [BUGGY]  int  rows  =  Math.min(random.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(random.length,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(random.length,  parameters.length);	      int    rows    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
27	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int  i  =  0,  cols  =  0;  i  <  measurements.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
28	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  for(int  i  =  0,  error.length());  i  <  measurements.length;  i++)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  for(int  i  =  0,  error.length());  i  <  measurements.length;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int  i  =  0,  error.length());  i  <  measurements.length;  i++)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
29	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  for(int  i  =  0,  index  =  0;  i  <  measurements.length);  i++)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  for(int  i  =  0,  index  =  0;  i  <  measurements.length);  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int  i  =  0,  index  =  0;  i  <  measurements.length);  i++)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
30	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  for(int  i  =  0,  index  =  0;  i  <  measurement.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  for(int  i  =  0,  index  =  0;  i  <  measurement.length;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    for(int  i  =  0,  index  =  0;  i  <  measurement.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
31	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(jacobianEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.asList(jacobianEvaluations);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(jacobianEvaluations);	      int    rows    =    Arrays.asList(remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
32	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(measurements);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.asList(measurements);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(measurements);	      int    rows    =    Arrays.asList(remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
33	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(measures);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.asList(measures);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(measures);	      int    rows    =    Arrays.asList(remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
34	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(scales);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.asList(scales);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(scales);	      int    rows    =    Arrays.asList(remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  maxCostEval;  i++)  {  [CE]  cannot  find  symbol  index  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  maxCostEval;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  maxCostEval;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    rows;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	8	None	replace
36	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  0);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(rows,  index,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  index,  0);	      Arrays.fill(rows,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
37	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rows);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(rows,  0,  rows);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  rows);	      Arrays.fill(rows,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
38	[BUG]  [BUGGY]  Arrays.fill(rawRows,  0,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(rawRows,  0,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rawRows,  0,  cols);	      Arrays.fill(rows,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
39	[BUG]  [BUGGY]  Arrays.fill(cols,  0);  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(cols,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0);	      Arrays.fill(jacobian,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
40	[BUG]  [BUGGY]  Arrays.fill(this.results,  0);  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(this.results,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(this.results,  0);	      Arrays.fill(jacobian,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
41	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	        Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	add
42	[BUG]  [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	add
43	[BUG]  [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(jocobian,  0);  [CE]  cannot  find  symbol  jocobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(jocobian,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        Arrays.fill(jacobian,    0);    Arrays.fill(jocobian,  0);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	2	None	add
44	[BUG]  [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0,  cols);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	2	None	add
45	[BUG]  [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(cols,  0);  [CE]  no  suitable  method  found  for  fill(int,int)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(cols,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        Arrays.fill(jacobian,    0);    Arrays.fill(cols,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int)	2	None	add
46	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	        Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	add
47	[BUG]  [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	add
48	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  cols,  costEvaluations);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(rows,  0,  cols,  costEvaluations);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  cols,  costEvaluations);	      Arrays.fill(rows,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
49	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rows,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(rows,  0,  rows,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  rows,  cols);	      Arrays.fill(rows,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
50	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  rows);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(cols,  0,  rows);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(cols,  0,  rows);	      Arrays.fill(rows,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
51	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  index,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(rows,  0,  index,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  0,  index,  cols);	      Arrays.fill(rows,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  0;  i  <  measurements.length;  i++)  {  [CE]  cannot  find  symbol  index  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  len  =  0;  i  <  measurements.length;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  len  =  0;  i  <  measurements.length;  i++)  {	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  index	12	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0,  j  =  0;  i  <  measurements.length;  i++)  {  [CE]  variable  j  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  j  =  0;  i  <  measurements.length;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  j  =  0;  i  <  measurements.length;  i++)  {	  for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    	non-compiled	[CE]  variable  j  is  already  defined  in  method  updateJacobian()	12	None	replace
54	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(parameters,  parameters.length);	      int    rows    =    Arrays.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
55	[BUG]  [BUGGY]  int  rows  =  parameters.copyOf(jacobian,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  parameters.copyOf(jacobian,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  parameters.copyOf(jacobian,  parameters.length);	      int    rows    =    Arrays.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
56	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  dataset.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  dataset.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(parameters,  dataset.length);	      int    rows    =    Arrays.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
57	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  data.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  data.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(parameters,  data.length);	      int    rows    =    Arrays.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
58	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.copyOf(random,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(random,  parameters.length);	      int    rows    =    Arrays.copyOf(remainings,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
59	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(estimates,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.copyOf(estimates,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(estimates,  parameters.length);	      int    rows    =    Arrays.copyOf(remainings,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
60	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(measures,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.copyOf(measures,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(measures,  parameters.length);	      int    rows    =    Arrays.copyOf(remainings,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
61	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(cols.length,  cols.length);	      int    rows    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
62	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(cols.length,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(cols.length,  parameters.length);	      int    rows    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
63	[BUG]  [BUGGY]  int  rows  =  Math.min(index,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(index,  cols.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(index,  cols.length);	      int    rows    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
64	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(random,  cols.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(random,  cols.length);	      int    rows    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
65	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  getRowCount()  -  1;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  getRowCount()  -  1;	      int    rows    =    getRowCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
66	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  cols;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  getRowCount()  -  cols;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  getRowCount()  -  cols;	      int    rows    =    getRowCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
67	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  getRowCount()  -  2;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  getRowCount()  -  2;	      int    rows    =    getRowCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
68	[BUG]  [BUGGY]  int  rows  =  getRowCount()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  getRowCount()  +  1;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  getRowCount()  +  1;	      int    rows    =    getRowCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
69	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  residuals.length);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(cols.length,  residuals.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(cols.length,  residuals.length);	      int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
70	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(results.length,  cols.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(results.length,  cols.length);	      int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
71	[BUG]  [BUGGY]  int  rows  =  Math.min(periods.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(periods.length,  cols.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(periods.length,  cols.length);	      int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
72	[BUG]  [BUGGY]      int  cols  =  parameters.length;  int  cols  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  cols  =  parameters.length;  int  cols  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        int    cols    =    parameters.length;    int  cols  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	6	None	add
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	        int    cols    =    parameters.length;    int  rows  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	add
74	[BUG]  [BUGGY]      int  cols  =  parameters.length;  int  rows  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        int    cols    =    parameters.length;    int  rows  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	add
75	[BUG]  [BUGGY]      int  cols  =  parameters.length;  Integer  cols  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  cols  =  parameters.length;  Integer  cols  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        int    cols    =    parameters.length;    Integer  cols  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	6	None	add
76	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	        int    cols    =    parameters.length;    int  columns  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	add
77	[BUG]  [BUGGY]      int  cols  =  parameters.length;  int  columns  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        int    cols    =    parameters.length;    int  columns  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	add
78	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(random,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(random,  parameters.length);	      int    rows    =    Math.min(remainders.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
79	[BUG]  [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(cocobian,  0);  [CE]  cannot  find  symbol  cocobian  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(cocobian,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        Arrays.fill(jacobian,    0);    Arrays.fill(cocobian,  0);	  	non-compiled	[CE]  cannot  find  symbol  cocobian	2	None	add
80	[BUG]  [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(colons,  0);  [CE]  cannot  find  symbol  colons  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(colons,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        Arrays.fill(jacobian,    0);    Arrays.fill(colons,  0);	  	non-compiled	[CE]  cannot  find  symbol  colons	2	None	add
81	[BUG]  [BUGGY]  int  rows  =  measurements.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  measurements.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  measurements.length;	      int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
82	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(results,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.copyOf(results,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(results,  parameters.length);	      int    rows    =    Arrays.copyOf(remainings,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
83	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(array,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.copyOf(array,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(array,  parameters.length);	      int    rows    =    Arrays.copyOf(remainings,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
84	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(measurements,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.copyOf(measurements,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(measurements,  parameters.length);	      int    rows    =    Arrays.copyOf(remainings,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  methods.length;  i++)  {  [CE]  cannot  find  symbol  methods  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  methods.length;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  methods.length;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    rows;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  methods	8	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  rows.length;  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  rows.length;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  rows.length;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    rows;    i++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
87	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(bewertungen);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.asList(bewertungen);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(bewertungen);	      int    rows    =    Arrays.asList(remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
88	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(datasets);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.asList(datasets);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(datasets);	      int    rows    =    Arrays.asList(remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
89	[BUG]  [BUGGY]  int  cols  =  measurements.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  cols  =  measurements.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  measurements.length;	      int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
90	[BUG]  [BUGGY]  int  cols  =  parameters.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  cols  =  parameters.length  +  1;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  cols  =  parameters.length  +  1;	      int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
91	[BUG]  [BUGGY]  Arrays.fill(remainings,  0,  rows);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(remainings,  0,  rows);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  0,  rows);	      Arrays.fill(rows,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
92	[BUG]  [BUGGY]  Arrays.fill(remainings,  0,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(remainings,  0,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  0,  cols);	      Arrays.fill(rows,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
93	[BUG]  [BUGGY]  Arrays.fill(index,  0);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(index,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(index,  0);	      Arrays.fill(rows,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
94	[BUG]  [BUGGY]  int  rows  =  Math.min(measures.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(measures.length,  cols.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(measures.length,  cols.length);	      int    rows    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
95	[BUG]  [BUGGY]  int  rows  =  Math.min(estimates.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(estimates.length,  cols.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(estimates.length,  cols.length);	      int    rows    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
96	[BUG]  [BUGGY]      int  rows  =  parameters.length;  int  parameters  =  parameters.length;  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  rows  =  parameters.length;  int  parameters  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        int    rows    =    parameters.length;    int  parameters  =  parameters.length;	  	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	add
97	[BUG]  [BUGGY]  int  rows  =  Math.min(indices.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(indices.length,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(indices.length,  parameters.length);	      int    rows    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
98	[BUG]  [BUGGY]  int  rows  =  Math.min(  measurements.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(  measurements.length,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(  measurements.length,  parameters.length);	      int    rows    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
99	[BUG]  [BUGGY]  int  rows  =  Math.min(index,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(index,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(index,  parameters.length);	      int    rows    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
100	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  parameters.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  parameters.length,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.copyOf(jacobian,  parameters.length,  parameters.length);	      int    rows    =    Arrays.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
101	[BUG]  [BUGGY]  int  rows  =  Math.min(randoms.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(randoms.length,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(randoms.length,  parameters.length);	      int    rows    =    Math.min(remainders.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
102	[BUG]  [BUGGY]  Arrays.fill(index,  0,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(index,  0,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(index,  0,  cols);	      Arrays.fill(rows,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
103	[BUG]  [BUGGY]      int  cols  =  parameters.length;  int  cols  =  measurements.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  cols  =  parameters.length;  int  cols  =  measurements.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        int    cols    =    parameters.length;    int  cols  =  measurements.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	6	None	add
104	[BUG]  [BUGGY]  Arrays.fill(remainings,  0);  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(remainings,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(remainings,  0);	      Arrays.fill(jacobian,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
105	[BUG]  [BUGGY]  Arrays.fill(runs,  0);  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(runs,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(runs,  0);	      Arrays.fill(jacobian,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters.length;  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters.length;  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int  cols  =  parameters.length;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
107	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getColumnCount();  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getColumnCount();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int  cols  =  parameters[i].getColumnCount();	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
108	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getWeight();  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  parameters[i].getWeight();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int  cols  =  parameters[i].getWeight();	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
109	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurementCount;  i++)  {  [CE]  cannot  find  symbol  measurementCount  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measurementCount;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measurementCount;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    index;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  measurementCount	9	None	replace
110	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(parameters.length,  residuals.length);	      int    rows    =    Math.min(remainders.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
111	[BUG]  [BUGGY]  int  rows  =  Math.min(colons.length,  cols.length);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(colons.length,  cols.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(colons.length,  cols.length);	      int    rows    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
112	[BUG]  [BUGGY]  int  rows  =  Math.min(colons.length,  residuals.length);  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(colons.length,  residuals.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(colons.length,  residuals.length);	      int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
113	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  measurements.length);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(remainders.length,  measurements.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(remainders.length,  measurements.length);	      int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
114	[BUG]  [BUGGY]  int  rows  =  getColumnCount();  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  getColumnCount();  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  getColumnCount();	      int    rows    =    getRowCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
115	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(results);  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.asList(results);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(results);	      int    rows    =    Arrays.asList(remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
116	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(this.remainings);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Arrays.asList(this.remainings);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Arrays.asList(this.remainings);	      int    rows    =    Arrays.asList(remainings);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
117	[BUG]  [BUGGY]      int  rows  =  parameters.length;  Integer  rows  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  rows  =  parameters.length;  Integer  rows  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        int    rows    =    parameters.length;    Integer  rows  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	16	None	add
118	[BUG]  [BUGGY]      int  rows  =  parameters.length;  Int  rows  =  parameters.length;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      int  rows  =  parameters.length;  Int  rows  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        int    rows    =    parameters.length;    Int  rows  =  parameters.length;	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
119	[BUG]  [BUGGY]  int  rows  =  Math.min(measures.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(measures.length,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(measures.length,  parameters.length);	      int    rows    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
120	[BUG]  [BUGGY]  int  rows  =  Math.min(methods.length,  parameters.length);  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  int  rows  =  Math.min(methods.length,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	int  rows  =  Math.min(methods.length,  parameters.length);	      int    rows    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
121	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(rows,  index,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  index,  cols);	      Arrays.fill(rows,    0,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
122	[BUG]  [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(rows,  0);  [CE]  no  suitable  method  found  for  fill(int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(rows,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        Arrays.fill(jacobian,    0);    Arrays.fill(rows,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int)	2	None	add
123	[BUG]  [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  [CE]  cannot  find  symbol  results  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(this.results,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        Arrays.fill(jacobian,    0);    Arrays.fill(this.results,  0);	  	non-compiled	[CE]  cannot  find  symbol  results	2	None	add
124	[BUG]  [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(coefficients,  0);  [CE]  cannot  find  symbol  coefficients  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]      Arrays.fill(jacobian,  0);  Arrays.fill(coefficients,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	        Arrays.fill(jacobian,    0);    Arrays.fill(coefficients,  0);	  	non-compiled	[CE]  cannot  find  symbol  coefficients	2	None	add
125	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  measurements[i].getWeight();  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  measurements.length;  i++)  {  int  cols  =  measurements[i].getWeight();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int    i    =    0,    index    =    0;    i    <    measurements.length;    i++)    {    int  cols  =  measurements[i].getWeight();	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
126	[BUG]  [BUGGY]  Arrays.fill(rows,  index);  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(rows,  index);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(rows,  index);	      Arrays.fill(rows,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measures.length;  i++)  {  [CE]  cannot  find  symbol  measures  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  measures.length;  i++)  {  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  measures.length;  i++)  {	  for(int    i    =    0,    cols    =    0;    i    <    rows;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  measures	8	None	replace
128	[BUG]  [BUGGY]  Arrays.fill(data,  0,  data.length);  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);    [BUGGY]  Arrays.fill(data,  0,  data.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	Arrays.fill(data,  0,  data.length);	      Arrays.fill(jacobian,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
