bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  cols,  costEvaluations);  [CE]  cannot  find  symbol  results  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  cols,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  cols,  costEvaluations);	  Arrays.fill(this.results,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  results	61	None	replace
2	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  0,  jacobian);  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index,  0,  jacobian);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  0,  jacobian);	  Arrays.fill(cols,    0,    jacobian);    	non-compiled	[CE]  cannot  find  symbol  index	38	None	replace
3	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  cols,  jacobianEvaluations);  [CE]  no  suitable  method  found  for  fill(int,int,int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(cols,  0,  cols,  jacobianEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  0,  cols,  jacobianEvaluations);	  Arrays.fill(cols,    0,    jacobian);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int)	38	None	replace
4	[BUG]  [BUGGY]  Arrays.fill(rows,  cols,  0,  jacobian);  [CE]  no  suitable  method  found  for  fill(int,int,int,double[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  cols,  0,  jacobian);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  cols,  0,  jacobian);	  Arrays.fill(cols,    0,    jacobian);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,double[])	38	None	replace
5	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols.length,  jacobian.length  -  1);	  int    cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
6	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  parameters.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(cols.length,  parameters.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols.length,  parameters.length  -  1);	  int    cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
7	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  1,  parameters.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  1,  parameters.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols.length,  cols.length  -  1,  parameters.length  -  1);	  int    cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
8	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
9	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
10	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  int  columns  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  0;  int  columns  =  parameters.length;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
11	[BUG]  [BUGGY]  int  cols  =  0;  int  columns  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  int  columns  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  0;  int  columns  =  parameters.length;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
12	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length;  int  columns  =  0;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  parameters.length;  int  columns  =  0;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
13	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  columns  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length;  int  columns  =  0;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length;  int  columns  =  0;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
14	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
15	[BUG]  [BUGGY]  if(rows  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
16	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	add
18	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	add
19	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  1);  [CE]  cannot  find  symbol  jocobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  1);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	53	None	add
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	add
21	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	add
22	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	add
23	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	add
24	[BUG]  [BUGGY]  int  cols  =  Math.min(rows.length,  cols.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(rows.length,  cols.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(rows.length,  cols.length  -  1);	  int    cols    =    Math.min(rows.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
25	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  rows.length);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(cols.length,  rows.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols.length,  rows.length);	  int    cols    =    Math.min(rows.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
26	[BUG]  [BUGGY]  int  cols  =  Math.min(rows.length,  rows.length);  [CE]  int  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(rows.length,  rows.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(rows.length,  rows.length);	  int    cols    =    Math.min(rows.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
27	[BUG]  [BUGGY]  int  rows  =  Math.min(random.length,  parameters.length);  [CE]  cannot  find  symbol  random  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(random.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random.length,  parameters.length);	  int    rows    =    Math.min(results.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  random	7	None	replace
28	[BUG]  [BUGGY]  Arrays.fill(this.jacobian,  0,  rows,  index);  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.jacobian,  0,  rows,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.jacobian,  0,  rows,  index);	  Arrays.fill(this.jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  index	43	None	replace
29	[BUG]  [BUGGY]  Arrays.fill(this.jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.jacobian,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.jacobian,  0,  cols);	  Arrays.fill(this.jacobian,    0,    rows);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	43	None	replace
30	[BUG]  [BUGGY]  Arrays.fill(this.jacobian,  0,  index,  rows);  [CE]  cannot  find  symbol  index  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.jacobian,  0,  index,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.jacobian,  0,  index,  rows);	  Arrays.fill(this.jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  index	43	None	replace
31	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.jacobian,  0,  jacobianEvaluations,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(this.jacobian,  0,  jacobianEvaluations,  rows);	  Arrays.fill(this.jacobian,    0,    rows);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	replace
32	[BUG]  [BUGGY]  Arrays.fill(this.jacobian,  0,  jacobianEvaluations,  rows);  [FE]  ArrayIndexOutOfBoundsException  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.jacobian,  0,  jacobianEvaluations,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.jacobian,  0,  jacobianEvaluations,  rows);	  Arrays.fill(this.jacobian,    0,    rows);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	replace
33	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(jacobianEvaluations);  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Arrays.asList(jacobianEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Arrays.asList(jacobianEvaluations);	  int    rows    =    Arrays.asList(remainders);    	non-compiled	[CE]  incompatible  types	125	None	replace
34	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(this.remainders);  [CE]  cannot  find  symbol  remainders  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Arrays.asList(this.remainders);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Arrays.asList(this.remainders);	  int    rows    =    Arrays.asList(remainders);    	non-compiled	[CE]  cannot  find  symbol  remainders	125	None	replace
35	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(JacobianEvaluations.size());  [CE]  cannot  find  symbol  JacobianEvaluations  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Arrays.asList(JacobianEvaluations.size());  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Arrays.asList(JacobianEvaluations.size());	  int    rows    =    Arrays.asList(remainders);    	non-compiled	[CE]  cannot  find  symbol  JacobianEvaluations	125	None	replace
36	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(randomEvaluations);  [CE]  cannot  find  symbol  randomEvaluations  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Arrays.asList(randomEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Arrays.asList(randomEvaluations);	  int    rows    =    Arrays.asList(remainders);    	non-compiled	[CE]  cannot  find  symbol  randomEvaluations	125	None	replace
37	[BUG]  [BUGGY]  Arrays.fill(array,  0,  cols);  [CE]  cannot  find  symbol  array  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(array,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(array,  0,  cols);	  Arrays.fill(array,    0);    	non-compiled	[CE]  cannot  find  symbol  array	117	None	replace
38	[BUG]  [BUGGY]  Arrays.fill(runtime,  0);  [CE]  cannot  find  symbol  runtime  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(runtime,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(runtime,  0);	  Arrays.fill(array,    0);    	non-compiled	[CE]  cannot  find  symbol  runtime	117	None	replace
39	[BUG]  [BUGGY]  Arrays.fill(this.rows,  0,  this.results);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.rows,  0,  this.results);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.rows,  0,  this.results);	  Arrays.fill(this.results,    0,    this.rows);    	non-compiled	[CE]  cannot  find  symbol  results	63	None	replace
40	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  this.rows,  cols);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  this.rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  this.rows,  cols);	  Arrays.fill(this.results,    0,    this.rows);    	non-compiled	[CE]  cannot  find  symbol  results	63	None	replace
41	[BUG]  [BUGGY]  Arrays.fill(this.data,  0,  this.rows);  [CE]  cannot  find  symbol  data  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.data,  0,  this.rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.data,  0,  this.rows);	  Arrays.fill(this.results,    0,    this.rows);    	non-compiled	[CE]  cannot  find  symbol  data	63	None	replace
42	[BUG]  [BUGGY]  Arrays.fill(this.cols,  0,  this.results);  [CE]  cannot  find  symbol  results  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.cols,  0,  this.results);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.cols,  0,  this.results);	  Arrays.fill(this.results,    0,    this.rows);    	non-compiled	[CE]  cannot  find  symbol  results	63	None	replace
43	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  2);  [CE]  cannot  find  symbol  results  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(results.length,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.length,  2);	          int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  results	126	None	replace
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(maxCostEval,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  Math.min(maxCostEval,  2);	          int    rows    =    Math.min(remainders.length,    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	126	1	replace
45	[BUG]  [BUGGY]  int  rows  =  Math.min(maxCostEval,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(maxCostEval,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(maxCostEval,  2);	          int    rows    =    Math.min(remainders.length,    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	126	1	replace
46	[BUG]  [BUGGY]  int  rows  =  Math.min(random.length,  2);  [CE]  cannot  find  symbol  random  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(random.length,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random.length,  2);	          int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  random	126	None	replace
47	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  0,  rows,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
48	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  rows,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  0,  rows,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
49	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jocobian,  0,  rows,  cols);  [CE]  cannot  find  symbol  jocobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jocobian,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jocobian,  0,  rows,  cols);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	35	None	add
50	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  columns,  cols);  [CE]  cannot  find  symbol  columns  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  columns,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  0,  columns,  cols);	  	non-compiled	[CE]  cannot  find  symbol  columns	35	None	add
51	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Collections.fill(jacobian,  0,  rows,  cols);  [CE]  cannot  find  symbol  Collections  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Collections.fill(jacobian,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Collections.fill(jacobian,  0,  rows,  cols);	  	non-compiled	[CE]  cannot  find  symbol  Collections	35	None	add
52	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  Math.min(parameters.length,  parameters.length);	  int    cols    =    Math.min(cols.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	replace
53	[BUG]  [BUGGY]  int  cols  =  Math.min(parameters.length,  parameters.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(parameters.length,  parameters.length);	  int    cols    =    Math.min(cols.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	replace
54	[BUG]  [BUGGY]  int  cols  =  Math.min(parameters.length,  data.length);  [CE]  cannot  find  symbol  data  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(parameters.length,  data.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(parameters.length,  data.length);	  int    cols    =    Math.min(cols.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  data	1	None	replace
55	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  1,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,  0,  1,  1);	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1,    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	replace
56	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  1,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  1,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  1,  1);	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1,    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	replace
57	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  1);	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1,    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	59	None	replace
58	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  1,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  1,  cols);	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1,    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	59	None	replace
59	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1,  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  1,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  1,  1);	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1,    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	59	None	replace
60	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
61	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
62	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jocobian,  2);  Arrays.fill(jacobian,  2);  [CE]  cannot  find  symbol  jocobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jocobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    2);    Arrays.fill(jocobian,  2);  Arrays.fill(jacobian,  2);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	9	None	add
63	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
64	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
65	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(data,  2);  Arrays.fill(jacobian,  2);  [CE]  cannot  find  symbol  data  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(data,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    2);    Arrays.fill(data,  2);  Arrays.fill(jacobian,  2);	  	non-compiled	[CE]  cannot  find  symbol  data	9	None	add
66	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(parameters.length,  cols.length);	  int    rows    =    Math.min(cols.length,    parameters.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	77	None	replace
67	[BUG]  [BUGGY]  int  rows  =  Math.min(index,  parameters.length);  [CE]  cannot  find  symbol  index  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(index,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(index,  parameters.length);	  int    rows    =    Math.min(cols.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  index	77	None	replace
68	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  parameters.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.length,  parameters.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.length,  parameters.length  -  1);	  int    rows    =    Math.min(cols.length,    parameters.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	77	None	replace
69	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  cols.length  -  1);  [CE]  cannot  find  symbol  random  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(random,  cols.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random,  cols.length  -  1);	  int    rows    =    Math.min(random,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  random	89	None	replace
70	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  cols.length  +  1);  [CE]  cannot  find  symbol  random  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(random,  cols.length  +  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random,  cols.length  +  1);	  int    rows    =    Math.min(random,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  random	89	None	replace
71	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  cols.length,  maxCostEval);  [CE]  cannot  find  symbol  random  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(random,  cols.length,  maxCostEval);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random,  cols.length,  maxCostEval);	  int    rows    =    Math.min(random,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  random	89	None	replace
72	[BUG]  [BUGGY]  int  rows  =  Math.min(random.size());  [CE]  cannot  find  symbol  random  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(random.size());  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random.size());	  int    rows    =    Math.min(random.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  random	68	None	replace
73	[BUG]  [BUGGY]  int  rows  =  Math.min(random.size()  -  1,  cols.length);  [CE]  cannot  find  symbol  random  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(random.size()  -  1,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random.size()  -  1,  cols.length);	  int    rows    =    Math.min(random.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  random	68	None	replace
74	[BUG]  [BUGGY]  int  rows  =  Math.min(random.size()  -  1,  parameters.length);  [CE]  cannot  find  symbol  random  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(random.size()  -  1,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random.size()  -  1,  parameters.length);	  int    rows    =    Math.min(random.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  random	68	None	replace
75	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rows,  0,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,int,int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  rows,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  rows,  0,  cols);	  Arrays.fill(rows,    index,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int,int)	49	None	replace
76	[BUG]  [BUGGY]  Arrays.fill(rows,  rows,  0,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  rows,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  rows,  0,  cols);	  Arrays.fill(rows,    index,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int)	49	None	replace
77	[BUG]  [BUGGY]  Arrays.fill(rows,  cols,  0,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  cols,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  cols,  0,  cols);	  Arrays.fill(rows,    index,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int)	49	None	replace
78	[BUG]  [BUGGY]  int  rows  =  Math.min(rows.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(rows.length,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(rows.length,  cols.length);	  int    rows    =    Math.min(array.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	131	None	replace
79	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  cols.length  -  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  getRowCount()  -  cols.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getRowCount()  -  cols.length  -  1;	  int    rows    =    getRowCount()    -    cols.length;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
80	[BUG]  [BUGGY]  int  rows  =  getColsCount()  -  cols.length;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  getColsCount()  -  cols.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getColsCount()  -  cols.length;	  int    rows    =    getRowCount()    -    cols.length;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
81	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  cols.length  +  1;  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  getRowCount()  -  cols.length  +  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getRowCount()  -  cols.length  +  1;	  int    rows    =    getRowCount()    -    cols.length;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
82	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.length,  cols.length  -  1);	  int    rows    =    Math.min(remainders.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	17	None	replace
83	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  residuals.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.length,  residuals.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.length,  residuals.length  -  1);	  int    rows    =    Math.min(remainders.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	17	None	replace
84	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,  cols);	  Arrays.fill(jacobian,    index,    rows);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	130	1	replace
85	[BUG]  [BUGGY]  Arrays.fill(jacobian,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  cols);	  Arrays.fill(jacobian,    index,    rows);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	130	1	replace
86	[BUG]  [BUGGY]  Arrays.fill(jacobian,  cols,  rows);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  cols,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  cols,  rows);	  Arrays.fill(jacobian,    index,    rows);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	130	None	replace
87	[BUG]  [BUGGY]  Arrays.fill(jacobian,  parameters.length,  rows);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  parameters.length,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  parameters.length,  rows);	  Arrays.fill(jacobian,    index,    rows);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	130	None	replace
88	[BUG]  [BUGGY]  Arrays.fill(jacobian,  maxCostEval,  rows);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  maxCostEval,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  maxCostEval,  rows);	  Arrays.fill(jacobian,    index,    rows);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	130	None	replace
89	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  jacobian.length);  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.length,  jacobian.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.length,  jacobian.length);	  int    rows    =    Math.min(colons.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	88	None	replace
90	[BUG]  [BUGGY]  Arrays.fill(runRows,  0);  [CE]  cannot  find  symbol  runRows  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(runRows,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(runRows,  0);	  Arrays.fill(rawRows,    0);    	non-compiled	[CE]  cannot  find  symbol  runRows	34	None	replace
91	[BUG]  [BUGGY]  Arrays.fill(rows,  3);  [CE]  no  suitable  method  found  for  fill(int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  3);	  Arrays.fill(jacobian,    3);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int)	135	None	replace
92	[BUG]  [BUGGY]  int  cols  =  getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  getRowCount()  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  getRowCount()  -  1;	  int    cols    =    getColumnCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
93	[BUG]  [BUGGY]  int  cols  =  this.getColumnCount();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.getColumnCount();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  this.getColumnCount();	  int    cols    =    getColumnCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
94	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	1	add
95	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	1	add
96	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	1	add
97	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	1	add
98	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  3);  [CE]  cannot  find  symbol  jocobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  3);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	57	None	add
99	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	1	add
100	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	1	add
101	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  4);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	1	add
102	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  4);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  4);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	1	add
103	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Integer  cols  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Integer  cols  =  parameters.length;	          int    cols    =    parameters.length;    Integer    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
104	[BUG]  [BUGGY]  Integer  cols  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Integer  cols  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Integer  cols  =  parameters.length;	          int    cols    =    parameters.length;    Integer    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
105	[BUG]  [BUGGY]  Arrays.fill(this.remainings,  1);  [CE]  cannot  find  symbol  remainings  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.remainings,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.remainings,  1);	  Arrays.fill(remainings,    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	95	None	replace
106	[BUG]  [BUGGY]  Arrays.fill(random,  1);  [CE]  cannot  find  symbol  random  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(random,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(random,  1);	  Arrays.fill(remainings,    1);    	non-compiled	[CE]  cannot  find  symbol  random	95	None	replace
107	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  this.parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  this.parameters.length;	  int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
108	[BUG]  [BUGGY]  int  rows  =  this.parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  this.parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  this.parameters.length;	  int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
109	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length  -  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  parameters.length  -  1;	  int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
110	[BUG]  [BUGGY]  int  rows  =  parameters.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length  -  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  parameters.length  -  1;	  int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
111	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length  -  2;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  parameters.length  -  2;	  int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
112	[BUG]  [BUGGY]  int  rows  =  parameters.length  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length  -  2;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  parameters.length  -  2;	  int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
113	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  0;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  0;	  int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
114	[BUG]  [BUGGY]  int  rows  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  0;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  0;	  int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
115	[BUG]  [BUGGY]  Integer  cols  =  getColumnCount()  *  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Integer  cols  =  getColumnCount()  *  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Integer  cols  =  getColumnCount()  *  1;	  Integer    cols    =    getColumnCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
116	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  cols,  0);  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index,  cols,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  cols,  0);	  Arrays.fill(rows,    cols,    0);    	non-compiled	[CE]  cannot  find  symbol  index	39	None	replace
117	[BUG]  [BUGGY]  Arrays.fill(cols,  rows,  0);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(cols,  rows,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  rows,  0);	  Arrays.fill(rows,    cols,    0);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	39	None	replace
118	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  Math.min(parameters.length,  parameters.length  -  1);	  int    rows    =    Math.min(parameters.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
119	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length  -  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(parameters.length,  parameters.length  -  1);	  int    rows    =    Math.min(parameters.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
120	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.max(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  Math.max(parameters.length,  parameters.length);	  int    rows    =    Math.min(parameters.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
121	[BUG]  [BUGGY]  int  rows  =  Math.max(parameters.length,  parameters.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.max(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.max(parameters.length,  parameters.length);	  int    rows    =    Math.min(parameters.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
122	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length  +  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  Math.min(parameters.length,  parameters.length  +  1);	  int    rows    =    Math.min(parameters.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
123	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length  +  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(parameters.length,  parameters.length  +  1);	  int    rows    =    Math.min(parameters.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
124	[BUG]  [BUGGY]  int  cols  =  getRowCount()  +  1;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  getRowCount()  +  1;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  getRowCount()  +  1;	  int    cols    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
125	[BUG]  [BUGGY]  int  cols  =  getRowCount()  -  2;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  getRowCount()  -  2;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  getRowCount()  -  2;	  int    cols    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
126	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  getColumnCount()  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getColumnCount()  -  1;	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
127	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  this.maxCostEval;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  this.maxCostEval;	  int    rows    =    getColumnCount();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	138	1	replace
128	[BUG]  [BUGGY]  int  rows  =  this.maxCostEval;  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  this.maxCostEval;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  this.maxCostEval;	  int    rows    =    getColumnCount();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	138	1	replace
129	[BUG]  [BUGGY]  int  rows  =  getColsCount()  +  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  getColsCount()  +  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getColsCount()  +  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
130	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  getColumnCount()  +  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getColumnCount()  +  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
131	[BUG]  [BUGGY]  int  cols  =  0;  int  cols  =  0;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  int  cols  =  0;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    0;    int  cols  =  0;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	30	None	add
132	[BUG]  [BUGGY]  int  cols  =  0;  Integer  cols  =  0;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  Integer  cols  =  0;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    0;    Integer  cols  =  0;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	30	None	add
133	[BUG]  [BUGGY]  int  cols  =  0;  boolean  cols  =  0;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  boolean  cols  =  0;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    0;    boolean  cols  =  0;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	30	None	add
134	[BUG]  [BUGGY]  int  cols  =  0;  float  cols  =  0;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  float  cols  =  0;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    0;    float  cols  =  0;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	30	None	add
135	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  cols,  jacobian);  [CE]  no  suitable  method  found  for  fill(int,int,int,double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  cols,  jacobian);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  cols,  jacobian);	  Arrays.fill(rows,    0,    jacobian);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,double[])	41	None	replace
136	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  jacobian);  [CE]  cannot  find  symbol  index  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index,  jacobian);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  jacobian);	  Arrays.fill(rows,    0,    jacobian);    	non-compiled	[CE]  cannot  find  symbol  index	41	None	replace
137	[BUG]  [BUGGY]  Arrays.fill(this.remainings,  0);  [CE]  cannot  find  symbol  remainings  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.remainings,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.remainings,  0);	  Arrays.fill(remainings,    0);    	non-compiled	[CE]  cannot  find  symbol  remainings	96	None	replace
138	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.parameters.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  this.parameters.length  -  1;	  int    cols    =    this.parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	replace
139	[BUG]  [BUGGY]  int  cols  =  this.parameters.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.parameters.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  this.parameters.length  -  1;	  int    cols    =    this.parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	replace
140	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.parameters.length  -  2;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  this.parameters.length  -  2;	  int    cols    =    this.parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	replace
141	[BUG]  [BUGGY]  int  cols  =  this.parameters.length  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.parameters.length  -  2;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  this.parameters.length  -  2;	  int    cols    =    this.parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	replace
142	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.parameters.length  +  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  this.parameters.length  +  1;	  int    cols    =    this.parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	replace
143	[BUG]  [BUGGY]  int  cols  =  this.parameters.length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.parameters.length  +  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  this.parameters.length  +  1;	  int    cols    =    this.parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	replace
144	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.size());  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.size());  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.size());	  int    rows    =    Math.min(cols.size()    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	67	None	replace
145	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.size(),  cols.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.size(),  cols.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.size(),  cols.length  -  1);	  int    rows    =    Math.min(cols.size()    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	67	None	replace
146	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.size()  -  1,  costEvaluations);  [CE]  int  cannot  be  dereferenced  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.size()  -  1,  costEvaluations);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.size()  -  1,  costEvaluations);	  int    rows    =    Math.min(cols.size()    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	67	None	replace
147	[BUG]  [BUGGY]  int  rows  =  getColsCount()  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  getColsCount()  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getColsCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
148	[BUG]  [BUGGY]  Arrays.fill(parameters,  0,  this.results.length);  [CE]  cannot  find  symbol  results  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(parameters,  0,  this.results.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(parameters,  0,  this.results.length);	  Arrays.fill(this.results,    0,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  results	105	None	replace
149	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  parameters.length  +  1);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  parameters.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  parameters.length  +  1);	  Arrays.fill(this.results,    0,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  results	105	None	replace
150	[BUG]  [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(jacobian[i]    *    parameters[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
151	[BUG]  [BUGGY]  if(cols  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(jacobian[i]    *    parameters[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
152	[BUG]  [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(jacobian[i]    *    parameters[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
153	[BUG]  [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(jacobian[i]    *    parameters[i]);    }    	non-compiled	[CE]  ')'  expected	122	None	replace
154	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  +  1);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  +  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols.length,  jacobian.length  +  1);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	2	None	replace
155	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  2);  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  2);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols.length,  jacobian.length  -  2);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	2	None	replace
156	[BUG]  [BUGGY]  int  rows  =  Math.min(results.size(),  cols.length);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(results.size(),  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.size(),  cols.length);	  int    rows    =    Math.min(results.size());    	non-compiled	[CE]  cannot  find  symbol  results	66	None	replace
157	[BUG]  [BUGGY]  int  rows  =  Math.min(results.size(),  parameters.length);  [CE]  cannot  find  symbol  results  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(results.size(),  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.size(),  parameters.length);	  int    rows    =    Math.min(results.size());    	non-compiled	[CE]  cannot  find  symbol  results	66	None	replace
158	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  cols.size());  [CE]  cannot  find  symbol  results  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(results.length,  cols.size());  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.length,  cols.size());	  int    rows    =    Math.min(results.size());    	non-compiled	[CE]  cannot  find  symbol  results	66	None	replace
159	[BUG]  [BUGGY]  int  rows  =  Math.min(maxCostEval,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(maxCostEval,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(maxCostEval,  cols.length);	  int    rows    =    Math.min(index,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	78	None	replace
160	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(rows,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(rows,  cols.length);	  int    rows    =    Math.min(index,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	78	None	replace
161	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  rows  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    parameters.length;    int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	90	None	add
162	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    rows    =    parameters.length;    int  columns  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
163	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  columns  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    parameters.length;    int  columns  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
164	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length;  int  cols  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    rows    =    parameters.length;    int  cols  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
165	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  cols  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length;  int  cols  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    parameters.length;    int  cols  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
166	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length;  int  lines  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    rows    =    parameters.length;    int  lines  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
167	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  lines  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length;  int  lines  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    parameters.length;    int  lines  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
168	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length;  int  fields  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    rows    =    parameters.length;    int  fields  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
169	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  fields  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length;  int  fields  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    parameters.length;    int  fields  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
170	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    4);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	112	None	replace
171	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  4);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,  4);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    4);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	112	1	replace
172	[BUG]  [BUGGY]  Arrays.fill(jacobian,  4);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  4);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  4);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    4);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	112	1	replace
173	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    4);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	112	None	replace
174	[BUG]  [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
175	[BUG]  [BUGGY]  if(cols  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
176	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
177	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [CE]  cannot  find  symbol  index  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]);    }    	non-compiled	[CE]  cannot  find  symbol  index	123	None	replace
178	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  measurements.length);  [CE]  cannot  find  symbol  results  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  measurements.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  measurements.length);	  Arrays.fill(this.results,    0,    metrics.length);    	non-compiled	[CE]  cannot  find  symbol  results	128	None	replace
179	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  1;	  int    cols    =    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
180	[BUG]  [BUGGY]  int  cols  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  1;	  int    cols    =    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
181	[BUG]  [BUGGY]  int  cols  =  getColumnsCount();  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  getColumnsCount();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  getColumnsCount();	  int    cols    =    0;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
182	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    3);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	110	None	replace
183	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    3);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	110	None	replace
184	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(this.cols,  2);  Arrays.fill(jacobian,  3);  }  [CE]  incomparable  types:  int  and  <null>  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(this.cols,  2);  Arrays.fill(jacobian,  3);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(this.cols,  2);  Arrays.fill(jacobian,  3);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    3);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	110	None	replace
185	[BUG]  [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]    *    parameters[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
186	[BUG]  [BUGGY]  if(cols  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]    *    parameters[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
187	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [CE]  cannot  find  symbol  index  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]    *    parameters[i]);    }    	non-compiled	[CE]  cannot  find  symbol  index	120	None	replace
188	[BUG]  [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]    *    parameters[i]);    }    	non-compiled	[CE]  ')'  expected	120	None	replace
189	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rows,  costEvaluations);  [CE]  no  suitable  method  found  for  fill(int,int,int,int)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  rows,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  rows,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int)	52	None	replace
190	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  cols,  index,  costEvaluations);  [CE]  cannot  find  symbol  index  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  cols,  index,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  cols,  index,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  index	52	None	replace
191	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  0,  cols,  costEvaluations);  [CE]  cannot  find  symbol  index  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index,  0,  cols,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  0,  cols,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  index	52	None	replace
192	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rows,  cols,  costEvaluations);  [CE]  no  suitable  method  found  for  fill(int,int,int,int,int)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  rows,  cols,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  rows,  cols,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int,int)	52	None	replace
193	[BUG]  [BUGGY]  Arrays.fill(rows,  cols,  jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,double[],int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  cols,  jacobian,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  cols,  jacobian,  0,  cols);	  Arrays.fill(rows,    index,    jacobian,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,double[],int,int)	37	None	replace
194	[BUG]  [BUGGY]  Arrays.fill(rows,  rows,  jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,double[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  rows,  jacobian,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  rows,  jacobian,  0,  cols);	  Arrays.fill(rows,    index,    jacobian,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,double[],int,int)	37	None	replace
195	[BUG]  [BUGGY]  Arrays.fill(rows,  columns,  jacobian,  0,  cols);  [CE]  cannot  find  symbol  columns  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  columns,  jacobian,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  columns,  jacobian,  0,  cols);	  Arrays.fill(rows,    index,    jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  columns	37	None	replace
196	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  parameters.length  -  1);  [CE]  cannot  find  symbol  random  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(random,  parameters.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random,  parameters.length  -  1);	  int    rows    =    Math.min(random,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  random	8	None	replace
197	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  parameters.length,  maxCostEval);  [CE]  cannot  find  symbol  random  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(random,  parameters.length,  maxCostEval);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random,  parameters.length,  maxCostEval);	  int    rows    =    Math.min(random,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  random	8	None	replace
198	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  parameters.length  +  1);  [CE]  cannot  find  symbol  random  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(random,  parameters.length  +  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random,  parameters.length  +  1);	  int    rows    =    Math.min(random,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  random	8	None	replace
199	[BUG]  [BUGGY]  int  cols  =  this.parameters.length;  int  cols  =  this.parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.parameters.length;  int  cols  =  this.parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    this.parameters.length;    int  cols  =  this.parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	32	None	add
200	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.parameters.length;  int  rows  =  this.parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    cols    =    this.parameters.length;    int  rows  =  this.parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	add
201	[BUG]  [BUGGY]  int  cols  =  this.parameters.length;  int  rows  =  this.parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.parameters.length;  int  rows  =  this.parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    this.parameters.length;    int  rows  =  this.parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	add
202	[BUG]  [BUGGY]  int  cols  =  this.parameters.length;  Integer  cols  =  this.parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.parameters.length;  Integer  cols  =  this.parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    this.parameters.length;    Integer  cols  =  this.parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	32	None	add
203	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.parameters.length;  int  columns  =  this.parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    cols    =    this.parameters.length;    int  columns  =  this.parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	add
204	[BUG]  [BUGGY]  int  cols  =  this.parameters.length;  int  columns  =  this.parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.parameters.length;  int  columns  =  this.parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    this.parameters.length;    int  columns  =  this.parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	add
205	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  measurements.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  measurements.length  -  1;	  int    cols    =    measurements.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	1	replace
206	[BUG]  [BUGGY]  int  cols  =  measurements.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  measurements.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  measurements.length  -  1;	  int    cols    =    measurements.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	1	replace
207	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.  measurements.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  this.  measurements.length;	  int    cols    =    measurements.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	1	replace
208	[BUG]  [BUGGY]  int  cols  =  this.  measurements.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.  measurements.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  this.  measurements.length;	  int    cols    =    measurements.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	1	replace
209	[BUG]  [BUGGY]  int  cols  =  this.resultEvaluations.length;  [CE]  cannot  find  symbol  resultEvaluations  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  this.resultEvaluations.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  this.resultEvaluations.length;	  int    cols    =    measurements.length;    	non-compiled	[CE]  cannot  find  symbol  resultEvaluations	93	None	replace
210	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  /  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  getColumnCount()  /  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  getColumnCount()  /  1;	  int    cols    =    getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
211	[BUG]  [BUGGY]  int  rows  =  Math.min(measures.size());  [CE]  cannot  find  symbol  measures  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(measures.size());  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(measures.size());	  int    rows    =    Math.min(measures.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  measures	139	None	replace
212	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.size()  -  1);  [CE]  cannot  find  symbol  remainings  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(remainings.size()  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(remainings.size()  -  1);	  int    rows    =    Math.min(measures.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	139	None	replace
213	[BUG]  [BUGGY]  int  rows  =  Math.min(  measurements.size()  -  1);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(  measurements.size()  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(  measurements.size()  -  1);	  int    rows    =    Math.min(measures.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
214	[BUG]  [BUGGY]  int  cols  =  Math.min(resultEvaluations.length,  parameters.length);  [CE]  cannot  find  symbol  resultEvaluations  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(resultEvaluations.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(resultEvaluations.length,  parameters.length);	  int    cols    =    Math.min(resultEvaluations.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  resultEvaluations	98	None	replace
215	[BUG]  [BUGGY]  int  cols  =  Math.min(resultEvaluations.length,  data.length);  [CE]  cannot  find  symbol  resultEvaluations  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(resultEvaluations.length,  data.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(resultEvaluations.length,  data.length);	  int    cols    =    Math.min(resultEvaluations.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  resultEvaluations	98	None	replace
216	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
217	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
218	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  0;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  parameters.length;  int  rows  =  0;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
219	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  rows  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  0;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length;  int  rows  =  0;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
220	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
221	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
222	[BUG]  [BUGGY]  Arrays.fill(rows,  rows,  0);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  rows,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  rows,  0);	  Arrays.fill(rows,    index,    0);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	44	None	replace
223	[BUG]  [BUGGY]  Arrays.fill(rows,  columns,  0);  [CE]  cannot  find  symbol  columns  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  columns,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  columns,  0);	  Arrays.fill(rows,    index,    0);    	non-compiled	[CE]  cannot  find  symbol  columns	44	None	replace
224	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  rows  =  Math.min(parameters.length,  parameters.length);  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  rows  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    parameters.length);    int  rows  =  Math.min(parameters.length,  parameters.length);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	5	None	add
225	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  rows  =  Math.max(parameters.length,  parameters.length);  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  rows  =  Math.max(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    parameters.length);    int  rows  =  Math.max(parameters.length,  parameters.length);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	5	None	add
226	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  Integer  rows  =  Math.min(parameters.length,  parameters.length);  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  Integer  rows  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    parameters.length);    Integer  rows  =  Math.min(parameters.length,  parameters.length);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	5	None	add
227	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  columns  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    rows    =    Math.min(parameters.length,    parameters.length);    int  columns  =  Math.min(parameters.length,  parameters.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
228	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  columns  =  Math.min(parameters.length,  parameters.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  columns  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    parameters.length);    int  columns  =  Math.min(parameters.length,  parameters.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
229	[BUG]  [BUGGY]  Arrays.fill(random,  0,  cols);  [CE]  cannot  find  symbol  random  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(random,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(random,  0,  cols);	  Arrays.fill(random,    rows,    0);    	non-compiled	[CE]  cannot  find  symbol  random	46	None	replace
230	[BUG]  [BUGGY]  Arrays.fill(random,  index,  0);  [CE]  cannot  find  symbol  random  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(random,  index,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(random,  index,  0);	  Arrays.fill(random,    rows,    0);    	non-compiled	[CE]  cannot  find  symbol  random	46	None	replace
231	[BUG]  [BUGGY]  Arrays.fill(this.random,  rows,  0);  [CE]  cannot  find  symbol  random  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.random,  rows,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.random,  rows,  0);	  Arrays.fill(random,    rows,    0);    	non-compiled	[CE]  cannot  find  symbol  random	46	None	replace
232	[BUG]  [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(variables[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
233	[BUG]  [BUGGY]  if(cols  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(variables[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
234	[BUG]  [BUGGY]  Arrays.fill(variables,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(variables,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(variables,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(variables[i]);    }    	non-compiled	[CE]  cannot  find  symbol  	121	None	replace
235	[BUG]  [BUGGY]  if(cols!=  null)  {  Arrays.fill(variables,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols!=  null)  {  Arrays.fill(variables,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols!=  null)  {  Arrays.fill(variables,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(variables[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
236	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  0,  rows);  [CE]  cannot  find  symbol  index  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index,  0,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  0,  rows);	  Arrays.fill(rows,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  index	45	None	replace
237	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rows,  index);  [CE]  cannot  find  symbol  index  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  rows,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  rows,  index);	  Arrays.fill(rows,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  index	45	None	replace
238	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  index,  rows);  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  index,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  index,  rows);	  Arrays.fill(rows,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  index	45	None	replace
239	[BUG]  [BUGGY]  Arrays.fill(variables,  2);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(variables,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(variables,  2);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(variables[i]);    	non-compiled	[CE]  cannot  find  symbol  	13	None	replace
240	[BUG]  [BUGGY]  Arrays.fill(variables,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(variables,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(variables,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(variables[i]);    	non-compiled	[CE]  cannot  find  symbol  	13	None	replace
241	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(variables[i]);    	non-compiled	[CE]  cannot  find  symbol  index	13	None	replace
242	[BUG]  [BUGGY]  Arrays.fill(variables[i],  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(variables[i],  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(variables[i],  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(variables[i]);    	non-compiled	[CE]  cannot  find  symbol  	13	None	replace
243	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  rows,  index);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  rows,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  rows,  index);	  Arrays.fill(this.results,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  results	64	None	replace
244	[BUG]  [BUGGY]  Arrays.fill(this.results,  1,  cols);  [CE]  cannot  find  symbol  results  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  1,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  1,  cols);	  Arrays.fill(this.results,    2);    	non-compiled	[CE]  cannot  find  symbol  results	106	None	replace
245	[BUG]  [BUGGY]  int  rows  =  Math.min(redefinitions.length,  cols.length);  [CE]  cannot  find  symbol  redefinitions  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(redefinitions.length,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(redefinitions.length,  cols.length);	  int    rows    =    Math.min(cols.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  redefinitions	15	None	replace
246	[BUG]  [BUGGY]  int  rows  =  Math.max(results.length,  parameters.length);  [CE]  cannot  find  symbol  results  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.max(results.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.max(results.length,  parameters.length);	  int    rows    =    Math.min(parameters.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  results	133	None	replace
247	[BUG]  [BUGGY]  Integer  cols  =  getColumnCount()  /  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Integer  cols  =  getColumnCount()  /  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Integer  cols  =  getColumnCount()  /  1;	  Integer    cols    =    getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
248	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(  measurements.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  Math.min(  measurements.length,  parameters.length);	  int    cols    =    Math.min(remainings.length,    measurements.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
249	[BUG]  [BUGGY]  int  cols  =  Math.min(  measurements.length,  parameters.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(  measurements.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(  measurements.length,  parameters.length);	  int    cols    =    Math.min(remainings.length,    measurements.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
250	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(measurements.length,  measurements.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  Math.min(measurements.length,  measurements.length);	  int    cols    =    Math.min(remainings.length,    measurements.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
251	[BUG]  [BUGGY]  int  cols  =  Math.min(measurements.length,  measurements.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(measurements.length,  measurements.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(measurements.length,  measurements.length);	  int    cols    =    Math.min(remainings.length,    measurements.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
252	[BUG]  [BUGGY]  int  cols  =  Math.min(results.length,  measurements.length);  [CE]  cannot  find  symbol  results  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(results.length,  measurements.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(results.length,  measurements.length);	  int    cols    =    Math.min(remainings.length,    measurements.length);    	non-compiled	[CE]  cannot  find  symbol  results	101	None	replace
253	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  jacobian.length);  [CE]  cannot  find  symbol  results  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(results.length,  jacobian.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.length,  jacobian.length);	  int    rows    =    Math.min(colons.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  results	136	None	replace
254	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(maxCostEval,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  Math.min(maxCostEval,  parameters.length);	  int    rows    =    Math.min(remainings.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	124	1	replace
255	[BUG]  [BUGGY]  int  rows  =  Math.min(maxCostEval,  parameters.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(maxCostEval,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(maxCostEval,  parameters.length);	  int    rows    =    Math.min(remainings.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	124	1	replace
256	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  jacobianEvaluations);  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index,  jacobianEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  jacobianEvaluations);	  Arrays.fill(rows,    index,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	50	None	replace
257	[BUG]  [BUGGY]  Arrays.fill(rows,  cols,  costEvaluations);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  cols,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  cols,  costEvaluations);	  Arrays.fill(rows,    index,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	50	None	replace
258	[BUG]  [BUGGY]  Arrays.fill(rows,  rows,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  rows,  cols);	  Arrays.fill(rows,    index,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	50	None	replace
259	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    3);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	58	None	replace
260	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    3);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	58	None	replace
261	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rows,  index,  cols);  [CE]  cannot  find  symbol  index  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  rows,  index,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  rows,  index,  cols);	  Arrays.fill(rows,    0,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	51	None	replace
262	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  rows,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,int,int)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(cols,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  0,  rows,  cols);	  Arrays.fill(rows,    0,    rows,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int)	51	None	replace
263	[BUG]  [BUGGY]  int  cols  =  Math.min(  measurements.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(  measurements.length,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(  measurements.length,  cols.length);	  int    cols    =    Math.min(cols.length,    measurements.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
264	[BUG]  [BUGGY]  int  cols  =  Math.min(mappings.length,  measurements.length);  [CE]  cannot  find  symbol  mappings  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(mappings.length,  measurements.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(mappings.length,  measurements.length);	  int    cols    =    Math.min(cols.length,    measurements.length);    	non-compiled	[CE]  cannot  find  symbol  mappings	4	None	replace
265	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rowCount,  cols);  [CE]  cannot  find  symbol  rowCount  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  rowCount,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  rowCount,  cols);	  Arrays.fill(rows,    0,    index,    cols);    	non-compiled	[CE]  cannot  find  symbol  rowCount	114	None	replace
266	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  columns,  cols);  [CE]  cannot  find  symbol  columns  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  columns,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  columns,  cols);	  Arrays.fill(rows,    0,    index,    cols);    	non-compiled	[CE]  cannot  find  symbol  columns	114	None	replace
267	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  rows,  index);  [CE]  cannot  find  symbol  index  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(cols,  0,  rows,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  0,  rows,  index);	  Arrays.fill(rows,    0,    index,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	114	None	replace
268	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  rows  =  Math.min(parameters.length,  residuals.length);  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  rows  =  Math.min(parameters.length,  residuals.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    residuals.length);    int  rows  =  Math.min(parameters.length,  residuals.length);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	132	None	add
269	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  rows  =  Math.max(parameters.length,  residuals.length);  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  rows  =  Math.max(parameters.length,  residuals.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    residuals.length);    int  rows  =  Math.max(parameters.length,  residuals.length);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	132	None	add
270	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  rows  =  Math.min(parameters.length,  parameters.length);  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  rows  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    residuals.length);    int  rows  =  Math.min(parameters.length,  parameters.length);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	132	None	add
271	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  rows  =  Math.min(parameters.length,  remaining.length);  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  rows  =  Math.min(parameters.length,  remaining.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    residuals.length);    int  rows  =  Math.min(parameters.length,  remaining.length);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	132	None	add
272	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  int  cols  =  parameters.length  -  2;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  2;  int  cols  =  parameters.length  -  2;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    parameters.length    -    2;    int  cols  =  parameters.length  -  2;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	28	None	add
273	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  Integer  cols  =  parameters.length  -  2;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  2;  Integer  cols  =  parameters.length  -  2;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    parameters.length    -    2;    Integer  cols  =  parameters.length  -  2;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	28	None	add
274	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  2;  int  rows  =  parameters.length  -  2;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    cols    =    parameters.length    -    2;    int  rows  =  parameters.length  -  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
275	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  int  rows  =  parameters.length  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  2;  int  rows  =  parameters.length  -  2;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    parameters.length    -    2;    int  rows  =  parameters.length  -  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
276	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  2;  int  columns  =  parameters.length  -  2;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    cols    =    parameters.length    -    2;    int  columns  =  parameters.length  -  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
277	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  int  columns  =  parameters.length  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  2;  int  columns  =  parameters.length  -  2;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    parameters.length    -    2;    int  columns  =  parameters.length  -  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
278	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  parameters.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	70	None	add
279	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  Integer  cols  =  parameters.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  Integer  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    Integer  cols  =  parameters.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	70	None	add
280	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  variables.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  variables.length;  int  rows  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    int  cols  =  variables.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	70	None	add
281	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  measurements.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  measurements.length;  int  rows  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    int  cols  =  measurements.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	70	None	add
282	[BUG]  [BUGGY]  int  cols  =  Math.min(data.length,  data.length);  [CE]  cannot  find  symbol  data  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(data.length,  data.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(data.length,  data.length);	  int    cols    =    Math.min(cols.length,    data.length);    	non-compiled	[CE]  cannot  find  symbol  data	103	None	replace
283	[BUG]  [BUGGY]  int  cols  =  Math.min(data.length,  cols.length);  [CE]  cannot  find  symbol  data  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(data.length,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(data.length,  cols.length);	  int    cols    =    Math.min(cols.length,    data.length);    	non-compiled	[CE]  cannot  find  symbol  data	103	None	replace
284	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  data.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(cols.length,  data.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols.length,  data.length  -  1);	  int    cols    =    Math.min(cols.length,    data.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	103	None	replace
285	[BUG]  [BUGGY]  int  cols  =  Math.min(random.length,  parameters.length);  [CE]  cannot  find  symbol  random  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(random.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(random.length,  parameters.length);	  int    cols    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  random	99	None	replace
286	[BUG]  [BUGGY]  int  cols  =  Math.min(results.length,  parameters.length);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(results.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(results.length,  parameters.length);	  int    cols    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  results	99	None	replace
287	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  /  2;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  parameters.length  /  2;	  int    cols    =    parameters.length    -    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	replace
288	[BUG]  [BUGGY]  int  cols  =  parameters.length  /  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  /  2;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length  /  2;	  int    cols    =    parameters.length    -    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	replace
289	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  1);  [CE]  cannot  find  symbol  results  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  1);	  Arrays.fill(this.results,    1);    	non-compiled	[CE]  cannot  find  symbol  results	94	None	replace
290	[BUG]  [BUGGY]  int  cols  =  measurements.length;  int  cols  =  measurements.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  measurements.length;  int  cols  =  measurements.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    measurements.length;    int  cols  =  measurements.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	92	None	add
291	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  measurements.length;  int  rows  =  measurements.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    cols    =    measurements.length;    int  rows  =  measurements.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	1	add
292	[BUG]  [BUGGY]  int  cols  =  measurements.length;  int  rows  =  measurements.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  measurements.length;  int  rows  =  measurements.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    measurements.length;    int  rows  =  measurements.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	1	add
293	[BUG]  [BUGGY]  int  cols  =  measurements.length;  Integer  cols  =  measurements.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  measurements.length;  Integer  cols  =  measurements.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    measurements.length;    Integer  cols  =  measurements.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	92	None	add
294	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  measurements.length;  int  columns  =  measurements.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    cols    =    measurements.length;    int  columns  =  measurements.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	1	add
295	[BUG]  [BUGGY]  int  cols  =  measurements.length;  int  columns  =  measurements.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  measurements.length;  int  columns  =  measurements.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    measurements.length;    int  columns  =  measurements.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	1	add
296	[BUG]  [BUGGY]  Arrays.fill(jocobian,  1);  [CE]  cannot  find  symbol  jocobian  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jocobian,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jocobian,  1);	  Arrays.fill(jacobian,    1);    Arrays.fill(jocobian,    1);    	non-compiled	[CE]  cannot  find  symbol  jocobian	60	None	replace
297	[BUG]  [BUGGY]  int  cols  =  Math.min(random,  measurements.length  -  1);  [CE]  cannot  find  symbol  random  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(random,  measurements.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(random,  measurements.length  -  1);	  int    cols    =    Math.min(random,    measurements.length);    	non-compiled	[CE]  cannot  find  symbol  random	100	None	replace
298	[BUG]  [BUGGY]  int  cols  =  Math.min(random,  parameters.length);  [CE]  cannot  find  symbol  random  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(random,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(random,  parameters.length);	  int    cols    =    Math.min(random,    measurements.length);    	non-compiled	[CE]  cannot  find  symbol  random	100	None	replace
299	[BUG]  [BUGGY]  int  cols  =  Math.min(random,  measurements.length,  costEvaluations);  [CE]  cannot  find  symbol  random  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(random,  measurements.length,  costEvaluations);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(random,  measurements.length,  costEvaluations);	  int    cols    =    Math.min(random,    measurements.length);    	non-compiled	[CE]  cannot  find  symbol  random	100	None	replace
300	[BUG]  [BUGGY]  int  cols  =  Math.min(random,  measurements.length,  maxCostEval);  [CE]  cannot  find  symbol  random  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(random,  measurements.length,  maxCostEval);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(random,  measurements.length,  maxCostEval);	  int    cols    =    Math.min(random,    measurements.length);    	non-compiled	[CE]  cannot  find  symbol  random	100	None	replace
301	[BUG]  [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(parameters[i]);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	11	None	replace
302	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  [CE]  cannot  find  symbol  index  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(parameters[i]);    	non-compiled	[CE]  cannot  find  symbol  index	11	None	replace
303	[BUG]  [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  }  else  {  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  }  else  {  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols!=  null)  {  Arrays.fill(jacobian,  2);  }  else  {  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(parameters[i]);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	11	None	replace
304	[BUG]  [BUGGY]  Arrays.fill(rows,  cols,  0,  jacobianEvaluations);  [CE]  no  suitable  method  found  for  fill(int,int,int,int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  cols,  0,  jacobianEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  cols,  0,  jacobianEvaluations);	  Arrays.fill(rows,    index,    0,    jacobianEvaluations);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int)	119	None	replace
305	[BUG]  [BUGGY]  Arrays.fill(rows,  rows,  0,  jacobianEvaluations);  [CE]  no  suitable  method  found  for  fill(int,int,int,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  rows,  0,  jacobianEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  rows,  0,  jacobianEvaluations);	  Arrays.fill(rows,    index,    0,    jacobianEvaluations);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int)	119	None	replace
306	[BUG]  [BUGGY]  Arrays.fill(rows,  columns,  0,  jacobianEvaluations);  [CE]  cannot  find  symbol  columns  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  columns,  0,  jacobianEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  columns,  0,  jacobianEvaluations);	  Arrays.fill(rows,    index,    0,    jacobianEvaluations);    	non-compiled	[CE]  cannot  find  symbol  columns	119	None	replace
307	[BUG]  [BUGGY]  int  rows  =  Math.min(randoms.length,  parameters.length  -  1);  [CE]  cannot  find  symbol  randoms  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(randoms.length,  parameters.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(randoms.length,  parameters.length  -  1);	  int    rows    =    Math.min(randoms.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  randoms	107	None	replace
308	[BUG]  [BUGGY]  int  rows  =  Math.min(randoms.length,  cols.length);  [CE]  cannot  find  symbol  randoms  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(randoms.length,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(randoms.length,  cols.length);	  int    rows    =    Math.min(randoms.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  randoms	107	None	replace
309	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  1);  [CE]  cannot  find  symbol  index  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  1);	  Arrays.fill(rows,    1);    	non-compiled	[CE]  cannot  find  symbol  index	47	None	replace
310	[BUG]  [BUGGY]  Arrays.fill(rows,  index1,  1);  [CE]  cannot  find  symbol  index1  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index1,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index1,  1);	  Arrays.fill(rows,    1);    	non-compiled	[CE]  cannot  find  symbol  index1	47	None	replace
311	[BUG]  [BUGGY]  Arrays.fill(random,  rows,  1);  [CE]  cannot  find  symbol  random  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(random,  rows,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(random,  rows,  1);	  Arrays.fill(rows,    1);    	non-compiled	[CE]  cannot  find  symbol  random	47	None	replace
312	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  [CE]  cannot  find  symbol  index  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  index,  cols);	  Arrays.fill(jacobian,    0,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	36	None	replace
313	[BUG]  [BUGGY]  Arrays.fill(this.remainings,  0,  rows,  cols);  [CE]  cannot  find  symbol  remainings  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.remainings,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.remainings,  0,  rows,  cols);	  Arrays.fill(jacobian,    0,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  remainings	36	None	replace
314	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  rows,  cols);  [CE]  cannot  find  symbol  results  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  rows,  cols);	  Arrays.fill(jacobian,    0,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  results	36	None	replace
315	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	109	1	add
316	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	109	1	add
317	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	109	1	add
318	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	109	1	add
319	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jocobian,  2);  Arrays.fill(jacobian,  3);  [CE]  cannot  find  symbol  jocobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jocobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    3);    Arrays.fill(jocobian,  2);  Arrays.fill(jacobian,  3);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	109	None	add
320	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	109	1	add
321	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	109	1	add
322	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	add
323	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	add
324	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	add
325	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	add
326	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  2);  [CE]  cannot  find  symbol  jocobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  2);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	55	None	add
327	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	add
328	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	add
329	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  cols  =  parameters.length  -  1;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  cols  =  parameters.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    parameters.length    -    1;    int  cols  =  parameters.length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	26	None	add
330	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    cols    =    parameters.length    -    1;    int  rows  =  parameters.length  -  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	1	add
331	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    parameters.length    -    1;    int  rows  =  parameters.length  -  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	1	add
332	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  parameters  =  parameters.length  -  1;  [CE]  int  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  parameters  =  parameters.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    parameters.length    -    1;    int  parameters  =  parameters.length  -  1;	  	non-compiled	[CE]  int  cannot  be  dereferenced	26	None	add
333	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    cols    =    parameters.length    -    1;    int  columns  =  parameters.length  -  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	1	add
334	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    parameters.length    -    1;    int  columns  =  parameters.length  -  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	1	add
335	[BUG]  [BUGGY]  Integer  cols  =  getColsCount();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Integer  cols  =  getColsCount();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Integer  cols  =  getColsCount();	  Integer    cols    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
336	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  this.results.length  +  1);  [CE]  cannot  find  symbol  results  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  this.results.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  this.results.length  +  1);	  Arrays.fill(this.results,    0,    this.results.length);    	non-compiled	[CE]  cannot  find  symbol  results	104	None	replace
337	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  this.results.length  -  1);  [CE]  cannot  find  symbol  results  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  this.results.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  this.results.length  -  1);	  Arrays.fill(this.results,    0,    this.results.length);    	non-compiled	[CE]  cannot  find  symbol  results	104	None	replace
338	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  this.results.length  +  2);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  this.results.length  +  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  this.results.length  +  2);	  Arrays.fill(this.results,    0,    this.results.length);    	non-compiled	[CE]  cannot  find  symbol  results	104	None	replace
339	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  /  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  parameters.length  /  1;	  int    cols    =    parameters.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	1	replace
340	[BUG]  [BUGGY]  int  cols  =  parameters.length  /  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  /  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length  /  1;	  int    cols    =    parameters.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	1	replace
341	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1  +  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  parameters.length  -  1  +  1;	  int    cols    =    parameters.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	1	replace
342	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1  +  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length  -  1  +  1;	  int    cols    =    parameters.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	1	replace
343	[BUG]  [BUGGY]  Integer  cols  =  getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Integer  cols  =  getColumnCount()  +  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Integer  cols  =  getColumnCount()  +  1;	  Integer    cols    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
344	[BUG]  [BUGGY]  Integer  cols  =  getColumnCount()  *  2;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Integer  cols  =  getColumnCount()  *  2;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Integer  cols  =  getColumnCount()  *  2;	  Integer    cols    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
345	[BUG]  [BUGGY]  Arrays.fill(rows,  cols);  [CE]  no  suitable  method  found  for  fill(int,int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  cols);	  Arrays.fill(rows,    index);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int)	97	None	replace
346	[BUG]  [BUGGY]  Arrays.fill(rows,  columns);  [CE]  cannot  find  symbol  columns  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  columns);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  columns);	  Arrays.fill(rows,    index);    	non-compiled	[CE]  cannot  find  symbol  columns	97	None	replace
347	[BUG]  [BUGGY]  Arrays.fill(rows,  rows);  [CE]  no  suitable  method  found  for  fill(int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  rows);	  Arrays.fill(rows,    index);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int)	97	None	replace
348	[BUG]  [BUGGY]  Arrays.fill(rows,  column);  [CE]  cannot  find  symbol  column  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  column);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  column);	  Arrays.fill(rows,    index);    	non-compiled	[CE]  cannot  find  symbol  column	97	None	replace
349	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  this.cols);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  this.cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  this.cols);	  Arrays.fill(this.results,    0,    this.cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	62	None	replace
350	[BUG]  [BUGGY]  Arrays.fill(this.cols,  0,  this.results.length);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.cols,  0,  this.results.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.cols,  0,  this.results.length);	  Arrays.fill(this.results,    0,    this.cols);    	non-compiled	[CE]  cannot  find  symbol  results	62	None	replace
351	[BUG]  [BUGGY]  int  cols  =  variables.length;  int  parameters  =  parameters.length;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  variables.length;  int  parameters  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  variables.length;  int  parameters  =  parameters.length;	          int    cols    =    parameters.length;    int    parameters    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol  	74	None	replace
352	[BUG]  [BUGGY]  Arrays.fill(rows,  cols,  1);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  cols,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  cols,  1);	  Arrays.fill(cols,    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	48	None	replace
353	[BUG]  [BUGGY]  Arrays.fill(rows,  column,  1);  [CE]  cannot  find  symbol  column  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  column,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  column,  1);	  Arrays.fill(cols,    1);    	non-compiled	[CE]  cannot  find  symbol  column	48	None	replace
354	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  cols.length  -  1);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(results.length,  cols.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.length,  cols.length  -  1);	  int    rows    =    Math.min(results.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  results	16	None	replace
355	[BUG]  [BUGGY]  int  rows  =  getColsCount();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  getColsCount();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getColsCount();	  int    rows    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
356	[BUG]  [BUGGY]  Arrays.fill(remainings,  2);  [CE]  cannot  find  symbol  remainings  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(remainings,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(remainings,  2);	  Arrays.fill(jacobian,    2);    Arrays.fill(jocobian,    2);    	non-compiled	[CE]  cannot  find  symbol  remainings	113	None	replace
357	[BUG]  [BUGGY]  Arrays.fill(random,  2);  [CE]  cannot  find  symbol  random  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(random,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(random,  2);	  Arrays.fill(jacobian,    2);    Arrays.fill(jocobian,    2);    	non-compiled	[CE]  cannot  find  symbol  random	113	None	replace
358	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
359	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
360	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(this.cols,  1);  Arrays.fill(jacobian,  2);  }  [CE]  incomparable  types:  int  and  <null>  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(this.cols,  1);  Arrays.fill(jacobian,  2);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(this.cols,  1);  Arrays.fill(jacobian,  2);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
361	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.size());  [CE]  cannot  find  symbol  remainings  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(remainings.size());  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(remainings.size());	  int    rows    =    Math.min(results.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	102	None	replace
362	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  1);  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.length,  cols.length  +  1);	  int    rows    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	76	None	replace
363	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols,  cols.length);	  int    rows    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	76	None	replace
364	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  cols  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	72	None	add
365	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  Integer  cols  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  Integer  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    Integer  cols  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	72	None	add
366	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  variables.length;  int  columns  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  variables.length;  int  columns  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  cols  =  variables.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	72	None	add
367	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  columns  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  columns  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  columns  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  columns  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  columns  is  already  defined  in  method  updateJacobian()	72	None	add
368	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  2);  [CE]  cannot  find  symbol  index  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  2);	  Arrays.fill(rows,    2);    	non-compiled	[CE]  cannot  find  symbol  index	19	None	replace
369	[BUG]  [BUGGY]  Arrays.fill(rows,  index2,  2);  [CE]  cannot  find  symbol  index2  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index2,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index2,  2);	  Arrays.fill(rows,    2);    	non-compiled	[CE]  cannot  find  symbol  index2	19	None	replace
370	[BUG]  [BUGGY]  Arrays.fill(random,  rows,  2);  [CE]  cannot  find  symbol  random  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(random,  rows,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(random,  rows,  2);	  Arrays.fill(rows,    2);    	non-compiled	[CE]  cannot  find  symbol  random	19	None	replace
371	[BUG]  [BUGGY]  int  rows  =  Math.min(maxCostEval,  residuals.size());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(maxCostEval,  residuals.size());  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(maxCostEval,  residuals.size());	  int    rows    =    Math.min(remainders.size());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
372	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,  0,  rows,  costEvaluations);	  Arrays.fill(jacobian,    0,    rows,    index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	1	replace
373	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  costEvaluations);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  rows,  costEvaluations);	  Arrays.fill(jacobian,    0,    rows,    index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	1	replace
374	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  weightEvaluations);  [CE]  cannot  find  symbol  weightEvaluations  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  weightEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  rows,  weightEvaluations);	  Arrays.fill(jacobian,    0,    rows,    index);    	non-compiled	[CE]  cannot  find  symbol  weightEvaluations	42	None	replace
375	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  column);  [CE]  cannot  find  symbol  column  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  column);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  rows,  column);	  Arrays.fill(jacobian,    0,    rows,    index);    	non-compiled	[CE]  cannot  find  symbol  column	42	None	replace
376	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	134	1	add
377	[BUG]  [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	134	1	add
378	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  4);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	134	1	add
379	[BUG]  [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  4);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  4);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	134	1	add
380	[BUG]  [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jocobian,  3);  [CE]  cannot  find  symbol  jocobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jocobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    3);    Arrays.fill(jocobian,  3);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	134	None	add
381	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	134	1	add
382	[BUG]  [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	134	1	add
383	[BUG]  [BUGGY]  int  cols  =  Math.min(remainings.length,  jacobian.length  -  1);  [CE]  cannot  find  symbol  remainings  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(remainings.length,  jacobian.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(remainings.length,  jacobian.length  -  1);	  int    cols    =    Math.min(remainings.length,    jacobian.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	116	None	replace
384	[BUG]  [BUGGY]  int  cols  =  Math.min(remainings.length,  jacobian.length  +  1);  [CE]  cannot  find  symbol  remainings  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(remainings.length,  jacobian.length  +  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(remainings.length,  jacobian.length  +  1);	  int    cols    =    Math.min(remainings.length,    jacobian.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	116	None	replace
385	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    4);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
386	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    4);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
387	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    4);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
388	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    4);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
389	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  4);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    4);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
390	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  4);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  4);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    4);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
391	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jocobian,  2);  Arrays.fill(jacobian,  4);  [CE]  cannot  find  symbol  jocobian  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jocobian,  2);  Arrays.fill(jacobian,  4);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    4);    Arrays.fill(jocobian,  2);  Arrays.fill(jacobian,  4);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	111	None	add
392	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  cols);  [CE]  variable  rows  might  not  have  been  initialized  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(rows,  cols);	          int    rows    =    Math.min(rows,    index);    	non-compiled	[CE]  variable  rows  might  not  have  been  initialized	75	None	replace
393	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  maxCostEval);  [CE]  variable  rows  might  not  have  been  initialized  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(rows,  maxCostEval);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(rows,  maxCostEval);	          int    rows    =    Math.min(rows,    index);    	non-compiled	[CE]  variable  rows  might  not  have  been  initialized	75	None	replace
394	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  column);  [CE]  cannot  find  symbol  column  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(rows,  column);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(rows,  column);	          int    rows    =    Math.min(rows,    index);    	non-compiled	[CE]  cannot  find  symbol  column	75	None	replace
395	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  i);  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(rows,  i);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(rows,  i);	          int    rows    =    Math.min(rows,    index);    	non-compiled	[CE]  cannot  find  symbol  i	75	None	replace
396	[BUG]  [BUGGY]  Arrays.fill(rows,  jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(int,double[],int,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  jacobian,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  jacobian,  0,  cols);	  Arrays.fill(index,    jacobian,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,double[],int,int)	87	None	replace
397	[BUG]  [BUGGY]  Arrays.fill(this.remainings,  jacobian,  0,  cols);  [CE]  cannot  find  symbol  remainings  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.remainings,  jacobian,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.remainings,  jacobian,  0,  cols);	  Arrays.fill(index,    jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  remainings	87	None	replace
398	[BUG]  [BUGGY]  Arrays.fill(cols,  jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(int,double[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(cols,  jacobian,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  jacobian,  0,  cols);	  Arrays.fill(index,    jacobian,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,double[],int,int)	87	None	replace
399	[BUG]  [BUGGY]  Arrays.fill(random,  jacobian,  0,  cols);  [CE]  cannot  find  symbol  random  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(random,  jacobian,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(random,  jacobian,  0,  cols);	  Arrays.fill(index,    jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  random	87	None	replace
400	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  cols.length);	  Arrays.fill(cols,    0,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	40	None	replace
401	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  cols.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(cols,  0,  cols.length  -  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  0,  cols.length  -  1);	  Arrays.fill(cols,    0,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	40	None	replace
402	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  cols.length  +  1);  [CE]  int  cannot  be  dereferenced  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(cols,  0,  cols.length  +  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  0,  cols.length  +  1);	  Arrays.fill(cols,    0,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	40	None	replace
403	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  [CE]  cannot  find  symbol  index  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[i]);    	non-compiled	[CE]  cannot  find  symbol  index	12	None	replace
404	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols.length);  jacobian[index++]  =  -Math.sqrt(cols[i]);  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  cols.length);  jacobian[index++]  =  -Math.sqrt(cols[i]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  cols.length);  jacobian[index++]  =  -Math.sqrt(cols[i]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[i]);    	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	replace
405	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[rows++]  =  -Math.sqrt(cols[i]);  [CE]  cannot  find  symbol  i  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[rows++]  =  -Math.sqrt(cols[i]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  2);  jacobian[rows++]  =  -Math.sqrt(cols[i]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[i]);    	non-compiled	[CE]  cannot  find  symbol  i	12	None	replace
406	[BUG]  [BUGGY]  Arrays.fill(rows,  jacobian,  0,  rows);  [CE]  no  suitable  method  found  for  fill(int,double[],int,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  jacobian,  0,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  jacobian,  0,  rows);	  Arrays.fill(index,    jacobian,    0,    rows);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,double[],int,int)	86	None	replace
407	[BUG]  [BUGGY]  Arrays.fill(cols,  jacobian,  0,  rows);  [CE]  no  suitable  method  found  for  fill(int,double[],int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(cols,  jacobian,  0,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  jacobian,  0,  rows);	  Arrays.fill(index,    jacobian,    0,    rows);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,double[],int,int)	86	None	replace
408	[BUG]  [BUGGY]  Arrays.fill(rows,  jacobian,  0,  index);  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  jacobian,  0,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  jacobian,  0,  index);	  Arrays.fill(index,    jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  index	86	None	replace
409	[BUG]  [BUGGY]  Arrays.fill(rows,  jacobian,  0,  columns);  [CE]  cannot  find  symbol  columns  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  jacobian,  0,  columns);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  jacobian,  0,  columns);	  Arrays.fill(index,    jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  columns	86	None	replace
410	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
411	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
412	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(this.cols,  1);  Arrays.fill(jacobian,  1);  }  [CE]  incomparable  types:  int  and  <null>  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(this.cols,  1);  Arrays.fill(jacobian,  1);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(this.cols,  1);  Arrays.fill(jacobian,  1);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
413	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  [CE]  cannot  find  symbol  index  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[0]);    	non-compiled	[CE]  cannot  find  symbol  index	14	None	replace
414	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols.length);  jacobian[index++]  =  -Math.sqrt(cols[0]);  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  cols.length);  jacobian[index++]  =  -Math.sqrt(cols[0]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  cols.length);  jacobian[index++]  =  -Math.sqrt(cols[0]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[0]);    	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	replace
415	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  cols.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  cols.length);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[0]);    	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	replace
416	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  costEvaluations.length);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols,  costEvaluations.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols,  costEvaluations.length);	  int    rows    =    Math.min(random,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	89	None	replace
417	[BUG]  [BUGGY]  Arrays.fill(randoms,  0);  [CE]  cannot  find  symbol  randoms  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(randoms,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(randoms,  0);	  Arrays.fill(remainings,    0);    	non-compiled	[CE]  cannot  find  symbol  randoms	96	None	replace
418	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	add
419	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	add
420	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  costEvaluations);  [CE]  cannot  find  symbol  results  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(results.length,  costEvaluations);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.length,  costEvaluations);	  int    rows    =    Math.min(colons.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  results	136	None	replace
421	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  data.length);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(results.length,  data.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.length,  data.length);	  int    rows    =    Math.min(colons.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  results	136	None	replace
422	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  data.length);  [CE]  cannot  find  symbol  results  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  data.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  data.length);	  Arrays.fill(this.results,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  results	61	None	replace
423	[BUG]  [BUGGY]  Arrays.fill(arrayCount,  0);  [CE]  cannot  find  symbol  arrayCount  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(arrayCount,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(arrayCount,  0);	  Arrays.fill(rawRows,    0);    	non-compiled	[CE]  cannot  find  symbol  arrayCount	34	None	replace
424	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
425	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
426	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  +  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  parameters.length;  int  columns  =  parameters.length  +  1;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
427	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  +  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length;  int  columns  =  parameters.length  +  1;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
428	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  [CE]  cannot  find  symbol  remainings  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  cannot  find  symbol  remainings	56	None	replace
429	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  else  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  else  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  else  {	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
430	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
431	[BUG]  [BUGGY]  int  cols  =  Math.min(resultEvaluations.length,  measurements.length);  [CE]  cannot  find  symbol  resultEvaluations  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(resultEvaluations.length,  measurements.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(resultEvaluations.length,  measurements.length);	  int    cols    =    Math.min(resultEvaluations.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  resultEvaluations	98	None	replace
432	[BUG]  [BUGGY]  int  cols  =  Math.min(resultEvaluations.length,  results.length);  [CE]  cannot  find  symbol  resultEvaluations  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(resultEvaluations.length,  results.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(resultEvaluations.length,  results.length);	  int    cols    =    Math.min(resultEvaluations.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  resultEvaluations	98	None	replace
433	[BUG]  [BUGGY]  int  rows  =  Math.min(colons.length,  cols.length  -  1);  [CE]  cannot  find  symbol  colons  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(colons.length,  cols.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(colons.length,  cols.length  -  1);	  int    rows    =    Math.min(remainders.length,    cols.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  colons	17	None	replace
434	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(jacobian[i]    *    parameters[i]);    }    	non-compiled	[CE]  ')'  expected	122	None	replace
435	[BUG]  [BUGGY]  if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(jacobian[i]    *    parameters[i]);    }    	non-compiled	[CE]  ')'  expected	122	None	replace
436	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(jacobian[i]    *    parameters[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
437	[BUG]  [BUGGY]  if(results!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(results!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(results!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(jacobian[i]    *    parameters[i]);    }    	non-compiled	[CE]  ')'  expected	122	None	replace
438	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  index,  cols,  costEvaluations);  [CE]  cannot  find  symbol  index  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  index,  cols,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  index,  cols,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  index	52	None	replace
439	[BUG]  [BUGGY]  Arrays.fill(index,  0,  cols,  costEvaluations);  [CE]  cannot  find  symbol  index  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(index,  0,  cols,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(index,  0,  cols,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  index	52	None	replace
440	[BUG]  [BUGGY]  Arrays.fill(random,  0);  [CE]  cannot  find  symbol  random  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(random,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(random,  0);	  Arrays.fill(array,    0);    	non-compiled	[CE]  cannot  find  symbol  random	117	None	replace
441	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  cols  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    rows    =    Math.min(parameters.length,    parameters.length);    int  cols  =  Math.min(parameters.length,  parameters.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
442	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  cols  =  Math.min(parameters.length,  parameters.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  cols  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    parameters.length);    int  cols  =  Math.min(parameters.length,  parameters.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
443	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  fields  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    rows    =    Math.min(parameters.length,    parameters.length);    int  fields  =  Math.min(parameters.length,  parameters.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
444	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  fields  =  Math.min(parameters.length,  parameters.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  fields  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    parameters.length);    int  fields  =  Math.min(parameters.length,  parameters.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
445	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  lines  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    rows    =    Math.min(parameters.length,    parameters.length);    int  lines  =  Math.min(parameters.length,  parameters.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
446	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  lines  =  Math.min(parameters.length,  parameters.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  int  lines  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    parameters.length);    int  lines  =  Math.min(parameters.length,  parameters.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
447	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  measurements.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  measurements.length;	  int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
448	[BUG]  [BUGGY]  int  rows  =  measurements.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  measurements.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  measurements.length;	  int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
449	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  [CE]  cannot  find  symbol  remainings  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	54	None	replace
450	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
451	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
452	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  for(int  i  =  0;  i  <  rows;  i++)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  for(int  i  =  0;  i  <  rows;  i++)  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  for(int  i  =  0;  i  <  rows;  i++)  {	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
453	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
454	[BUG]  [BUGGY]  if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
455	[BUG]  [BUGGY]  if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
456	[BUG]  [BUGGY]  if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  [CE]  ')'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
457	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }  [CE]  cannot  find  symbol  remainings  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(parameters[i]);    	non-compiled	[CE]  cannot  find  symbol  remainings	11	None	replace
458	[BUG]  [BUGGY]  if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }  [CE]  cannot  find  symbol  remainings  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(parameters[i]);    	non-compiled	[CE]  cannot  find  symbol  remainings	11	None	replace
459	[BUG]  [BUGGY]  if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }  [CE]  cannot  find  symbol  remainings  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(parameters[i]);    	non-compiled	[CE]  cannot  find  symbol  remainings	11	None	replace
460	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }  [CE]  cannot  find  symbol  remainings  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(parameters[i]);    	non-compiled	[CE]  cannot  find  symbol  remainings	11	None	replace
461	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  rows.length);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(cols,  0,  rows.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  0,  rows.length);	  Arrays.fill(cols,    0,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	40	None	replace
462	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  cols.length,  parameters.length);  [CE]  int  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(cols,  0,  cols.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  0,  cols.length,  parameters.length);	  Arrays.fill(cols,    0,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	40	None	replace
463	[BUG]  [BUGGY]  int  rows  =  getRowCount()  /  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  getRowCount()  /  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getRowCount()  /  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
464	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  data.length);  [CE]  cannot  find  symbol  data  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(cols,  data.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols,  data.length);	  int    cols    =    Math.min(cols.length,    data.length);    	non-compiled	[CE]  cannot  find  symbol  data	103	None	replace
465	[BUG]  [BUGGY]  int  cols  =  Math.min(data.length,  parameters.length);  [CE]  cannot  find  symbol  data  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(data.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(data.length,  parameters.length);	  int    cols    =    Math.min(cols.length,    data.length);    	non-compiled	[CE]  cannot  find  symbol  data	103	None	replace
466	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  index);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  index);	  Arrays.fill(this.results,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  results	64	None	replace
467	[BUG]  [BUGGY]  Arrays.fill(this.cols,  0,  parameters.length);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.cols,  0,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.cols,  0,  parameters.length);	  Arrays.fill(this.results,    0,    this.cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	62	None	replace
468	[BUG]  [BUGGY]  Arrays.fill(this.results,  3);  [CE]  cannot  find  symbol  results  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  3);	  Arrays.fill(jacobian,    3);    	non-compiled	[CE]  cannot  find  symbol  results	135	None	replace
469	[BUG]  [BUGGY]  int  rows  =  Math.min(measures.length,  2);  [CE]  cannot  find  symbol  measures  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(measures.length,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(measures.length,  2);	          int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  measures	126	None	replace
470	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  [CE]  cannot  find  symbol  remainings  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    4);    	non-compiled	[CE]  cannot  find  symbol  remainings	112	None	replace
471	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    4);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
472	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    4);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
473	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(maxCostEval,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  Math.min(maxCostEval,  parameters.length);	  int    cols    =    Math.min(remainings.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	1	replace
474	[BUG]  [BUGGY]  int  cols  =  Math.min(maxCostEval,  parameters.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(maxCostEval,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(maxCostEval,  parameters.length);	  int    cols    =    Math.min(remainings.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	1	replace
475	[BUG]  [BUGGY]  Arrays.fill(index,  0,  rows,  cols);  [CE]  cannot  find  symbol  index  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(index,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(index,  0,  rows,  cols);	  Arrays.fill(rows,    0,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	51	None	replace
476	[BUG]  [BUGGY]  Arrays.fill(rows,  cols,  jacobian,  0,  ratings);  [CE]  cannot  find  symbol  ratings  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  cols,  jacobian,  0,  ratings);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  cols,  jacobian,  0,  ratings);	  Arrays.fill(rows,    index,    jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  ratings	37	None	replace
477	[BUG]  [BUGGY]  Arrays.fill(rows,  rows,  index,  jacobian,  0,  cols);  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  rows,  index,  jacobian,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  rows,  index,  jacobian,  0,  cols);	  Arrays.fill(rows,    index,    jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	37	None	replace
478	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  columns.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(cols.length,  columns.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols.length,  columns.length  -  1);	  int    cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
479	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  rows  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  columns  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  rows  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  rows  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  columns  is  already  defined  in  method  updateJacobian()	72	None	add
480	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  5);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  5);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	134	1	add
481	[BUG]  [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  5);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  5);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  5);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	134	1	add
482	[BUG]  [BUGGY]  int  rows  =  Math.min(results.size(),  cols);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(results.size(),  cols);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.size(),  cols);	  int    rows    =    Math.min(results.size());    	non-compiled	[CE]  cannot  find  symbol  results	66	None	replace
483	[BUG]  [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(variables!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(variables[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
484	[BUG]  [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(variables!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(variables[i]);    }    	non-compiled	[CE]  ')'  expected	121	None	replace
485	[BUG]  [BUGGY]  int  cols  =  0;  Arrays.fill(jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  Arrays.fill(jacobian,  0,  cols);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    0;    Arrays.fill(jacobian,  0,  cols);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	30	None	add
486	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  Arrays.fill(jacobian,  0);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    cols    =    0;    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
487	[BUG]  [BUGGY]  int  cols  =  0;  Arrays.fill(jacobian,  0);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  Arrays.fill(jacobian,  0);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    0;    Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
488	[BUG]  [BUGGY]  Arrays.fill(results,  0,  this.results.length);  [CE]  cannot  find  symbol  results  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(results,  0,  this.results.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(results,  0,  this.results.length);	  Arrays.fill(this.results,    0,    this.results.length);    	non-compiled	[CE]  cannot  find  symbol  results	104	None	replace
489	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  metrics.length);  [CE]  cannot  find  symbol  metrics  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  metrics.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  rows,  metrics.length);	  Arrays.fill(jacobian,    0,    rows,    index);    	non-compiled	[CE]  cannot  find  symbol  metrics	42	None	replace
490	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  2);  [CE]  cannot  find  symbol  results  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  2);	  Arrays.fill(this.results,    2);    	non-compiled	[CE]  cannot  find  symbol  results	106	None	replace
491	[BUG]  [BUGGY]  Integer  cols  =  getColumnCount()  -  2;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Integer  cols  =  getColumnCount()  -  2;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Integer  cols  =  getColumnCount()  -  2;	  Integer    cols    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
492	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  5);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    4);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  5);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
493	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  5);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  5);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    4);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  5);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
494	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(measurements);  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Arrays.asList(measurements);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Arrays.asList(measurements);	  int    rows    =    Arrays.asList(remainders);    	non-compiled	[CE]  incompatible  types	125	None	replace
495	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(JacobianMeasurement.class);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Arrays.asList(JacobianMeasurement.class);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Arrays.asList(JacobianMeasurement.class);	  int    rows    =    Arrays.asList(remainders);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
496	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  costEvaluations);  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.length,  costEvaluations);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.length,  costEvaluations);	  int    rows    =    Math.min(colons.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	88	None	replace
497	[BUG]  [BUGGY]  int  rows  =  Math.min(cos.length,  cols.length);  [CE]  cannot  find  symbol  cos  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cos.length,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cos.length,  cols.length);	  int    rows    =    Math.min(colons.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  cos	88	None	replace
498	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  columns  =  Math.min(parameters.length,  residuals.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    rows    =    Math.min(parameters.length,    residuals.length);    int  columns  =  Math.min(parameters.length,  residuals.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	add
499	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  columns  =  Math.min(parameters.length,  residuals.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  columns  =  Math.min(parameters.length,  residuals.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    residuals.length);    int  columns  =  Math.min(parameters.length,  residuals.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	add
500	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  cols  =  Math.min(parameters.length,  residuals.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    rows    =    Math.min(parameters.length,    residuals.length);    int  cols  =  Math.min(parameters.length,  residuals.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	add
501	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  cols  =  Math.min(parameters.length,  residuals.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  cols  =  Math.min(parameters.length,  residuals.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    residuals.length);    int  cols  =  Math.min(parameters.length,  residuals.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	add
502	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  results  =  Math.min(parameters.length,  residuals.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    rows    =    Math.min(parameters.length,    residuals.length);    int  results  =  Math.min(parameters.length,  residuals.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	add
503	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  results  =  Math.min(parameters.length,  residuals.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  results  =  Math.min(parameters.length,  residuals.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    residuals.length);    int  results  =  Math.min(parameters.length,  residuals.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	add
504	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  fields  =  Math.min(parameters.length,  residuals.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int    rows    =    Math.min(parameters.length,    residuals.length);    int  fields  =  Math.min(parameters.length,  residuals.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	add
505	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  fields  =  Math.min(parameters.length,  residuals.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  fields  =  Math.min(parameters.length,  residuals.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    residuals.length);    int  fields  =  Math.min(parameters.length,  residuals.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	add
506	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  cols  =  measurements.length  -  1;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  cols  =  measurements.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    parameters.length    -    1;    int  cols  =  measurements.length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	26	None	add
507	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  this.maxCostEval);  [CE]  cannot  find  symbol  results  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  this.maxCostEval);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  this.maxCostEval);	  Arrays.fill(this.results,    1);    	non-compiled	[CE]  cannot  find  symbol  results	94	None	replace
508	[BUG]  [BUGGY]  Arrays.fill(this.results,  rows,  cols,  0);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  rows,  cols,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  rows,  cols,  0);	  Arrays.fill(rows,    cols,    0);    	non-compiled	[CE]  cannot  find  symbol  results	39	None	replace
509	[BUG]  [BUGGY]  Arrays.fill(random,  rows,  cols,  0);  [CE]  cannot  find  symbol  random  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(random,  rows,  cols,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(random,  rows,  cols,  0);	  Arrays.fill(rows,    cols,    0);    	non-compiled	[CE]  cannot  find  symbol  random	39	None	replace
510	[BUG]  [BUGGY]  Arrays.fill(rows,  cols,  0,  costEvaluations);  [CE]  no  suitable  method  found  for  fill(int,int,int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  cols,  0,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  cols,  0,  costEvaluations);	  Arrays.fill(rows,    index,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int)	49	None	replace
511	[BUG]  [BUGGY]  Arrays.fill(rows,  cols,  0,  ratings);  [CE]  cannot  find  symbol  ratings  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  cols,  0,  ratings);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  cols,  0,  ratings);	  Arrays.fill(rows,    index,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  ratings	49	None	replace
512	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  index);  [CE]  cannot  find  symbol  index  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  index);	  Arrays.fill(rows,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  index	45	None	replace
513	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  [CE]  cannot  find  symbol  remainings  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  cannot  find  symbol  remainings	10	None	replace
514	[BUG]  [BUGGY]  if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  [CE]  cannot  find  symbol  remainings  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  cannot  find  symbol  remainings	10	None	replace
515	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  else  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  else  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  else  {	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
516	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
517	[BUG]  [BUGGY]  Integer  cols  =  parameters.length;  int  parameters  =  parameters.length;  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Integer  cols  =  parameters.length;  int  parameters  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Integer  cols  =  parameters.length;  int  parameters  =  parameters.length;	          int    cols    =    parameters.length;    int    parameters    =    parameters.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	74	None	replace
518	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  measurements.length,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  measurements.length,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  measurements.length,  cols);	  Arrays.fill(rows,    0,    index,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int)	114	None	replace
519	[BUG]  [BUGGY]  Arrays.fill(array,  0,  rows,  cols);  [CE]  cannot  find  symbol  array  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(array,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(array,  0,  rows,  cols);	  Arrays.fill(rows,    0,    index,    cols);    	non-compiled	[CE]  cannot  find  symbol  array	114	None	replace
520	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  ratings);  [CE]  cannot  find  symbol  ratings  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  ratings);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  ratings);	  Arrays.fill(random,    rows,    0);    	non-compiled	[CE]  cannot  find  symbol  ratings	46	None	replace
521	[BUG]  [BUGGY]  Arrays.fill(runtime,  jacobian,  2);  [CE]  cannot  find  symbol  runtime  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(runtime,  jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(runtime,  jacobian,  2);	  Arrays.fill(jacobian,    2);    Arrays.fill(jocobian,    2);    	non-compiled	[CE]  cannot  find  symbol  runtime	113	None	replace
522	[BUG]  [BUGGY]  Arrays.fill(this.rows,  0,  this.results.length);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.rows,  0,  this.results.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.rows,  0,  this.results.length);	  Arrays.fill(this.results,    0,    this.rows);    	non-compiled	[CE]  cannot  find  symbol  results	63	None	replace
523	[BUG]  [BUGGY]  Arrays.fill(this.rows,  0,  parameters.length);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.rows,  0,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.rows,  0,  parameters.length);	  Arrays.fill(this.results,    0,    this.rows);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	63	None	replace
524	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  this.rows,  costEvaluations);  [CE]  cannot  find  symbol  results  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  this.rows,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  this.rows,  costEvaluations);	  Arrays.fill(this.results,    0,    this.rows);    	non-compiled	[CE]  cannot  find  symbol  results	63	None	replace
525	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]    *    parameters[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
526	[BUG]  [BUGGY]  if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]    *    parameters[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
527	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]    *    parameters[i]);    }    	non-compiled	[CE]  ')'  expected	120	None	replace
528	[BUG]  [BUGGY]  if(results!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(results!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(results!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]    *    parameters[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
529	[BUG]  [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[i]);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	12	None	replace
530	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  }  [CE]  cannot  find  symbol  remainings  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[i]);    	non-compiled	[CE]  cannot  find  symbol  remainings	12	None	replace
531	[BUG]  [BUGGY]  if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  }  [CE]  cannot  find  symbol  remainings  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[i]);    	non-compiled	[CE]  cannot  find  symbol  remainings	12	None	replace
532	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  }  [CE]  cannot  find  symbol  remainings  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[i]);    	non-compiled	[CE]  cannot  find  symbol  remainings	12	None	replace
533	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  jacobian.length);  [CE]  variable  cols  might  not  have  been  initialized  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(cols,  jacobian.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols,  jacobian.length);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  variable  cols  might  not  have  been  initialized	2	None	replace
534	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  parameters.length);  [CE]  variable  cols  might  not  have  been  initialized  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(cols,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols,  parameters.length);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  variable  cols  might  not  have  been  initialized	2	None	replace
535	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
536	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
537	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(colons,  2);  Arrays.fill(jacobian,  2);  [CE]  cannot  find  symbol  colons  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(colons,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    2);    Arrays.fill(colons,  2);  Arrays.fill(jacobian,  2);	  	non-compiled	[CE]  cannot  find  symbol  colons	9	None	add
538	[BUG]  [BUGGY]  Arrays.fill(array,  jacobian,  0,  cols);  [CE]  cannot  find  symbol  array  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(array,  jacobian,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(array,  jacobian,  0,  cols);	  Arrays.fill(index,    jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  array	87	None	replace
539	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,  rows);	  Arrays.fill(jacobian,    index,    rows);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	130	1	replace
540	[BUG]  [BUGGY]  Arrays.fill(jacobian,  rows);  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  rows);	  Arrays.fill(jacobian,    index,    rows);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	130	1	replace
541	[BUG]  [BUGGY]  int  cols  =  Math.min(rows,  rows.length);  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(rows,  rows.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(rows,  rows.length);	  int    cols    =    Math.min(rows.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
542	[BUG]  [BUGGY]  int  cols  =  Math.min(rows.length,  columns.length);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(rows.length,  columns.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(rows.length,  columns.length);	  int    cols    =    Math.min(rows.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
543	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  index,  jacobian);  [CE]  cannot  find  symbol  index  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  index,  jacobian);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  index,  jacobian);	  Arrays.fill(rows,    0,    jacobian);    	non-compiled	[CE]  cannot  find  symbol  index	41	None	replace
544	[BUG]  [BUGGY]  int  rows  =  this.getRowCount();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  this.getRowCount();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  this.getRowCount();	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
545	[BUG]  [BUGGY]  int  cols  =  Math.min(measures.length,  measurements.length);  [CE]  cannot  find  symbol  measures  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(measures.length,  measurements.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(measures.length,  measurements.length);	  int    cols    =    Math.min(cols.length,    measurements.length);    	non-compiled	[CE]  cannot  find  symbol  measures	4	None	replace
546	[BUG]  [BUGGY]  int  cols  =  Math.min(measures.length,  parameters.length);  [CE]  cannot  find  symbol  measures  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(measures.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(measures.length,  parameters.length);	  int    cols    =    Math.min(cols.length,    measurements.length);    	non-compiled	[CE]  cannot  find  symbol  measures	4	None	replace
547	[BUG]  [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(variables!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(variables[i]);    	non-compiled	[CE]  cannot  find  symbol  	13	None	replace
548	[BUG]  [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(variables!=  null)  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(variables[i]);    	non-compiled	[CE]  cannot  find  symbol  	13	None	replace
549	[BUG]  [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  parameters[index++]  =  -Math.sqrt(variables[i]);  }  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  parameters[index++]  =  -Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(variables!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  parameters[index++]  =  -Math.sqrt(variables[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(variables[i]);    	non-compiled	[CE]  cannot  find  symbol  	13	None	replace
550	[BUG]  [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  else  {  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  else  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(variables!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  else  {	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(variables[i]);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
551	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  [CE]  cannot  find  symbol  remainings  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    3);    	non-compiled	[CE]  cannot  find  symbol  remainings	58	None	replace
552	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  else  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  else  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  else  {	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    3);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
553	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    3);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
554	[BUG]  [BUGGY]  Arrays.fill(this.jacobian,  0,  index);  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.jacobian,  0,  index);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.jacobian,  0,  index);	  Arrays.fill(this.jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  index	43	None	replace
555	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  int  cols  =  measurements.length  -  2;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  2;  int  cols  =  measurements.length  -  2;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    parameters.length    -    2;    int  cols  =  measurements.length  -  2;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	28	None	add
556	[BUG]  [BUGGY]  Arrays.fill(data,  0,  rows,  cols);  [CE]  cannot  find  symbol  data  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(data,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(data,  0,  rows,  cols);	  Arrays.fill(jacobian,    0,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  data	36	None	replace
557	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  jacobian,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,double[],int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  jacobian,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  jacobian,  cols);	  Arrays.fill(jacobian,    0,    rows,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,double[],int)	36	None	replace
558	[BUG]  [BUGGY]  int  rows  =  Math.min(random.size()  -  1,  cols);  [CE]  cannot  find  symbol  random  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(random.size()  -  1,  cols);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random.size()  -  1,  cols);	  int    rows    =    Math.min(random.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  random	68	None	replace
559	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.size()  -  1,  parameters.length);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.size()  -  1,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.size()  -  1,  parameters.length);	  int    rows    =    Math.min(cols.size()    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	67	None	replace
560	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.size()  -  1,  ratings.length);  [CE]  int  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.size()  -  1,  ratings.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.size()  -  1,  ratings.length);	  int    rows    =    Math.min(cols.size()    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	67	None	replace
561	[BUG]  [BUGGY]  Arrays.fill(array,  jacobian,  0,  rows);  [CE]  cannot  find  symbol  array  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(array,  jacobian,  0,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(array,  jacobian,  0,  rows);	  Arrays.fill(index,    jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  array	86	None	replace
562	[BUG]  [BUGGY]  Arrays.fill(random,  jacobian,  0,  rows);  [CE]  cannot  find  symbol  random  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(random,  jacobian,  0,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(random,  jacobian,  0,  rows);	  Arrays.fill(index,    jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  random	86	None	replace
563	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	add
564	[BUG]  [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	add
565	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  cols.length;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  getColumnCount()  -  cols.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getColumnCount()  -  cols.length;	  int    rows    =    getRowCount()    -    cols.length;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
566	[BUG]  [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[0]);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	14	None	replace
567	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  }  [CE]  cannot  find  symbol  remainings  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[0]);    	non-compiled	[CE]  cannot  find  symbol  remainings	14	None	replace
568	[BUG]  [BUGGY]  if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  }  [CE]  cannot  find  symbol  remainings  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[0]);    	non-compiled	[CE]  cannot  find  symbol  remainings	14	None	replace
569	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  }  [CE]  cannot  find  symbol  remainings  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[0]);    	non-compiled	[CE]  cannot  find  symbol  remainings	14	None	replace
570	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  parameters  =  parameters.length;  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length;  int  parameters  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    parameters.length;    int  parameters  =  parameters.length;	  	non-compiled	[CE]  int  cannot  be  dereferenced	90	None	add
571	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  parameters.length  =  parameters.length;  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length;  int  parameters.length  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    parameters.length;    int  parameters.length  =  parameters.length;	  	non-compiled	[CE]  ';'  expected	90	None	add
572	[BUG]  [BUGGY]  int  rows  =  Math.min(indices.length,  parameters.length);  [CE]  cannot  find  symbol  indices  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(indices.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(indices.length,  parameters.length);	  int    rows    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  indices	124	None	replace
573	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(  measurements.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  Math.min(  measurements.length,  parameters.length);	  int    rows    =    Math.min(remainings.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	124	1	replace
574	[BUG]  [BUGGY]  int  rows  =  Math.min(  measurements.length,  parameters.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(  measurements.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(  measurements.length,  parameters.length);	  int    rows    =    Math.min(remainings.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	124	1	replace
575	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  Arrays.fill(jacobian,  0,  cols);  int  rows  =  parameters.length;  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  Arrays.fill(jacobian,  0,  cols);  int  rows  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    Arrays.fill(jacobian,  0,  cols);  int  rows  =  parameters.length;	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	70	None	add
576	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  +  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  parameters.length;  int  rows  =  parameters.length  +  1;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
577	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  +  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length;  int  rows  =  parameters.length  +  1;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
578	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  parameters);  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index,  parameters);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  parameters);	  Arrays.fill(rows,    index,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	50	None	replace
579	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  [CE]  cannot  find  symbol  remainings  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    3);    	non-compiled	[CE]  cannot  find  symbol  remainings	110	None	replace
580	[BUG]  [BUGGY]  if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  [CE]  cannot  find  symbol  remainings  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(!remainings.isEmpty())  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    3);    	non-compiled	[CE]  cannot  find  symbol  remainings	110	None	replace
581	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  else  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  else  {  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  else  {	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    3);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
582	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  Math.min(cols,  parameters.length);	  int    rows    =    Math.min(cols.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	1	replace
583	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  parameters.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols,  parameters.length);	  int    rows    =    Math.min(cols.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	1	replace
584	[BUG]  [BUGGY]  int  cols  =  Math.min(random,  jacobian.length);  [CE]  cannot  find  symbol  random  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(random,  jacobian.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(random,  jacobian.length);	  int    cols    =    Math.min(remainings.length,    jacobian.length);    	non-compiled	[CE]  cannot  find  symbol  random	116	None	replace
585	[BUG]  [BUGGY]  int  cols  =  Math.min(resultEvaluations.length,  jacobian.length);  [CE]  cannot  find  symbol  resultEvaluations  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(resultEvaluations.length,  jacobian.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(resultEvaluations.length,  jacobian.length);	  int    cols    =    Math.min(remainings.length,    jacobian.length);    	non-compiled	[CE]  cannot  find  symbol  resultEvaluations	116	None	replace
586	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(  measurements.length,  costEvaluations);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  Math.min(  measurements.length,  costEvaluations);	  int    cols    =    Math.min(remainings.length,    measurements.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
587	[BUG]  [BUGGY]  int  cols  =  Math.min(  measurements.length,  costEvaluations);  [FE]  ArrayIndexOutOfBoundsException  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(  measurements.length,  costEvaluations);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(  measurements.length,  costEvaluations);	  int    cols    =    Math.min(remainings.length,    measurements.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
588	[BUG]  [BUGGY]  int  cols  =  Math.min(Math.log(index),  measurements.length);  [CE]  cannot  find  symbol  index  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(Math.log(index),  measurements.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(Math.log(index),  measurements.length);	  int    cols    =    Math.min(remainings.length,    measurements.length);    	non-compiled	[CE]  cannot  find  symbol  index	101	None	replace
589	[BUG]  [BUGGY]  Arrays.fill(this.results,  1,  rows);  [CE]  cannot  find  symbol  results  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  1,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  1,  rows);	  Arrays.fill(rows,    1);    	non-compiled	[CE]  cannot  find  symbol  results	47	None	replace
590	[BUG]  [BUGGY]  int  cols  =  measurements.length;  int  parameters  =  parameters.length;  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  measurements.length;  int  parameters  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  measurements.length;  int  parameters  =  parameters.length;	          int    cols    =    parameters.length;    int    parameters    =    parameters.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	74	None	replace
591	[BUG]  [BUGGY]  int  rows  =  Math.min(jacobian.size()  -  1);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(jacobian.size()  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(jacobian.size()  -  1);	  int    rows    =    Math.min(random.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
592	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  this.results);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  this.results);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  this.results);	  Arrays.fill(this.results,    0,    this.rows);    	non-compiled	[CE]  cannot  find  symbol  results	63	None	replace
593	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[rows++]  =  -Math.sqrt(parameters[i]);  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[rows++]  =  -Math.sqrt(parameters[i]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  2);  jacobian[rows++]  =  -Math.sqrt(parameters[i]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(parameters[i]);    	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
594	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  2,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  2,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(parameters[i]);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	11	None	replace
595	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  data.length);  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.length,  data.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.length,  data.length);	  int    rows    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	76	None	replace
596	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  Integer  cols  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1;  Integer  cols  =  parameters.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length  -  1;  Integer  cols  =  parameters.length;	          int    cols    =    parameters.length;    Integer    cols    =    parameters.length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	115	None	replace
597	[BUG]  [BUGGY]  Arrays.fill(lastIndex,  jacobian,  0,  rows);  [CE]  cannot  find  symbol  lastIndex  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(lastIndex,  jacobian,  0,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(lastIndex,  jacobian,  0,  rows);	  Arrays.fill(index,    jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  lastIndex	86	None	replace
598	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  Integer  cols  =  parameters.length  -  1;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  parameters.length  -  1;  Integer  cols  =  parameters.length  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    parameters.length    -    1;    Integer  cols  =  parameters.length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	26	None	add
599	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  columns.length);  [CE]  cannot  find  symbol  columns  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(cols,  0,  columns.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  0,  columns.length);	  Arrays.fill(cols,    0,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  columns	40	None	replace
600	[BUG]  [BUGGY]  Arrays.fill(runtimeRows,  0);  [CE]  cannot  find  symbol  runtimeRows  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(runtimeRows,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(runtimeRows,  0);	  Arrays.fill(rawRows,    0);    	non-compiled	[CE]  cannot  find  symbol  runtimeRows	34	None	replace
601	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	if(cols  >  0)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
602	[BUG]  [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  >  0)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
603	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  }  else  {  throw  new  IllegalStateException( " ");  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
604	[BUG]  [BUGGY]  int  rows  =  Math.min(estimates.length,  parameters.length);  [CE]  cannot  find  symbol  estimates  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(estimates.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(estimates.length,  parameters.length);	  int    rows    =    Math.min(results.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  estimates	7	None	replace
605	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  measurements.length);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(results.length,  measurements.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.length,  measurements.length);	  int    rows    =    Math.min(results.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  results	7	None	replace
606	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  6);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    4);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  6);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
607	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  6);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  6);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    4);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  6);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
608	[BUG]  [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [CE]  cannot  find  symbol  index  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }	  	non-compiled	[CE]  cannot  find  symbol  index	134	None	add
609	[BUG]  [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [CE]  cannot  find  symbol  index  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }	  	non-compiled	[CE]  cannot  find  symbol  index	134	None	add
610	[BUG]  [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [CE]  cannot  find  symbol  index  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }	  	non-compiled	[CE]  cannot  find  symbol  index	134	None	add
611	[BUG]  [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variants[i]);  }  [CE]  cannot  find  symbol  index  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variants[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variants[i]);  }	  	non-compiled	[CE]  cannot  find  symbol  index	134	None	add
612	[BUG]  [BUGGY]  int  cols  =  Math.min(Math.log(index,  measurements.length),  measurements.length);  [CE]  cannot  find  symbol  index  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(Math.log(index,  measurements.length),  measurements.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(Math.log(index,  measurements.length),  measurements.length);	  int    cols    =    Math.min(remainings.length,    measurements.length);    	non-compiled	[CE]  cannot  find  symbol  index	101	None	replace
613	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rows,  index,  costEvaluations);  [CE]  cannot  find  symbol  index  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  rows,  index,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  rows,  index,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  index	52	None	replace
614	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  columns,  costEvaluations);  [CE]  cannot  find  symbol  columns  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  columns,  costEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  columns,  costEvaluations);	  Arrays.fill(rows,    0,    cols,    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  columns	52	None	replace
615	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  rows,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,  rows,  0,  cols);	  Arrays.fill(index,    jacobian,    0,    cols);    	compilable	  [FE]  IllegalArgumentException  	87	1	replace
616	[BUG]  [BUGGY]  Arrays.fill(jacobian,  rows,  0,  cols);  [FE]  IllegalArgumentException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  rows,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  rows,  0,  cols);	  Arrays.fill(index,    jacobian,    0,    cols);    	compilable	  [FE]  IllegalArgumentException  	87	1	replace
617	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[rows++]  =  -Math.sqrt(cols[0]);  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  2);  jacobian[rows++]  =  -Math.sqrt(cols[0]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  2);  jacobian[rows++]  =  -Math.sqrt(cols[0]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[0]);    	non-compiled	[CE]  array  required,  but  int  found	14	None	replace
618	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1);  jacobian[index++]  =  -Math.sqrt(cols[0]);  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  1);  jacobian[index++]  =  -Math.sqrt(cols[0]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  1);  jacobian[index++]  =  -Math.sqrt(cols[0]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[0]);    	non-compiled	[CE]  cannot  find  symbol  index	14	None	replace
619	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2));  Arrays.fill(jacobian,  3);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2));  Arrays.fill(jacobian,  3);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  2));  Arrays.fill(jacobian,  3);	  	non-compiled	[CE]  ';'  expected	109	None	add
620	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1);  jacobian[index++]  =  -Math.sqrt(cols[i]);  [CE]  cannot  find  symbol  index  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  1);  jacobian[index++]  =  -Math.sqrt(cols[i]);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  1);  jacobian[index++]  =  -Math.sqrt(cols[i]);	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    jacobian[index++]    =    -Math.sqrt(cols[i]);    	non-compiled	[CE]  cannot  find  symbol  index	12	None	replace
621	[BUG]  [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(bracebian,  2);  Arrays.fill(jacobian,  2);  [CE]  cannot  find  symbol  bracebian  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(bracebian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,        2);        Arrays.fill(jacobian,    2);    Arrays.fill(bracebian,  2);  Arrays.fill(jacobian,  2);	  	non-compiled	[CE]  cannot  find  symbol  bracebian	9	None	add
622	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  1,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  1,  rows,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
623	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  1,  rows,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  1,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  1,  rows,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
624	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.size(),  residuals.length);  [CE]  cannot  find  symbol  remainders  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(remainders.size(),  residuals.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(remainders.size(),  residuals.length);	  int    rows    =    Math.min(remainders.size());    	non-compiled	[CE]  cannot  find  symbol  remainders	65	None	replace
625	[BUG]  [BUGGY]  int  cols  =  Math.min(parameters.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(parameters.length,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(parameters.length,  cols.length);	  int    cols    =    Math.min(cols.length,    parameters.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
626	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	if(cols  >  0)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    3);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	110	1	replace
627	[BUG]  [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  >  0)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    3);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	110	1	replace
628	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    3);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
629	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  this.results.length);  [CE]  cannot  find  symbol  results  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  0,  this.results.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  this.results.length);	  Arrays.fill(this.results,    0,    this.results.length);    	non-compiled	[CE]  cannot  find  symbol  results	104	None	replace
630	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  this.rows.length);  [CE]  cannot  find  symbol  results  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.results,  0,  this.rows.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  this.rows.length);	  Arrays.fill(this.results,    0,    this.results.length);    	non-compiled	[CE]  cannot  find  symbol  results	104	None	replace
631	[BUG]  [BUGGY]  int  rows  =  Math.min(items.length,  cols.length);  [CE]  cannot  find  symbol  items  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(items.length,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(items.length,  cols.length);	  int    rows    =    Math.min(cols.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  items	77	None	replace
632	[BUG]  [BUGGY]  Arrays.fill(rows,  column,  0);  [CE]  cannot  find  symbol  column  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  column,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  column,  0);	  Arrays.fill(rows,    index,    0);    	non-compiled	[CE]  cannot  find  symbol  column	44	None	replace
633	[BUG]  [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  >  0)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
634	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [CE]  cannot  find  symbol  index  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  1);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  1);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]);    }    	non-compiled	[CE]  cannot  find  symbol  index	123	None	replace
635	[BUG]  [BUGGY]  Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]);    }    	non-compiled	[CE]  cannot  find  symbol  index	123	None	replace
636	[BUG]  [BUGGY]  if(cols  >  cols)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  cols)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  >  cols)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(jacobian[i]    *    parameters[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
637	[BUG]  [BUGGY]  if(cols  >  cols)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  cols)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  >  cols)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(jacobian[i]    *    parameters[i]);    }    	non-compiled	[CE]  ')'  expected	122	None	replace
638	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }  [CE]  cannot  find  symbol  index  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(jacobian[i]    *    parameters[i]);    }    	non-compiled	[CE]  cannot  find  symbol  index	122	None	replace
639	[BUG]  [BUGGY]  if(cols  >  cols)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  cols)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  >  cols)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(jacobian[i]    *    parameters[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
640	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [CE]  cannot  find  symbol  index  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(variables[i]);    }    	non-compiled	[CE]  cannot  find  symbol  index	121	None	replace
641	[BUG]  [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i].getWeight());  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(variables!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i].getWeight());  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(variables!=  null)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i].getWeight());  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(variables[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
642	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  rows,  cols);  [CE]  cannot  find  symbol  index  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  rows,  cols);	  Arrays.fill(rows,    0,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	51	None	replace
643	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(JacksonEvaluation.class);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Arrays.asList(JacksonEvaluation.class);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Arrays.asList(JacksonEvaluation.class);	  int    rows    =    Arrays.asList(remainders);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
644	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(Math.rint(cols));  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Arrays.asList(Math.rint(cols));  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Arrays.asList(Math.rint(cols));	  int    rows    =    Arrays.asList(remainders);    	non-compiled	[CE]  incompatible  types	125	None	replace
645	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	replace
646	[BUG]  [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	replace
647	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  jacobian.length;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  getRowCount()  -  jacobian.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getRowCount()  -  jacobian.length;	  int    rows    =    getRowCount()    -    cols.length;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
648	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  jacobianEvaluations.length;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  getRowCount()  -  jacobianEvaluations.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getRowCount()  -  jacobianEvaluations.length;	  int    rows    =    getRowCount()    -    cols.length;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
649	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  int  rows  =  0;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  0;  int  rows  =  0;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
650	[BUG]  [BUGGY]  int  cols  =  0;  int  rows  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  int  rows  =  0;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  0;  int  rows  =  0;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
651	[BUG]  [BUGGY]  int  rows  =  Math.min(results.size(),  index);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(results.size(),  index);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.size(),  index);	  int    rows    =    Math.min(results.size());    	non-compiled	[CE]  cannot  find  symbol  results	66	None	replace
652	[BUG]  [BUGGY]  int  rows  =  Math.min(results.size(),  estimates.length);  [CE]  cannot  find  symbol  results  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(results.size(),  estimates.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.size(),  estimates.length);	  int    rows    =    Math.min(results.size());    	non-compiled	[CE]  cannot  find  symbol  results	66	None	replace
653	[BUG]  [BUGGY]  int  cols  =  0;  Int  cols  =  0;  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  Int  cols  =  0;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    cols    =    0;    Int  cols  =  0;	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
654	[BUG]  [BUGGY]  Arrays.fill(this.jacobian,  0,  this.cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.jacobian,  0,  this.cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.jacobian,  0,  this.cols);	  Arrays.fill(this.jacobian,    0,    rows);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	43	None	replace
655	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    4);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
656	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  }  else  {  throw  new  IllegalStateException( " ");  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    4);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	112	None	replace
657	[BUG]  [BUGGY]  int  rows  =  Math.min(jacobian.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(jacobian.length,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(jacobian.length,  cols.length);	  int    rows    =    Math.min(colons.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	88	None	replace
658	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  rows  =  Math.min(parameters.length,  remainings.length);  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  int  rows  =  Math.min(parameters.length,  remainings.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    Math.min(parameters.length,    residuals.length);    int  rows  =  Math.min(parameters.length,  remainings.length);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	132	None	add
659	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  jacobian.length);  [CE]  cannot  find  symbol  remainders  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(remainders.length,  jacobian.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(remainders.length,  jacobian.length);	  int    rows    =    Math.min(colons.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	136	None	replace
660	[BUG]  [BUGGY]  Arrays.fill(rows,  2);  Arrays.fill(jacobian,  2);  [CE]  no  suitable  method  found  for  fill(int,int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  2);  Arrays.fill(jacobian,  2);	  Arrays.fill(jacobian,    2);    Arrays.fill(jocobian,    2);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int)	113	None	replace
661	[BUG]  [BUGGY]  int  cols  =  Math.min(remainders.length,  measurements.length);  [CE]  cannot  find  symbol  remainders  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(remainders.length,  measurements.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(remainders.length,  measurements.length);	  int    cols    =    Math.min(random,    measurements.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	100	None	replace
662	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    3);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	58	1	replace
663	[BUG]  [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    3);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	58	1	replace
664	[BUG]  [BUGGY]  int  rows  =  parameters.length;  Integer  rows  =  parameters.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length;  Integer  rows  =  parameters.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    parameters.length;    Integer  rows  =  parameters.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	90	None	add
665	[BUG]  [BUGGY]  int  rows  =  parameters.length;  int  rows  =  measurements.length;  [CE]  variable  rows  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  parameters.length;  int  rows  =  measurements.length;  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int    rows    =    parameters.length;    int  rows  =  measurements.length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  updateJacobian()	90	None	add
666	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  coefficient);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  rows,  coefficient);	  Arrays.fill(jacobian,    0,    rows,    index);    	non-compiled	[CE]  cannot  find  symbol  coefficient	42	None	replace
667	[BUG]  [BUGGY]  Arrays.fill(rows,  row);  [CE]  cannot  find  symbol  row  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  row);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  row);	  Arrays.fill(rows,    index);    	non-compiled	[CE]  cannot  find  symbol  row	97	None	replace
668	[BUG]  [BUGGY]  Arrays.fill(last,  rows,  cols,  0);  [CE]  cannot  find  symbol  last  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(last,  rows,  cols,  0);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(last,  rows,  cols,  0);	  Arrays.fill(rows,    cols,    0);    	non-compiled	[CE]  cannot  find  symbol  last	39	None	replace
669	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	replace
670	[BUG]  [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  >  0)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }	  Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	replace
671	[BUG]  [BUGGY]  Arrays.fill(rows,  index2);  [CE]  cannot  find  symbol  index2  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index2);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index2);	  Arrays.fill(rows,    2);    	non-compiled	[CE]  cannot  find  symbol  index2	19	None	replace
672	[BUG]  [BUGGY]  Arrays.fill(jacobian,  dataArea,  rows);  [CE]  cannot  find  symbol  dataArea  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  dataArea,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  dataArea,  rows);	  Arrays.fill(jacobian,    index,    rows);    	non-compiled	[CE]  cannot  find  symbol  dataArea	130	None	replace
673	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.jacobian,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(this.jacobian,  0,  rows,  cols);	  Arrays.fill(jacobian,    0,    rows,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	1	replace
674	[BUG]  [BUGGY]  Arrays.fill(this.jacobian,  0,  rows,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(this.jacobian,  0,  rows,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.jacobian,  0,  rows,  cols);	  Arrays.fill(jacobian,    0,    rows,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	1	replace
675	[BUG]  [BUGGY]  int  rows  =  Math.min(results.size()  -  2);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(results.size()  -  2);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.size()  -  2);	  int    rows    =    Math.min(results.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  results	102	None	replace
676	[BUG]  [BUGGY]  int  rows  =  Math.min(periods.length,  parameters.length);  [CE]  cannot  find  symbol  periods  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(periods.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(periods.length,  parameters.length);	  int    rows    =    Math.min(periods.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  periods	18	None	replace
677	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  int  columns  =  0;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  0;  int  columns  =  0;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
678	[BUG]  [BUGGY]  int  cols  =  0;  int  columns  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  0;  int  columns  =  0;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  0;  int  columns  =  0;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
679	[BUG]  [BUGGY]  int  cols  =  dimensions.length;  [CE]  cannot  find  symbol  dimensions  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  dimensions.length;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  dimensions.length;	          int    cols    =    parameters.length;    int    cols    =    measurements.length;    	non-compiled	[CE]  cannot  find  symbol  dimensions	108	None	replace
680	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  1,  jacobianEvaluations);  [CE]  cannot  find  symbol  index  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  index,  1,  jacobianEvaluations);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  1,  jacobianEvaluations);	  Arrays.fill(rows,    1);    	non-compiled	[CE]  cannot  find  symbol  index	47	None	replace
681	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.size(),  parameters.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.size(),  parameters.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.size(),  parameters.length  -  1);	  int    rows    =    Math.min(cols.size()    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	67	None	replace
682	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.size()  -  1,  jacobianEvaluations.length);  [CE]  int  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(cols.size()  -  1,  jacobianEvaluations.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.size()  -  1,  jacobianEvaluations.length);	  int    rows    =    Math.min(cols.size()    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	67	None	replace
683	[BUG]  [BUGGY]  int  rows  =  Math.min(measures.length,  parameters.length);  [CE]  cannot  find  symbol  measures  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(measures.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(measures.length,  parameters.length);	  int    rows    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  measures	124	None	replace
684	[BUG]  [BUGGY]  int  rows  =  Math.min(methods.length,  parameters.length);  [CE]  cannot  find  symbol  methods  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(methods.length,  parameters.length);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(methods.length,  parameters.length);	  int    rows    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  methods	124	None	replace
685	[BUG]  [BUGGY]  int  cols  =  Math.min(array.length,  parameters.length);  [CE]  cannot  find  symbol  array  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(array.length,  parameters.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(array.length,  parameters.length);	  int    cols    =    Math.min(remainings.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  array	99	None	replace
686	[BUG]  [BUGGY]  Arrays.fill(rows,  columns,  1);  [CE]  cannot  find  symbol  columns  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(rows,  columns,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  columns,  1);	  Arrays.fill(cols,    1);    	non-compiled	[CE]  cannot  find  symbol  columns	48	None	replace
687	[BUG]  [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  >  0)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]    *    parameters[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
688	[BUG]  [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  if(cols  >  0)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	if(cols  >  0)  {  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]    *    parameters[i]);    }    	non-compiled	[CE]  ')'  expected	120	None	replace
689	[BUG]  [BUGGY]  Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [CE]  cannot  find  symbol  index  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  3);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }	  Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,    2);    for(int    i    =    0;    i    <    rows;    ++i)    {    jacobian[index++]    =    -Math.sqrt(data[i]    *    parameters[i]);    }    	non-compiled	[CE]  cannot  find  symbol  index	120	None	replace
690	[BUG]  [BUGGY]  int  cols  =  Math.min(array.length,  jacobian.length);  [CE]  cannot  find  symbol  array  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  cols  =  Math.min(array.length,  jacobian.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(array.length,  jacobian.length);	  int    cols    =    Math.min(remainings.length,    jacobian.length);    	non-compiled	[CE]  cannot  find  symbol  array	116	None	replace
691	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  1);  [CE]  cannot  find  symbol  remainders  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(remainders.length,  1);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(remainders.length,  1);	          int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  remainders	126	None	replace
692	[BUG]  [BUGGY]  Arrays.fill(jacobian,  index,  0,  cols);  [CE]  cannot  find  symbol  index  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(jacobian,  index,  0,  cols);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  index,  0,  cols);	  Arrays.fill(last,    jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	118	None	replace
693	[BUG]  [BUGGY]  int  rows  =  Math.min(colons.length,  parameters.length  -  1);  [CE]  cannot  find  symbol  colons  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(colons.length,  parameters.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(colons.length,  parameters.length  -  1);	  int    rows    =    Math.min(remainders.length,    cols.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  colons	17	None	replace
694	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  parameters.length  -  1);  [CE]  cannot  find  symbol  remainders  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(remainders.length,  parameters.length  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(remainders.length,  parameters.length  -  1);	  int    rows    =    Math.min(remainders.length,    cols.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  remainders	17	None	replace
695	[BUG]  [BUGGY]  Arrays.fill(array,  0,  rows);  [CE]  cannot  find  symbol  array  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  Arrays.fill(array,  0,  rows);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(array,  0,  rows);	  Arrays.fill(array,    0);    	non-compiled	[CE]  cannot  find  symbol  array	117	None	replace
696	[BUG]  [BUGGY]  int  rows  =  Math.min(lastIndex,  cols.length);  [CE]  cannot  find  symbol  lastIndex  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(lastIndex,  cols.length);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(lastIndex,  cols.length);	  int    rows    =    Math.min(index,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  lastIndex	78	None	replace
697	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  j);  [CE]  cannot  find  symbol  j  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();      [BUGGY]  int  rows  =  Math.min(rows,  j);  [BUGGY]      for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(rows,  j);	          int    rows    =    Math.min(rows,    index);    	non-compiled	[CE]  cannot  find  symbol  j	75	None	replace
