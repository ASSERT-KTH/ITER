bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Arrays.fill(rows,  0);  [CE]  no  suitable  method  found  for  fill(int,int)  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(rows,  0);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0);	Arrays.fill(jacobian,  0);  	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int)	3	None	replace
2	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(jacobian,  0,  cols);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  cols);	Arrays.fill(jacobian,  0);  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	3	None	replace
3	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(rows,  0,  cols);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  cols);	Arrays.fill(jacobian,  0);  	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	3	None	replace
4	[BUG]  [BUGGY]  Arrays.fill(cols,  0);  [CE]  no  suitable  method  found  for  fill(int,int)  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(cols,  0);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  0);	Arrays.fill(jacobian,  0);  	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int)	3	None	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	  	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
6	[BUG]  [BUGGY]    [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	  	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  cols  =  parameters.length;  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	    int  cols  =  parameters.length;		compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	add
8	[BUG]  [BUGGY]    int  cols  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  cols  =  parameters.length;  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  cols  =  parameters.length;		compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	add
9	[BUG]  [BUGGY]    int  cols  =  Math.min(remainings.length,  cols.length);  [CE]  cannot  find  symbol  remainings  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  cols  =  Math.min(remainings.length,  cols.length);  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  cols  =  Math.min(remainings.length,  cols.length);		non-compiled	[CE]  cannot  find  symbol  remainings	4	None	add
10	[BUG]  [BUGGY]    int  cols  =  Math.min(cols.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  cols  =  Math.min(cols.length,  cols.length);  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  cols  =  Math.min(cols.length,  cols.length);		non-compiled	[CE]  int  cannot  be  dereferenced	4	None	add
11	[BUG]  [BUGGY]    Integer  cols  =  getRowCount();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    Integer  cols  =  getRowCount();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    Integer  cols  =  getRowCount();		non-compiled	[CE]  cannot  find  symbol	4	None	add
12	[BUG]  [BUGGY]    int  rows  =  Math.min(remainings.length,  cols.length);  [CE]  cannot  find  symbol  remainings  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  rows  =  Math.min(remainings.length,  cols.length);  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  rows  =  Math.min(remainings.length,  cols.length);		non-compiled	[CE]  cannot  find  symbol  remainings	4	None	add
13	[BUG]  [BUGGY]    int  rows  =  Math.min(remainders.length,  cols.length);  [CE]  cannot  find  symbol  remainders  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  rows  =  Math.min(remainders.length,  cols.length);  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  rows  =  Math.min(remainders.length,  cols.length);		non-compiled	[CE]  cannot  find  symbol  remainders	4	None	add
14	[BUG]  [BUGGY]    int  rows  =  getRowCount();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  rows  =  getRowCount();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  rows  =  getRowCount();		non-compiled	[CE]  cannot  find  symbol	4	None	add
15	[BUG]  [BUGGY]  Arrays.fill(this.results,  0);  [CE]  cannot  find  symbol  results  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(this.results,  0);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0);	Arrays.fill(jacobian,  0);  	non-compiled	[CE]  cannot  find  symbol  results	3	None	replace
16	[BUG]  [BUGGY]  Arrays.fill(runs,  0);  [CE]  cannot  find  symbol  runs  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(runs,  0);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(runs,  0);	Arrays.fill(jacobian,  0);  	non-compiled	[CE]  cannot  find  symbol  runs	3	None	replace
17	[BUG]  [BUGGY]    int  cols  =  getColumnCount();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  cols  =  getColumnCount();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  cols  =  getColumnCount();		non-compiled	[CE]  cannot  find  symbol	4	None	add
18	[BUG]  [BUGGY]    int  rows  =  Math.min(remainders.length,  parameters.length);  [CE]  cannot  find  symbol  remainders  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  rows  =  Math.min(remainders.length,  parameters.length);  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  rows  =  Math.min(remainders.length,  parameters.length);		non-compiled	[CE]  cannot  find  symbol  remainders	4	None	add
19	[BUG]  [BUGGY]    int  rows  =  Math.min(remainders.size()  -  1);  [CE]  cannot  find  symbol  remainders  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  rows  =  Math.min(remainders.size()  -  1);  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  rows  =  Math.min(remainders.size()  -  1);		non-compiled	[CE]  cannot  find  symbol  remainders	4	None	add
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(jacobian,  1);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,  1);	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
21	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(jacobian,  1);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  1);	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
22	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(jacobian,  0,  rows);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  rows);	Arrays.fill(jacobian,  0);  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	3	None	replace
23	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(jacobian,  2);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,  2);	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
24	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(jacobian,  2);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  2);	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
