bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  parameters.length);  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  Math.min(cols.length,  parameters.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols.length,  parameters.length);	      int    cols    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
2	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length);  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols.length,  jacobian.length);	      int    cols    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
3	[BUG]  [BUGGY]  int  cols  =  Math.min(rows.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  Math.min(rows.length,  cols.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(rows.length,  cols.length);	      int    cols    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
4	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  measurements.length);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  Math.min(cols.length,  measurements.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols.length,  measurements.length);	      int    cols    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  Math.min(parameters.length,  parameters.length);	      int    rows    =    Math.min(remainders.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
6	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(parameters.length,  parameters.length);	      int    rows    =    Math.min(remainders.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
7	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  parameters.length);  [CE]  cannot  find  symbol  results  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(results.length,  parameters.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.length,  parameters.length);	      int    rows    =    Math.min(remainders.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  results	18	None	replace
8	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  parameters.length);  [CE]  cannot  find  symbol  random  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(random,  parameters.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random,  parameters.length);	      int    rows    =    Math.min(remainders.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  random	18	None	replace
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	add
10	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	add
11	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  [CE]  cannot  find  symbol  index  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(parameters[i]);	  	non-compiled	[CE]  cannot  find  symbol  index	23	None	add
12	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  [CE]  cannot  find  symbol  index  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[i]);	  	non-compiled	[CE]  cannot  find  symbol  index	23	None	add
13	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  [CE]  cannot  find  symbol  index  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(variables[i]);	  	non-compiled	[CE]  cannot  find  symbol  index	23	None	add
14	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  [CE]  cannot  find  symbol  index  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  jacobian[index++]  =  -Math.sqrt(cols[0]);	  	non-compiled	[CE]  cannot  find  symbol  index	23	None	add
15	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  residuals.length);  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(cols.length,  residuals.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.length,  residuals.length);	      int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	13	None	replace
16	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  cols.length);  [CE]  cannot  find  symbol  results  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(results.length,  cols.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.length,  cols.length);	      int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  results	13	None	replace
17	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  cols.length  -  1);  [CE]  cannot  find  symbol  remainders  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(remainders.length,  cols.length  -  1);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(remainders.length,  cols.length  -  1);	      int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	13	None	replace
18	[BUG]  [BUGGY]  int  rows  =  Math.min(periods.length,  cols.length);  [CE]  cannot  find  symbol  periods  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(periods.length,  cols.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(periods.length,  cols.length);	      int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  periods	13	None	replace
19	[BUG]  [BUGGY]  Arrays.fill(rows,  2);  [CE]  no  suitable  method  found  for  fill(int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  2);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  2);	  Arrays.fill(jacobian,    2);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int)	24	None	replace
20	[BUG]  [BUGGY]  int  cols  =  getRowCount();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  getRowCount();  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  getRowCount();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
21	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  1);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols.length,  cols.length  -  1);	      int    cols    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	10	None	replace
22	[BUG]  [BUGGY]  Integer  cols  =  getColumnCount();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Integer  cols  =  getColumnCount();  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Integer  cols  =  getColumnCount();	      Integer    cols    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
23	[BUG]  [BUGGY]  Integer  cols  =  getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Integer  cols  =  getRowCount()  -  1;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Integer  cols  =  getRowCount()  -  1;	      Integer    cols    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
24	[BUG]  [BUGGY]  Integer  cols  =  getRowCount()  +  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Integer  cols  =  getRowCount()  +  1;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Integer  cols  =  getRowCount()  +  1;	      Integer    cols    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
25	[BUG]  [BUGGY]  Integer  cols  =  getRowCount()  -  2;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Integer  cols  =  getRowCount()  -  2;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Integer  cols  =  getRowCount()  -  2;	      Integer    cols    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
26	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  parameters.length  -  1;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  parameters.length  -  1;	      int    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
27	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  parameters.length  -  1;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length  -  1;	      int    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
28	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  parameters.length  -  2;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  parameters.length  -  2;	      int    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
29	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  parameters.length  -  2;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  parameters.length  -  2;	      int    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
30	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  0;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  0;	      int    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
31	[BUG]  [BUGGY]  int  cols  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  0;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  0;	      int    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
32	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  this.parameters.length;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  this.parameters.length;	      int    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
33	[BUG]  [BUGGY]  int  cols  =  this.parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  this.parameters.length;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  this.parameters.length;	      int    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
34	[BUG]  [BUGGY]  Arrays.fill(rawRows,  0);  [CE]  cannot  find  symbol  rawRows  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rawRows,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rawRows,  0);	  Arrays.fill(runs,    0);    	non-compiled	[CE]  cannot  find  symbol  rawRows	16	None	replace
35	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,  0,  rows,  cols);	  Arrays.fill(jacobian,    0,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
36	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  rows,  cols);	  Arrays.fill(jacobian,    0,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
37	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  jacobian,  0,  cols);  [CE]  cannot  find  symbol  index  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  index,  jacobian,  0,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  jacobian,  0,  cols);	  Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	2	None	replace
38	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  jacobian);  [CE]  no  suitable  method  found  for  fill(int,int,double[])  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(cols,  0,  jacobian);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  0,  jacobian);	  Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,double[])	2	None	replace
39	[BUG]  [BUGGY]  Arrays.fill(rows,  cols,  0);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  cols,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  cols,  0);	  Arrays.fill(cols,    0);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	4	None	replace
40	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(cols,  0,  cols.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  0,  cols.length);	  Arrays.fill(cols,    0);    	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
41	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  jacobian);  [CE]  no  suitable  method  found  for  fill(int,int,double[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  0,  jacobian);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  jacobian);	  Arrays.fill(jacobian,    0,    rows);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,double[])	22	None	replace
42	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  index);  [CE]  cannot  find  symbol  index  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  0,  rows,  index);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  rows,  index);	  Arrays.fill(jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  index	22	None	replace
43	[BUG]  [BUGGY]  Arrays.fill(this.jacobian,  0,  rows);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(this.jacobian,  0,  rows);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.jacobian,  0,  rows);	  Arrays.fill(jacobian,    0,    rows);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	22	None	replace
44	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  0);  [CE]  cannot  find  symbol  index  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  index,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  0);	  Arrays.fill(rows,    0);    	non-compiled	[CE]  cannot  find  symbol  index	1	None	replace
45	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rows);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  0,  rows);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  rows);	  Arrays.fill(rows,    0);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	1	None	replace
46	[BUG]  [BUGGY]  Arrays.fill(random,  rows,  0);  [CE]  cannot  find  symbol  random  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(random,  rows,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(random,  rows,  0);	  Arrays.fill(rows,    0);    	non-compiled	[CE]  cannot  find  symbol  random	1	None	replace
47	[BUG]  [BUGGY]  Arrays.fill(rows,  1);  [CE]  no  suitable  method  found  for  fill(int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  1);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  1);	  Arrays.fill(jacobian,    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int)	21	None	replace
48	[BUG]  [BUGGY]  Arrays.fill(cols,  1);  [CE]  no  suitable  method  found  for  fill(int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(cols,  1);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(cols,  1);	  Arrays.fill(jacobian,    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int)	21	None	replace
49	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  0,  cols);  [CE]  cannot  find  symbol  index  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  index,  0,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  0,  cols);	  Arrays.fill(rows,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	3	None	replace
50	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  cols);  [CE]  cannot  find  symbol  index  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  index,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  cols);	  Arrays.fill(rows,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	3	None	replace
51	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rows,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,int,int)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  0,  rows,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  rows,  cols);	  Arrays.fill(rows,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int)	3	None	replace
52	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  cols,  costEvaluations);  [CE]  no  suitable  method  found  for  fill(int,int,int,int)  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  0,  cols,  costEvaluations);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  cols,  costEvaluations);	  Arrays.fill(rows,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int)	3	None	replace
53	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	add
54	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	add
55	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	add
56	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	add
57	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	add
58	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	add
59	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1,  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1,  1);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1,  1);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	20	None	add
60	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1);  Arrays.fill(jocobian,  1);  [CE]  cannot  find  symbol  jocobian  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  1);  Arrays.fill(jocobian,  1);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    1);    Arrays.fill(jocobian,  1);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	20	None	add
61	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  cols);  [CE]  cannot  find  symbol  results  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(this.results,  0,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  cols);	  Arrays.fill(this.results,    0);    	non-compiled	[CE]  cannot  find  symbol  results	15	None	replace
62	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  this.cols);  [CE]  cannot  find  symbol  results  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(this.results,  0,  this.cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  this.cols);	  Arrays.fill(this.results,    0);    	non-compiled	[CE]  cannot  find  symbol  results	15	None	replace
63	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  this.rows);  [CE]  cannot  find  symbol  results  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(this.results,  0,  this.rows);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  this.rows);	  Arrays.fill(this.results,    0);    	non-compiled	[CE]  cannot  find  symbol  results	15	None	replace
64	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  rows);  [CE]  cannot  find  symbol  results  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(this.results,  0,  rows);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  rows);	  Arrays.fill(this.results,    0);    	non-compiled	[CE]  cannot  find  symbol  results	15	None	replace
65	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.size());  [CE]  cannot  find  symbol  remainders  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(remainders.size());  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(remainders.size());	      int    rows    =    Math.min(remainders.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  remainders	19	None	replace
66	[BUG]  [BUGGY]  int  rows  =  Math.min(results.size());  [CE]  cannot  find  symbol  results  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(results.size());  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.size());	      int    rows    =    Math.min(remainders.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  results	19	None	replace
67	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.size()  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(cols.size()  -  1);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.size()  -  1);	      int    rows    =    Math.min(remainders.size()    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	19	None	replace
68	[BUG]  [BUGGY]  int  rows  =  Math.min(random.size()  -  1);  [CE]  cannot  find  symbol  random  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(random.size()  -  1);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random.size()  -  1);	      int    rows    =    Math.min(remainders.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  random	19	None	replace
69	[BUG]  [BUGGY]      int  cols  =  parameters.length;  int  cols  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]      int  cols  =  parameters.length;  int  cols  =  parameters.length;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	        int    cols    =    parameters.length;    int  cols  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	7	None	add
70	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]      int  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	        int    cols    =    parameters.length;    int  rows  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
71	[BUG]  [BUGGY]      int  cols  =  parameters.length;  int  rows  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]      int  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	        int    cols    =    parameters.length;    int  rows  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
72	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]      int  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	        int    cols    =    parameters.length;    int  columns  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
73	[BUG]  [BUGGY]      int  cols  =  parameters.length;  int  columns  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]      int  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	        int    cols    =    parameters.length;    int  columns  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
74	[BUG]  [BUGGY]      int  cols  =  parameters.length;  int  parameters  =  parameters.length;  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]      int  cols  =  parameters.length;  int  parameters  =  parameters.length;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	        int    cols    =    parameters.length;    int  parameters  =  parameters.length;	  	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	add
75	[BUG]  [BUGGY]      int  rows  =  Math.min(rows,  index);  [CE]  cannot  find  symbol  index  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]      int  rows  =  Math.min(rows,  index);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	        int  rows  =  Math.min(rows,  index);	  	non-compiled	[CE]  cannot  find  symbol  index	5	None	add
76	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.length,  cols.length);	      int    rows    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	replace
77	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  parameters.length);  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(cols.length,  parameters.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(cols.length,  parameters.length);	      int    rows    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	replace
78	[BUG]  [BUGGY]  int  rows  =  Math.min(index,  cols.length);  [CE]  cannot  find  symbol  index  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(index,  cols.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(index,  cols.length);	      int    rows    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  index	12	None	replace
79	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  getRowCount()  -  1;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getRowCount()  -  1;	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
80	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  2;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  getRowCount()  -  2;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getRowCount()  -  2;	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
81	[BUG]  [BUGGY]  int  rows  =  getRowCount()  +  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  getRowCount()  +  1;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getRowCount()  +  1;	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
82	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  cols.length;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  getRowCount()  -  cols.length;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getRowCount()  -  cols.length;	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
83	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  getColumnCount()  -  1;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  getColumnCount()  -  1;	      int    cols    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
84	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  -  2;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  getColumnCount()  -  2;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  getColumnCount()  -  2;	      int    cols    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
85	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  getColumnCount()  +  1;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  getColumnCount()  +  1;	      int    cols    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
86	[BUG]  [BUGGY]  Arrays.fill(index,  jacobian,  0,  rows);  [CE]  cannot  find  symbol  index  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(index,  jacobian,  0,  rows);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(index,  jacobian,  0,  rows);	  Arrays.fill(jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  index	22	None	replace
87	[BUG]  [BUGGY]  Arrays.fill(index,  jacobian,  0,  cols);  [CE]  cannot  find  symbol  index  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(index,  jacobian,  0,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(index,  jacobian,  0,  cols);	  Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	2	None	replace
88	[BUG]  [BUGGY]  int  rows  =  Math.min(colons.length,  cols.length);  [CE]  cannot  find  symbol  colons  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(colons.length,  cols.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(colons.length,  cols.length);	      int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  colons	13	None	replace
89	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  cols.length);  [CE]  cannot  find  symbol  random  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(random,  cols.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(random,  cols.length);	      int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  random	13	None	replace
90	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  parameters.length;	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
91	[BUG]  [BUGGY]  int  rows  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  parameters.length;  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  parameters.length;	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
92	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  measurements.length;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  cols  =  measurements.length;	      int    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
93	[BUG]  [BUGGY]  int  cols  =  measurements.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  measurements.length;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  measurements.length;	      int    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
94	[BUG]  [BUGGY]  Arrays.fill(this.results,  1);  [CE]  cannot  find  symbol  results  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(this.results,  1);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  1);	  Arrays.fill(jacobian,    1);    	non-compiled	[CE]  cannot  find  symbol  results	21	None	replace
95	[BUG]  [BUGGY]  Arrays.fill(remainings,  1);  [CE]  cannot  find  symbol  remainings  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(remainings,  1);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(remainings,  1);	  Arrays.fill(jacobian,    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	21	None	replace
96	[BUG]  [BUGGY]  Arrays.fill(remainings,  0);  [CE]  cannot  find  symbol  remainings  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(remainings,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(remainings,  0);	  Arrays.fill(runs,    0);    	non-compiled	[CE]  cannot  find  symbol  remainings	16	None	replace
97	[BUG]  [BUGGY]  Arrays.fill(rows,  index);  [CE]  cannot  find  symbol  index  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  index);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index);	  Arrays.fill(rows,    0);    	non-compiled	[CE]  cannot  find  symbol  index	1	None	replace
98	[BUG]  [BUGGY]  int  cols  =  Math.min(resultEvaluations.length,  cols.length);  [CE]  cannot  find  symbol  resultEvaluations  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  Math.min(resultEvaluations.length,  cols.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(resultEvaluations.length,  cols.length);	      int    cols    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  resultEvaluations	9	None	replace
99	[BUG]  [BUGGY]  int  cols  =  Math.min(remainings.length,  parameters.length);  [CE]  cannot  find  symbol  remainings  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  Math.min(remainings.length,  parameters.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(remainings.length,  parameters.length);	      int    cols    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	9	None	replace
100	[BUG]  [BUGGY]  int  cols  =  Math.min(random,  measurements.length);  [CE]  cannot  find  symbol  random  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  Math.min(random,  measurements.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(random,  measurements.length);	      int    cols    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  random	9	None	replace
101	[BUG]  [BUGGY]  int  cols  =  Math.min(remainings.length,  measurements.length);  [CE]  cannot  find  symbol  remainings  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  Math.min(remainings.length,  measurements.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(remainings.length,  measurements.length);	      int    cols    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	9	None	replace
102	[BUG]  [BUGGY]  int  rows  =  Math.min(results.size()  -  1);  [CE]  cannot  find  symbol  results  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(results.size()  -  1);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(results.size()  -  1);	      int    rows    =    Math.min(remainders.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  results	19	None	replace
103	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  data.length);  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  Math.min(cols.length,  data.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(cols.length,  data.length);	      int    cols    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	10	None	replace
104	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  this.results.length);  [CE]  cannot  find  symbol  results  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(this.results,  0,  this.results.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  this.results.length);	  Arrays.fill(this.results,    0);    	non-compiled	[CE]  cannot  find  symbol  results	15	None	replace
105	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  parameters.length);  [CE]  cannot  find  symbol  results  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(this.results,  0,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  parameters.length);	  Arrays.fill(this.results,    0);    	non-compiled	[CE]  cannot  find  symbol  results	15	None	replace
106	[BUG]  [BUGGY]  Arrays.fill(this.results,  2);  [CE]  cannot  find  symbol  results  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(this.results,  2);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  2);	  Arrays.fill(jacobian,    2);    	non-compiled	[CE]  cannot  find  symbol  results	24	None	replace
107	[BUG]  [BUGGY]  int  rows  =  Math.min(randoms.length,  parameters.length);  [CE]  cannot  find  symbol  randoms  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(randoms.length,  parameters.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(randoms.length,  parameters.length);	      int    rows    =    Math.min(remainders.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  randoms	18	None	replace
108	[BUG]  [BUGGY]      int  cols  =  parameters.length;  int  cols  =  measurements.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]      int  cols  =  parameters.length;  int  cols  =  measurements.length;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	        int    cols    =    parameters.length;    int  cols  =  measurements.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	7	None	add
109	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	add
110	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	add
111	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	add
112	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  4);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	add
113	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jocobian,  2);  [CE]  cannot  find  symbol  jocobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jocobian,  2);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jocobian,  2);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	23	None	add
114	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  index,  cols);  [CE]  cannot  find  symbol  index  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  0,  index,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  0,  index,  cols);	  Arrays.fill(rows,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	3	None	replace
115	[BUG]  [BUGGY]      int  cols  =  parameters.length;  Integer  cols  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]      int  cols  =  parameters.length;  Integer  cols  =  parameters.length;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	        int    cols    =    parameters.length;    Integer  cols  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	7	None	add
116	[BUG]  [BUGGY]  int  cols  =  Math.min(remainings.length,  jacobian.length);  [CE]  cannot  find  symbol  remainings  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  cols  =  Math.min(remainings.length,  jacobian.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  cols  =  Math.min(remainings.length,  jacobian.length);	      int    cols    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	9	None	replace
117	[BUG]  [BUGGY]  Arrays.fill(array,  0);  [CE]  cannot  find  symbol  array  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(array,  0);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(array,  0);	  Arrays.fill(runs,    0);    	non-compiled	[CE]  cannot  find  symbol  array	16	None	replace
118	[BUG]  [BUGGY]  Arrays.fill(last,  jacobian,  0,  cols);  [CE]  cannot  find  symbol  last  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(last,  jacobian,  0,  cols);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(last,  jacobian,  0,  cols);	  Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  last	2	None	replace
119	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  0,  jacobianEvaluations);  [CE]  cannot  find  symbol  index  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(rows,  index,  0,  jacobianEvaluations);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(rows,  index,  0,  jacobianEvaluations);	  Arrays.fill(rows,    0);    	non-compiled	[CE]  cannot  find  symbol  index	1	None	replace
120	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [CE]  cannot  find  symbol  index  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]  *  parameters[i]);  }	  	non-compiled	[CE]  cannot  find  symbol  index	23	None	add
121	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [CE]  cannot  find  symbol  index  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(variables[i]);  }	  	non-compiled	[CE]  cannot  find  symbol  index	23	None	add
122	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }  [CE]  cannot  find  symbol  index  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(jacobian[i]  *  parameters[i]);  }	  	non-compiled	[CE]  cannot  find  symbol  index	23	None	add
123	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [CE]  cannot  find  symbol  index  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  -Math.sqrt(data[i]);  }	  	non-compiled	[CE]  cannot  find  symbol  index	23	None	add
124	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  parameters.length);  [CE]  cannot  find  symbol  remainings  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(remainings.length,  parameters.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(remainings.length,  parameters.length);	      	non-compiled	[CE]  cannot  find  symbol  remainings	6	None	replace
125	[BUG]  [BUGGY]  int  rows  =  Arrays.asList(remainders);  [CE]  cannot  find  symbol  remainders  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Arrays.asList(remainders);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Arrays.asList(remainders);	      	non-compiled	[CE]  cannot  find  symbol  remainders	6	None	replace
126	[BUG]  [BUGGY]      int  rows  =  Math.min(remainders.length,  2);  [CE]  cannot  find  symbol  remainders  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]      int  rows  =  Math.min(remainders.length,  2);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	        int  rows  =  Math.min(remainders.length,  2);	  	non-compiled	[CE]  cannot  find  symbol  remainders	5	None	add
127	[BUG]  [BUGGY]  Integer  cols  =  getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Integer  cols  =  getColumnCount()  -  1;  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Integer  cols  =  getColumnCount()  -  1;	      Integer    cols    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
128	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  metrics.length);  [CE]  cannot  find  symbol  results  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(this.results,  0,  metrics.length);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  metrics.length);	  Arrays.fill(this.results,    0);    	non-compiled	[CE]  cannot  find  symbol  results	15	None	replace
129	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  columns);  [CE]  cannot  find  symbol  results  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(this.results,  0,  columns);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(this.results,  0,  columns);	  Arrays.fill(this.results,    0);    	non-compiled	[CE]  cannot  find  symbol  results	15	None	replace
130	[BUG]  [BUGGY]  Arrays.fill(jacobian,  index,  rows);  [CE]  cannot  find  symbol  index  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  index,  rows);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  index,  rows);	  Arrays.fill(jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  index	22	None	replace
131	[BUG]  [BUGGY]  int  rows  =  Math.min(array.length,  cols.length);  [CE]  cannot  find  symbol  array  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(array.length,  cols.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(array.length,  cols.length);	      int    rows    =    Math.min(remainings.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  array	12	None	replace
132	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	int  rows  =  Math.min(parameters.length,  residuals.length);	      int    rows    =    Math.min(remainders.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
133	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(parameters.length,  residuals.length);	      int    rows    =    Math.min(remainders.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
134	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  3);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(jacobian,  3);	  Arrays.fill(jacobian,    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
135	[BUG]  [BUGGY]  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  Arrays.fill(jacobian,  3);  [BUGGY]    for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  3);	  Arrays.fill(jacobian,    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
136	[BUG]  [BUGGY]  int  rows  =  Math.min(colons.length,  residuals.length);  [CE]  cannot  find  symbol  colons  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(colons.length,  residuals.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(colons.length,  residuals.length);	      int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  colons	13	None	replace
137	[BUG]  [BUGGY]  int  rows  =  Math.min(last.length,  cols.length);  [CE]  cannot  find  symbol  last  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(last.length,  cols.length);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(last.length,  cols.length);	      int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  last	13	None	replace
138	[BUG]  [BUGGY]  int  rows  =  getColumnCount();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  getColumnCount();  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  getColumnCount();	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
139	[BUG]  [BUGGY]  int  rows  =  Math.min(measures.size()  -  1);  [CE]  cannot  find  symbol  measures  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();    [BUGGY]  int  rows  =  Math.min(measures.size()  -  1);  [BUGGY]    Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	int  rows  =  Math.min(measures.size()  -  1);	      int    rows    =    Math.min(remainders.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  measures	19	None	replace
