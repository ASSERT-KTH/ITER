bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  cols[j]);  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm,  cols[j]);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm,    parameters[j]);    	non-compiled	[CE]  array  required,  but  int  found	29	None	replace
2	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  cols[j]);  [CE]  array  required,  but  int  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  cols[j]);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm,    parameters[j]);    	non-compiled	[CE]  array  required,  but  int  found	29	None	replace
3	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  measurements[j]);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  measurements[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm,  measurements[j]);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  parameters.length,  cols);	  Arrays.fill(jacobian,    0,    rows,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
5	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  parameters.length,  cols);	  Arrays.fill(jacobian,    0,    rows,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  rows);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  cols,  rows);	  Arrays.fill(jacobian,    0,    rows,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
7	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  rows);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  rows);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols,  rows);	  Arrays.fill(jacobian,    0,    rows,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
8	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  rows,  index);	  Arrays.fill(jacobian,    0,    rows,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
9	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  index);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  rows,  index);	  Arrays.fill(jacobian,    0,    rows,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
10	[BUG]  [BUGGY]  int  index  =  parameters[j]  -  1;  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  parameters[j]  -  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  parameters[j]  -  1;	  int    index    =    wm.getIndex(variants[j]    -    1);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	67	None	replace
11	[BUG]  [BUGGY]  int  index  =  wm.getIndex(parameters[j]  -  1);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(parameters[j]  -  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(parameters[j]  -  1);	  int    index    =    wm.getIndex(variants[j]    -    1);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	67	None	replace
12	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  coefficient,  costEvaluations);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j],  coefficient,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  coefficient,  costEvaluations);	  int    index    =    wm.getIndex(variants[j],    coefficient);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	116	None	replace
13	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  cols,  coefficient);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j],  cols,  coefficient);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  cols,  coefficient);	  int    index    =    wm.getIndex(variants[j],    coefficient);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	116	None	replace
14	[BUG]  [BUGGY]  int  index  =  parameters[j].getIndex(variants[j],  coefficient);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  parameters[j].getIndex(variants[j],  coefficient);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  parameters[j].getIndex(variants[j],  coefficient);	  int    index    =    wm.getIndex(variants[j],    coefficient);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	116	None	replace
15	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  coefficient,  costEvaluations);  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  coefficient,  costEvaluations);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  coefficient,  costEvaluations);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    coefficient);    	non-compiled	[CE]  array  required,  but  int  found	23	None	replace
16	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(cols[j],  factor);  [CE]  cannot  find  symbol  coefficient  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(cols[j],  factor);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  *  wm.getPartial(cols[j],  factor);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    coefficient);    	non-compiled	[CE]  cannot  find  symbol  coefficient	23	None	replace
17	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(index);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(index);	  double[]    parameters    =    wm.getPartialValues(i);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  Arrays.fill(jacobian,  0,  cols,  index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,    0,    cols,    index);    Arrays.fill(jacobian,  0,  cols,  index);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
19	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  Arrays.fill(jacobian,  0,  cols,  index);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  Arrays.fill(jacobian,  0,  cols,  index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    cols,    index);    Arrays.fill(jacobian,  0,  cols,  index);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
20	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  Arrays.fill(jocobian,  0,  cols,  index);  [CE]  cannot  find  symbol  jocobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  Arrays.fill(jocobian,  0,  cols,  index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    cols,    index);    Arrays.fill(jocobian,  0,  cols,  index);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	15	None	add
21	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  Arrays.fill(jacobian,  0,  cols,  error);  [CE]  cannot  find  symbol  error  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  Arrays.fill(jacobian,  0,  cols,  error);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    cols,    index);    Arrays.fill(jacobian,  0,  cols,  error);	  	non-compiled	[CE]  cannot  find  symbol  error	15	None	add
22	[BUG]  [BUGGY]  int  cols  =  measurements[i].getCols()  -  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  measurements[i].getCols()  -  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  measurements[i].getCols()  -  1;	  int    cols    =    parameters[i].getCols()    -    1;    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
23	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  cols);  [CE]  cannot  find  symbol  variants  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  cols);	  jacobian[index++]    =    factor    *    wm.getPartial(variants[j],    cost);    	non-compiled	[CE]  cannot  find  symbol  variants	109	None	replace
24	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  coefficient);  [CE]  cannot  find  symbol  variants  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  coefficient);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  coefficient);	  jacobian[index++]    =    factor    *    wm.getPartial(variants[j],    cost);    	non-compiled	[CE]  cannot  find  symbol  variants	109	None	replace
25	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(braces[j],  cost);  [CE]  cannot  find  symbol  braces  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(braces[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(braces[j],  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(variants[j],    cost);    	non-compiled	[CE]  cannot  find  symbol  braces	109	None	replace
26	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  maxCostEval);  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  maxCostEval);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  maxCostEval);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    costEvaluations);    	non-compiled	[CE]  array  required,  but  int  found	21	None	replace
27	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  cols,  costEvaluations);  [CE]  array  required,  but  int  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  cols,  costEvaluations);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  cols,  costEvaluations);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    costEvaluations);    	non-compiled	[CE]  array  required,  but  int  found	21	None	replace
28	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols[j],  costEvaluations);  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols[j],  costEvaluations);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(cols[j],  costEvaluations);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    costEvaluations);    	non-compiled	[CE]  array  required,  but  int  found	21	None	replace
29	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  parameters);  [CE]  array  required,  but  int  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  parameters);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  parameters);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    costEvaluations);    	non-compiled	[CE]  array  required,  but  int  found	21	None	replace
30	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    int    index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ';'  expected	63	None	replace
31	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  int  index++]  =  coefficient  /  wm.getPartial(parameters[j]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  int  index++]  =  coefficient  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  int  index++]  =  coefficient  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    int    index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ';'  expected	63	None	replace
32	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  int  index++]  =  cost  /  wm.getPartial(parameters[j]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  int  index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  int  index++]  =  cost  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    int    index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ';'  expected	63	None	replace
33	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  int  index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  int  index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  int  index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    int    index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ';'  expected	63	None	replace
34	[BUG]  [BUGGY]  Jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  Jacobian  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  Jacobian	61	None	replace
35	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  index);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  index);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  index);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	73	None	replace
36	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters[j]);  [CE]  no  suitable  method  found  for  fill(double[],int,EstimatedParameter)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,EstimatedParameter)	73	None	replace
37	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  factor);  [CE]  no  suitable  method  found  for  fill(double[],int,double)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  factor);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  factor);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,double)	73	None	replace
38	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(i,  cols);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartials(i,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(i,  cols);	  double[]    parameters    =    wm.getPartials(i);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
39	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(index);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartials(index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(index);	  double[]    parameters    =    wm.getPartials(i);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
40	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	72	None	replace
41	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  parameters[j]);  [CE]  no  suitable  method  found  for  fill(double[],int,EstimatedParameter)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,EstimatedParameter)	72	None	replace
42	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  cols,  costEvaluations);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j],  cols,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  cols,  costEvaluations);	  int    index    =    wm.getIndex(variants[j],    costEvaluations);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	76	None	replace
43	[BUG]  [BUGGY]  int  index  =  parameters[j].getIndex(variants[j],  costEvaluations);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  parameters[j].getIndex(variants[j],  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  parameters[j].getIndex(variants[j],  costEvaluations);	  int    index    =    wm.getIndex(variants[j],    costEvaluations);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	76	None	replace
44	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  maxCostEval);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j],  maxCostEval);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  maxCostEval);	  int    index    =    wm.getIndex(variants[j],    costEvaluations);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	76	None	replace
45	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  index,  jacobianEvaluations);	  Arrays.fill(jacobian,    0,    index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	104	1	replace
46	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianEvaluations);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  index,  jacobianEvaluations);	  Arrays.fill(jacobian,    0,    index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	104	1	replace
47	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  cols[j],  costEvaluations);  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  cols[j],  costEvaluations);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  cols[j],  costEvaluations);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	89	None	replace
48	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  index,  cols[j]);  [CE]  array  required,  but  int  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  index,  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  index,  cols[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	89	None	replace
49	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  cols[j]);  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(i,  cols[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	89	None	replace
50	[BUG]  [BUGGY]  int  cols  =  parameters[j].getCols().length  -  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters[j].getCols().length  -  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters[j].getCols().length  -  1;	  int    cols    =    parameters[j].getCols()    -    1;    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
51	[BUG]  [BUGGY]  int  cols  =  parameters[j].getCols()  *  j  -  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters[j].getCols()  *  j  -  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters[j].getCols()  *  j  -  1;	  int    cols    =    parameters[j].getCols()    -    1;    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
52	[BUG]  [BUGGY]  int  index  =  wm.getIndex()  +  2;  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex()  +  2;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex()  +  2;	  int    index    =    wm.getIndex()    -    2;    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	26	None	replace
53	[BUG]  [BUGGY]  double  index  =  wm.getIndex();  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double  index  =  wm.getIndex();  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double  index  =  wm.getIndex();	  int    index    =    wm.getIndex()    -    2;    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	26	None	replace
54	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  2  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  wm.getColumnCount()  *  2  -  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnCount()  *  2  -  1;	  int    cols    =    wm.getColumnCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
55	[BUG]  [BUGGY]  int  cols  =  wm.getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  wm.getRowCount()  -  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getRowCount()  -  1;	  int    cols    =    wm.getColumnCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
56	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  /  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  wm.getColumnCount()  /  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnCount()  /  1;	  int    cols    =    wm.getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
57	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  wm.getColumnCount()  *  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnCount()  *  1;	  int    cols    =    wm.getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
58	[BUG]  [BUGGY]  int  index  =  parameters[j].getIndex(cols[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  parameters[j].getIndex(cols[j]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  parameters[j].getIndex(cols[j]);	  int    index    =    parameters[j].getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	65	None	replace
59	[BUG]  [BUGGY]  int  index  =  parameters[j].getIndex(rows[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  parameters[j].getIndex(rows[j]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  parameters[j].getIndex(rows[j]);	  int    index    =    parameters[j].getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	65	None	replace
60	[BUG]  [BUGGY]  int  index  =  parameters[j].getIndex(fields[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  parameters[j].getIndex(fields[j]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  parameters[j].getIndex(fields[j]);	  int    index    =    parameters[j].getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	65	None	replace
61	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  rows);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  index,  rows);	  Arrays.fill(jacobian,    0,    rows);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	1	replace
62	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  rows);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  rows);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  index,  rows);	  Arrays.fill(jacobian,    0,    rows);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	1	replace
63	[BUG]  [BUGGY]  Arrays.fill(jacobian,  index,  rows);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  index,  rows);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  index,  rows);	  Arrays.fill(jacobian,    0,    rows);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	105	None	replace
64	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols[j],  coefficient);  [CE]  array  required,  but  int  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols[j],  coefficient);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(cols[j],  coefficient);	  jacobian[index++]    =    factor    /    wm.getPartial(cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	6	None	replace
65	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols[j],  cost);  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(cols[j],  cost);	  jacobian[index++]    =    factor    /    wm.getPartial(cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	6	None	replace
66	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(jacobian,  0,  cols,  costEvaluations);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
67	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(jacobian,  0,  cols,  costEvaluations);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
68	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jocobian,  0,  cols,  costEvaluations);  [CE]  cannot  find  symbol  jocobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jocobian,  0,  cols,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(jocobian,  0,  cols,  costEvaluations);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	13	None	add
69	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  0,  cols,  costsEvaluations);  [CE]  cannot  find  symbol  costsEvaluations  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  0,  cols,  costsEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(jacobian,  0,  cols,  costsEvaluations);	  	non-compiled	[CE]  cannot  find  symbol  costsEvaluations	13	None	add
70	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  0,  cols,  coûtEvaluations);  [CE]  cannot  find  symbol  co  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  0,  cols,  coûtEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(jacobian,  0,  cols,  coûtEvaluations);	  	non-compiled	[CE]  cannot  find  symbol  co	13	None	add
71	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    cols);    jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	87	None	replace
72	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  coefficient  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    cols);    jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	87	None	replace
73	[BUG]  [BUGGY]  double[]  parameters  =  parameters[j].getPartialValues(wm.getPartialValues(parameters[j]);  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  parameters[j].getPartialValues(wm.getPartialValues(parameters[j]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  parameters[j].getPartialValues(wm.getPartialValues(parameters[j]);	  double[]    parameters    =    wm.getPartialValues(parameters[j]);    	non-compiled	[CE]  ')'  expected	44	None	replace
74	[BUG]  [BUGGY]  double[]  parameters  =  parameters[j].getPartialValues(wm,  j]);  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  parameters[j].getPartialValues(wm,  j]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  parameters[j].getPartialValues(wm,  j]);	  double[]    parameters    =    wm.getPartialValues(parameters[j]);    	non-compiled	[CE]  ')'  expected	44	None	replace
75	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(parameters[j],  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(parameters[j],  coefficient);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(parameters[j],  coefficient);	  double[]    parameters    =    wm.getPartialValues(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	44	None	replace
76	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(cols,  parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(branch,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	99	None	replace
77	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(j,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(j,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(j,  parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(branch,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	99	None	replace
78	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  cols);  [CE]  cannot  find  symbol  variants  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(variants[j],  cols);	  double[]    parameters    =    wm.getPartialValues(variants[j],    cost);    	non-compiled	[CE]  cannot  find  symbol  variants	45	None	replace
79	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  factor);  [CE]  cannot  find  symbol  variants  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  factor);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(variants[j],  factor);	  double[]    parameters    =    wm.getPartialValues(variants[j],    cost);    	non-compiled	[CE]  cannot  find  symbol  variants	45	None	replace
80	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index  +  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  cols,  index  +  1);	  Arrays.fill(jacobian,    0,    cols,    index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
81	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index  +  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols,  index  +  1);	  Arrays.fill(jacobian,    0,    cols,    index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
82	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols.length);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols.length);	  Arrays.fill(jacobian,    0,    parameters.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	74	None	replace
83	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length  +  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length  +  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  parameters.length  +  1);	  Arrays.fill(jacobian,    0,    parameters.length);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	74	None	replace
84	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize(i,  cols);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize(i,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize(i,  cols);	  double[]    parameters    =    wm.getPartialSize(i);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
85	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize(index);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize(index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize(index);	  double[]    parameters    =    wm.getPartialSize(i);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
86	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols,  measurements[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols,  measurements[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols,  measurements[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(cols,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	30	None	replace
87	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols,  j,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols,  j,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols,  j,  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(cols,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	30	None	replace
88	[BUG]  [BUGGY]  int  cols  =  parameters[j].getCols()  /  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters[j].getCols()  /  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters[j].getCols()  /  1;	  int    cols    =    parameters[j].getCols()    +    1;    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
89	[BUG]  [BUGGY]  int  cols  =  parameters.getColumnsCount()  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters.getColumnsCount()  -  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters.getColumnsCount()  -  1;	  int    cols    =    wm.getColumnsCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
90	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  *  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  wm.getColumnsCount()  *  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnsCount()  *  1;	  int    cols    =    wm.getColumnsCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
91	[BUG]  [BUGGY]  jacobian[i++]  =  factors  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  factors  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factors  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]  =  factors  *  wm.getPartial(parameters[j]);	  jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  factors	69	None	replace
92	[BUG]  [BUGGY]  jacobian[i++]  =  coefficient  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  coefficient  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  coefficient  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]  =  coefficient  *  wm.getPartial(parameters[j]);	  jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	69	None	replace
93	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[i++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	1	replace
94	[BUG]  [BUGGY]  jacobian[i++]  =  factor  /  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	1	replace
95	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(factor,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(factor,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  /  wm.getPartial(factor,  parameters[j]);	  jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	5	None	replace
96	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  cost,  parameters);  [CE]  array  required,  but  int  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  cost,  parameters);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  cost,  parameters);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    cost);    	non-compiled	[CE]  array  required,  but  int  found	22	None	replace
97	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols[j]);  int  index  =  wm.getIndex(parameters[j]);  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols[j]);  int  index  =  wm.getIndex(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(cols[j]);  int  index  =  wm.getIndex(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(parameters[j]);    	non-compiled	[CE]  array  required,  but  int  found	102	None	replace
98	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(parameters[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(parameters[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	102	None	replace
99	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j],  cols[j]);  int  index  =  wm.getIndex(parameters[j]);  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j],  cols[j]);  int  index  =  wm.getIndex(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j],  cols[j]);  int  index  =  wm.getIndex(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(parameters[j]);    	non-compiled	[CE]  array  required,  but  int  found	102	None	replace
100	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(variables[j],  coefficient);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(variables[j],  coefficient);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(variables[j],  coefficient);	  jacobian[index++]    =    factor    *    wm.getPartial(variables[j],    coefficient);    	non-compiled	[CE]  cannot  find  symbol  	108	None	replace
101	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  cols);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  cols);	  jacobian[index++]    =    factor    *    wm.getPartial(variables[j],    coefficient);    	non-compiled	[CE]  cannot  find  symbol  	108	None	replace
102	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(variables[j],  factor);  [CE]  cannot  find  symbol  coefficient  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(variables[j],  factor);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  *  wm.getPartial(variables[j],  factor);	  jacobian[index++]    =    factor    *    wm.getPartial(variables[j],    coefficient);    	non-compiled	[CE]  cannot  find  symbol  coefficient	108	None	replace
103	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j]  +  1],  costEvaluations);  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j]  +  1],  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j]  +  1],  costEvaluations);	  int    index    =    wm.getIndex(variants[j]    +    1);    	non-compiled	[CE]  ')'  expected	64	None	replace
104	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j]  +  2);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j]  +  2);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j]  +  2);	  int    index    =    wm.getIndex(variants[j]    +    1);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	64	None	replace
105	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j]  *  1);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j]  *  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j]  *  1);	  int    index    =    wm.getIndex(variants[j]    +    1);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	64	None	replace
106	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	119	None	replace
107	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  [CE]  cannot  find  symbol  coefficient  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(variants[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	119	None	replace
108	[BUG]  [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	119	None	replace
109	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(variants[j]);  int  index  =  wm.getIndex(variants[j]);  [CE]  cannot  find  symbol  coefficient  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(variants[j]);  int  index  =  wm.getIndex(variants[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  *  wm.getPartial(variants[j]);  int  index  =  wm.getIndex(variants[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(variants[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	119	None	replace
110	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(index,  j);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartials(index,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(index,  j);	  double[]    parameters    =    wm.getPartials(j);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
111	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(cols,  j);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartials(cols,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(cols,  j);	  double[]    parameters    =    wm.getPartials(j);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
112	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(cols);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartials(cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(cols);	  double[]    parameters    =    wm.getPartials(j);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
113	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(parameters[j],  costEvaluations);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(parameters[j],  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(parameters[j],  costEvaluations);	  double[]    parameters    =    wm.getPartialValues(variants[j],    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
114	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(i,  j,  cols);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(i,  j,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(i,  j,  cols);	  double[]    parameters    =    wm.getPartialValues(i,    j);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
115	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  j,  cols);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  j,  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  j,  cols);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    j);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	83	None	replace
116	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  cols,  j);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  cols,  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  cols,  j);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    j);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	83	None	replace
117	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  i);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  i);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(j,  i);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    j);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	83	None	replace
118	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  index,  j);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  index,  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  index,  j);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    j);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	83	None	replace
119	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variant[j]);  [CE]  cannot  find  symbol  variant  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variant[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variant[j]);	  jacobian[index++]    =    coefficient    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  variant	71	None	replace
120	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize(cols,  j);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize(cols,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize(cols,  j);	  double[]    parameters    =    wm.getPartialSize(j);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
121	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize(cols);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize(cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize(cols);	  double[]    parameters    =    wm.getPartialSize(j);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
122	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize(index,  j);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize(index,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize(index,  j);	  double[]    parameters    =    wm.getPartialSize(j);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
123	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(variables[j],  cost);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(variables[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(variables[j],  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(variables[j],    cost);    	non-compiled	[CE]  cannot  find  symbol  	49	None	replace
124	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(variables[j],  cost);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(variables[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(variables[j],  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(variables[j],    cost);    	non-compiled	[CE]  cannot  find  symbol  	49	None	replace
125	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	68	1	add
126	[BUG]  [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	68	1	add
127	[BUG]  [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  Jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  Jacobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  Jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    Jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  cannot  find  symbol  Jacobian	68	None	add
128	[BUG]  [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  int  cols  =  parameters[j].getColumns();  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  int  cols  =  parameters[j].getColumns();  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    int  cols  =  parameters[j].getColumns();  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  cannot  find  symbol	68	None	add
129	[BUG]  [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  int  cols  =  parameters[j];  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  int  cols  =  parameters[j];  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    int  cols  =  parameters[j];  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  incompatible  types	68	None	add
130	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  coefficient,  costEvaluations);  [CE]  cannot  find  symbol  variants  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  coefficient,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(variants[j],  coefficient,  costEvaluations);	  double[]    parameters    =    wm.getPartialValues(variants[j],    coefficient);    	non-compiled	[CE]  cannot  find  symbol  variants	46	None	replace
131	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  rows,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  0,  rows,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	add
132	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  rows,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  rows,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  0,  rows,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	add
133	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jocobian,  0,  rows,  cols);  [CE]  cannot  find  symbol  jocobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jocobian,  0,  rows,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jocobian,  0,  rows,  cols);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	19	None	add
134	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  columns,  cols);  [CE]  cannot  find  symbol  columns  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  columns,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  0,  columns,  cols);	  	non-compiled	[CE]  cannot  find  symbol  columns	19	None	add
135	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  1,  rows,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  1,  rows,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	add
136	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  1,  rows,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  1,  rows,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  1,  rows,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	add
137	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  parameters.getPartial(variables[j]);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  parameters.getPartial(variables[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  parameters.getPartial(variables[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(variables[j]);    	non-compiled	[CE]  cannot  find  symbol  	98	None	replace
138	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variables[j],  coefficient);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variables[j],  coefficient);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(variables[j],  coefficient);	  jacobian[index++]    =    factor    /    wm.getPartial(variables[j]);    	non-compiled	[CE]  cannot  find  symbol  	98	None	replace
139	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variables[j],  cost);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variables[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(variables[j],  cost);	  jacobian[index++]    =    factor    /    wm.getPartial(variables[j]);    	non-compiled	[CE]  cannot  find  symbol  	98	None	replace
140	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  Arrays.fill(jacobian,  0,  index,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,    0,    index,    cols);    Arrays.fill(jacobian,  0,  index,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
141	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  Arrays.fill(jacobian,  0,  index,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  Arrays.fill(jacobian,  0,  index,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    index,    cols);    Arrays.fill(jacobian,  0,  index,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
142	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  Arrays.fill(jocobian,  0,  index,  cols);  [CE]  cannot  find  symbol  jocobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  Arrays.fill(jocobian,  0,  index,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    index,    cols);    Arrays.fill(jocobian,  0,  index,  cols);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	17	None	add
143	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  Arrays.fill(jacobian,  0,  error,  cols);  [CE]  cannot  find  symbol  error  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  Arrays.fill(jacobian,  0,  error,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    index,    cols);    Arrays.fill(jacobian,  0,  error,  cols);	  	non-compiled	[CE]  cannot  find  symbol  error	17	None	add
144	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  i);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j],  i);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  i);	  int    index    =    wm.getIndex(variants[j],    cols);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	66	None	replace
145	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(costEvaluations[j]);  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(costEvaluations[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(costEvaluations[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(variants[j]);    	non-compiled	[CE]  array  required,  but  int  found	7	None	replace
146	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(factors[j]);  [CE]  cannot  find  symbol  factors  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(factors[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(factors[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(variants[j]);    	non-compiled	[CE]  cannot  find  symbol  factors	7	None	replace
147	[BUG]  [BUGGY]  int  index  =  wm.getIndex(cols,  j);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(cols,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(cols,  j);	  int    index    =    wm.getIndex(j);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	27	None	replace
148	[BUG]  [BUGGY]  int  index  =  wm.getIndex(i);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(i);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(i);	  int    index    =    wm.getIndex(j);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	27	None	replace
149	[BUG]  [BUGGY]  int  index  =  wm.getIndex(cols);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(cols);	  int    index    =    wm.getIndex(j);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	27	None	replace
150	[BUG]  [BUGGY]  int  index  =  wm.getIndex(i,  j);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(i,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(i,  j);	  int    index    =    wm.getIndex(j);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	27	None	replace
151	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variant[j]);  [CE]  cannot  find  symbol  variant  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variant[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(variant[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(data[j]);    	non-compiled	[CE]  cannot  find  symbol  variant	81	None	replace
152	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  data[j]);  [CE]  cannot  find  symbol  data  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  data[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(i,  data[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(data[j]);    	non-compiled	[CE]  cannot  find  symbol  data	81	None	replace
153	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  index,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int,int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  index,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  rows,  index,  cols);	  Arrays.fill(jacobian,    0,    index,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,int,int)	18	None	replace
154	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  row,  index,  cols);  [CE]  cannot  find  symbol  row  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  row,  index,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  row,  index,  cols);	  Arrays.fill(jacobian,    0,    index,    cols);    	non-compiled	[CE]  cannot  find  symbol  row	18	None	replace
155	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  2);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  index,  2);	  Arrays.fill(jacobian,    0,    index,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
156	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  2);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  index,  2);	  Arrays.fill(jacobian,    0,    index,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
157	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(variants[j]);  [CE]  cannot  find  symbol  variants  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(variants[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  *  wm.getPartial(variants[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(variants[j]);    jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	118	None	replace
158	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  wm[j]);  [CE]  array  required,  but  WeightedMeasurement  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  wm[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  wm[j]);	  jacobian[index++]    =    factor    *    parameters[j].getPartial(wm,    parameters[j]);    	non-compiled	[CE]  array  required,  but  WeightedMeasurement  found	93	None	replace
159	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  parameters[j],  cost);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  parameters[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  parameters[j],  cost);	  jacobian[index++]    =    factor    *    parameters[j].getPartial(wm,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
160	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[i].getPartial(wm,  parameters[j]);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[i].getPartial(wm,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[i].getPartial(wm,  parameters[j]);	  jacobian[index++]    =    factor    *    parameters[j].getPartial(wm,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
161	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(colons[j]);  [CE]  cannot  find  symbol  coefficient  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(colons[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  *  wm.getPartial(colons[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	96	None	replace
162	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(choos[j]);  [CE]  cannot  find  symbol  choos  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(choos[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(choos[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  choos	96	None	replace
163	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(factor,  j);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(factor,  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  *  wm.getPartial(factor,  j);	  jacobian[index++]    =    cost    *    wm.getPartial(colons[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	96	None	replace
164	[BUG]  [BUGGY]  Double[]  parameters  =  wm.getPartialStructureValues();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Double[]  parameters  =  wm.getPartialStructureValues();  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm.getPartialStructureValues();	  Double[]    parameters    =    wm.getPartialValues();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
165	[BUG]  [BUGGY]  Double[]  parameters  =  wm.getPartialStructures();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Double[]  parameters  =  wm.getPartialStructures();  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm.getPartialStructures();	  Double[]    parameters    =    wm.getPartialValues();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
166	[BUG]  [BUGGY]  Double[]  parameters  =  wm.getPartialValues(j);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Double[]  parameters  =  wm.getPartialValues(j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm.getPartialValues(j);	  Double[]    parameters    =    wm.getPartialValues();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
167	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	add
168	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	add
169	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  Jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  Jacobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  Jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    Jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  cannot  find  symbol  Jacobian	4	None	add
170	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  /  wm.getPartial(parameters[j]);  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  index++]  =  cost  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  ')'  expected	4	None	add
171	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index++]  =  cost  /  wm.getPartial(parameters[j]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    int  index++]  =  cost  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  ';'  expected	4	None	add
172	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cocons[j]);  [CE]  cannot  find  symbol  cocons  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cocons[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(cocons[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  cocons	8	None	replace
173	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cos[j]);  [CE]  cannot  find  symbol  cos  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cos[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(cos[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  cos	8	None	replace
174	[BUG]  [BUGGY]  Double[]  parameters  =  wm.getPartialSize(j);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Double[]  parameters  =  wm.getPartialSize(j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm.getPartialSize(j);	  Double[]    parameters    =    wm.getPartialSize();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
175	[BUG]  [BUGGY]  Double[]  parameters  =  wm.getPartialSize()  +  j;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Double[]  parameters  =  wm.getPartialSize()  +  j;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm.getPartialSize()  +  j;	  Double[]    parameters    =    wm.getPartialSize();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
176	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations  +  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  cols,  costEvaluations  +  1);	  Arrays.fill(jacobian,    0,    cols    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
177	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations  +  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols,  costEvaluations  +  1);	  Arrays.fill(jacobian,    0,    cols    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
178	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  j  +  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  cols,  j  +  1);	  Arrays.fill(jacobian,    0,    cols    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
179	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  j  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  j  +  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols,  j  +  1);	  Arrays.fill(jacobian,    0,    cols    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
180	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols  +  1,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  cols  +  1,  j);	  Arrays.fill(jacobian,    0,    cols    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
181	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols  +  1,  j);  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols  +  1,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols  +  1,  j);	  Arrays.fill(jacobian,    0,    cols    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
182	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j].getWeight());  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j].getWeight());  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j].getWeight());	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    int    index    =    parameters[j].getIndex();    jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
183	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]        =        cost        *        wm.getPartial(parameters[j]);        jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	1	add
184	[BUG]  [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        cost        *        wm.getPartial(parameters[j]);        jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	1	add
185	[BUG]  [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  Jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  Jacobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  Jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        cost        *        wm.getPartial(parameters[j]);        jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  cannot  find  symbol  Jacobian	37	None	add
186	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]        =        cost        *        wm.getPartial(parameters[j]);        jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	1	add
187	[BUG]  [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        cost        *        wm.getPartial(parameters[j]);        jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	1	add
188	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  index);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    index);    jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	101	None	replace
189	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j],  cols);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j],  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j],  cols);	  jacobian[index++]    =    factor    /    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	80	None	replace
190	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  /  wm.getPartial(i,  cols[j]);  [CE]  cannot  find  symbol  coefficient  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  /  wm.getPartial(i,  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  /  wm.getPartial(i,  cols[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	80	None	replace
191	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    double[index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ']'  expected	117	None	replace
192	[BUG]  [BUGGY]  double[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    double[index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ']'  expected	117	None	replace
193	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j].getWeight());  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j].getWeight());  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j].getWeight());	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    double[index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ']'  expected	117	None	replace
194	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    double[index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ']'  expected	117	None	replace
195	[BUG]  [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(cols[j]);  [CE]  array  required,  but  int  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]  =  factor  *  wm.getPartial(cols[j]);	  jacobian[i++]    =    factor    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  array  required,  but  int  found	112	None	replace
196	[BUG]  [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(index,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(index,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]  =  factor  *  wm.getPartial(index,  parameters[j]);	  jacobian[i++]    =    factor    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	112	None	replace
197	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  double[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  double[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  double[index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ']'  expected	100	None	replace
198	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[index++]  =  cost  /  wm.getPartial(parameters[j]);  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[index++]  =  cost  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ']'  expected	100	None	replace
199	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[index++]  =  coefficient  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ']'  expected	100	None	replace
200	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  double[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  double[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  double[index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ']'  expected	100	None	replace
201	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  factor.getPartial());  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  factor.getPartial());  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  factor.getPartial());	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  double  cannot  be  dereferenced	88	None	replace
202	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  factor;  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  factor;  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  factor;	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  ')'  expected	88	None	replace
203	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  cols[j]);  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(j,  cols[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	92	None	replace
204	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants,  cols[j]);  [CE]  cannot  find  symbol  variants  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants,  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variants,  cols[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    cols[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	92	None	replace
205	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  cols[j]);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  cols[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    cols[j]);    	non-compiled	[CE]  cannot  find  symbol  	92	None	replace
206	[BUG]  [BUGGY]  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ')'  expected	40	None	replace
207	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ')'  expected	40	None	replace
208	[BUG]  [BUGGY]  Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ')'  expected	40	None	replace
209	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j].getWeight());  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j].getWeight());  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j].getWeight());	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ')'  expected	40	None	replace
210	[BUG]  [BUGGY]  Arrays.fill(jacobian,  index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ')'  expected	62	None	replace
211	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ')'  expected	62	None	replace
212	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  /  wm.getPartial(parameters[j]);  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ')'  expected	62	None	replace
213	[BUG]  [BUGGY]  Arrays.fill(jacobian,  index++]  =  cost  /  wm.getPartial(parameters[j]);  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  index++]  =  cost  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ')'  expected	62	None	replace
214	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  parameters[j]);  [CE]  cannot  find  symbol  variants  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(data[j],    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	94	None	replace
215	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(data[j],  cols[j]);  [CE]  cannot  find  symbol  data  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(data[j],  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(data[j],  cols[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(data[j],    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  data	94	None	replace
216	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  data[j]);  [CE]  cannot  find  symbol  variants  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  data[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  data[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(data[j],    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	94	None	replace
217	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  parameters[j]);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(data[j],    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  	94	None	replace
218	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j],  cols);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j],  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j],  cols);	  jacobian[index++]    =    factor    *    wm.getPartial(jacobian[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	82	None	replace
219	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j],  cost);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j],  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(jacobian[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	82	None	replace
220	[BUG]  [BUGGY]  int  cols  =  wm.getCols()  +  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  wm.getCols()  +  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getCols()  +  1;	  int    cols    =    wm.getCols();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
221	[BUG]  [BUGGY]  int  cols  =  parameters.getCols();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters.getCols();  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters.getCols();	  int    cols    =    wm.getCols();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
222	[BUG]  [BUGGY]  int  cols  =  wm.getCols()  *  j;  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  wm.getCols()  *  j;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getCols()  *  j;	  int    cols    =    wm.getCols();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
223	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  /  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  wm.getColumnsCount()  /  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnsCount()  /  1;	  int    cols    =    wm.getColumnsCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
224	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize()  *  j;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize()  *  j;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize()  *  j;	  double[]    parameters    =    wm.getPartialSize()    +    j;    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
225	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize()  +  cols;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize()  +  cols;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize()  +  cols;	  double[]    parameters    =    wm.getPartialSize()    +    j;    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
226	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize()  /  j;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize()  /  j;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize()  /  j;	  double[]    parameters    =    wm.getPartialSize()    +    j;    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
227	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  /  2;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  wm.getColumnCount()  /  2;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnCount()  /  2;	  int    cols    =    wm.getColumnCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
228	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  2  +  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  wm.getColumnCount()  *  2  +  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnCount()  *  2  +  1;	  int    cols    =    wm.getColumnCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
229	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  j]);  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    j]);    	non-compiled	[CE]  ')'  expected	110	None	replace
230	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(brace,  j]);  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(brace,  j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  *  wm.getPartial(brace,  j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    j]);    	non-compiled	[CE]  ')'  expected	110	None	replace
231	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols,  j]);  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols,  j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols,  j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    j]);    	non-compiled	[CE]  ')'  expected	110	None	replace
232	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(brace,  j]);  [CE]  ')'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(brace,  j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(brace,  j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    j]);    	non-compiled	[CE]  ')'  expected	110	None	replace
233	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  j);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  j);	  jacobian[index++]    =    factor    *    wm.getPartial(j,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
234	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(j,  cols[j]);  [CE]  cannot  find  symbol  coefficient  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(j,  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  *  wm.getPartial(j,  cols[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(j,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	31	None	replace
235	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  variables[j]);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  variables[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  variables[j]);	  jacobian[index++]    =    factor    *    parameters[j].getPartial(variables[j]);    	non-compiled	[CE]  cannot  find  symbol  	48	None	replace
236	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  variables[j].getPartial(variables[j]);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  variables[j].getPartial(variables[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  variables[j].getPartial(variables[j]);	  jacobian[index++]    =    factor    *    parameters[j].getPartial(variables[j]);    	non-compiled	[CE]  cannot  find  symbol  	48	None	replace
237	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	1	replace
238	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	1	replace
239	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  j);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(index,  j);	  double[]    parameters    =    wm.getPartialValues(index,    cols);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
240	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  jacobianEvaluations);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  jacobianEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(index,  jacobianEvaluations);	  double[]    parameters    =    wm.getPartialValues(index,    cols);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
241	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  coefficient);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(index,  coefficient);	  double[]    parameters    =    wm.getPartialValues(index,    cols);    	non-compiled	[CE]  cannot  find  symbol  coefficient	12	None	replace
242	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  factor);  [CE]  cannot  find  symbol  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  factor);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(index,  factor);	  double[]    parameters    =    wm.getPartialValues(index,    cols);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
243	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  cost);  [CE]  array  required,  but  WeightedMeasurement  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  cost);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm[j]);    	non-compiled	[CE]  array  required,  but  WeightedMeasurement  found	47	None	replace
244	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  costEvaluations);  [CE]  array  required,  but  WeightedMeasurement  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  costEvaluations);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  costEvaluations);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm[j]);    	non-compiled	[CE]  array  required,  but  WeightedMeasurement  found	47	None	replace
245	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  coefficient);  [CE]  array  required,  but  WeightedMeasurement  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  coefficient);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  coefficient);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm[j]);    	non-compiled	[CE]  array  required,  but  WeightedMeasurement  found	47	None	replace
246	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  cols[j]);  [CE]  array  required,  but  WeightedMeasurement  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  cols[j]);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm[j]);    	non-compiled	[CE]  array  required,  but  WeightedMeasurement  found	47	None	replace
247	[BUG]  [BUGGY]  int  cols  =  parameters.getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters.getColumnCount()  -  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters.getColumnCount()  -  1;	  int    cols    =    parameters.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
248	[BUG]  [BUGGY]  int  cols  =  parameters.getColumnCount()  -  2;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters.getColumnCount()  -  2;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters.getColumnCount()  -  2;	  int    cols    =    parameters.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
249	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(j,  index);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(j,  index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(j,  index);	  double[]    parameters    =    wm.getPartialValues(j,    cols);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
250	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  j,  cols);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  j,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(index,  j,  cols);	  double[]    parameters    =    wm.getPartialValues(j,    cols);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
251	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	1	replace
252	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	1	replace
253	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(cols[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  array  required,  but  int  found  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(cols[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  *  wm.getPartial(cols[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  array  required,  but  int  found	38	None	replace
254	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  cost  /  wm.getPartial(parameters[j]);  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  cost  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  not  a  statement	86	None	replace
255	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  double[]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  double[]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  double[]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  not  a  statement	86	None	replace
256	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  coefficient  /  wm.getPartial(parameters[j]);  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  coefficient  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  coefficient  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  not  a  statement	86	None	replace
257	[BUG]  [BUGGY]  double[]  parameters  =  cost,  wm.getPartialValues();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  cost,  wm.getPartialValues();  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  cost,  wm.getPartialValues();	  double[]    parameters    =    wm,    cost.getPartialValues();    	non-compiled	[CE]  ';'  expected	114	None	replace
258	[BUG]  [BUGGY]  double[]  parameters  =  wm,  cost.getPartialEvaluations();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm,  cost.getPartialEvaluations();  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm,  cost.getPartialEvaluations();	  double[]    parameters    =    wm,    cost.getPartialValues();    	non-compiled	[CE]  ';'  expected	114	None	replace
259	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(cols,  j);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(cols,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(cols,  j);	  double[]    parameters    =    wm.getPartialValues(j);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
260	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  rows,  costEvaluations);	  Arrays.fill(jacobian,    0,    cols,    costEvaluations);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
261	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  costEvaluations);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  rows,  costEvaluations);	  Arrays.fill(jacobian,    0,    cols,    costEvaluations);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
262	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  cols,  j);	  Arrays.fill(jacobian,    0,    cols,    costEvaluations);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
263	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  j);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols,  j);	  Arrays.fill(jacobian,    0,    cols,    costEvaluations);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
264	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  cols,  1);	  Arrays.fill(jacobian,    0,    cols,    costEvaluations);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
265	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols,  1);	  Arrays.fill(jacobian,    0,    cols,    costEvaluations);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
266	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  Jacobian  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  Jacobian	39	None	replace
267	[BUG]  [BUGGY]  Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  Jacobian  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  Jacobian	39	None	replace
268	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  i);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  i);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(index,  i);	  double[]    parameters    =    wm.getPartialValues(i,    index);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
269	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[i++]    =    factor    *    wm.getPartial(parameters[j]);    jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
270	[BUG]  [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    factor    *    wm.getPartial(parameters[j]);    jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
271	[BUG]  [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  Jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  Jacobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  Jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    factor    *    wm.getPartial(parameters[j]);    Jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  cannot  find  symbol  Jacobian	111	None	add
272	[BUG]  [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  int  cols  =  parameters[j].getColumns();  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  int  cols  =  parameters[j].getColumns();  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    factor    *    wm.getPartial(parameters[j]);    int  cols  =  parameters[j].getColumns();  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  cannot  find  symbol	111	None	add
273	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(i,  wm.getWeight());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(i,  wm.getWeight());  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(i,  wm.getWeight());	  jacobian[index++]    =    factor    *    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
274	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(i,  wm);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(i,  wm);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(i,  wm);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
275	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(i,  cols[j]);  [CE]  cannot  find  symbol  coefficient  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(i,  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  *  wm.getPartial(i,  cols[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	28	None	replace
276	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(variants[j]);  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  variants  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(variants[j]);  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  *  wm.getPartial(variants[j]);  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(variants[j]);    jacobian[index++]    =    factor    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	120	None	replace
277	[BUG]  [BUGGY]  int  index  =  parameters[j].getIndex(variants[j],  cost);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  parameters[j].getIndex(variants[j],  cost);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  parameters[j].getIndex(variants[j],  cost);	  int    index    =    wm.getIndex(variants[j],    cost);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	115	None	replace
278	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  cols,  cost);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j],  cols,  cost);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  cols,  cost);	  int    index    =    wm.getIndex(variants[j],    cost);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	115	None	replace
279	[BUG]  [BUGGY]  int  cols  =  parameters.getColumnsCount()  +  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters.getColumnsCount()  +  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters.getColumnsCount()  +  1;	  int    cols    =    parameters.getColumnsCount();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
280	[BUG]  [BUGGY]  int  index  =  wm.getIndex()  *  1;  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex()  *  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex()  *  1;	  int    index    =    wm.getIndex()    +    1;    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	24	None	replace
281	[BUG]  [BUGGY]  int  cols  =  parameters[j].getCols().length  -  2;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters[j].getCols().length  -  2;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters[j].getCols().length  -  2;	  int    cols    =    parameters[j].getCols()    -    2;    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
282	[BUG]  [BUGGY]  int  cols  =  parameters[j].getCols()  *  2;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters[j].getCols()  *  2;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters[j].getCols()  *  2;	  int    cols    =    parameters[j].getCols()    -    2;    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
283	[BUG]  [BUGGY]  Double[]  parameters  =  wm.getPartials(j);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Double[]  parameters  =  wm.getPartials(j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm.getPartials(j);	  Double[]    parameters    =    wm.getPartials();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
284	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ';'  expected	41	None	replace
285	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j].getWeight());  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j].getWeight());  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j].getWeight());	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ';'  expected	41	None	replace
286	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ';'  expected	41	None	replace
287	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]        =        factor        /        wm.getPartial(parameters[j]);        jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	add
288	[BUG]  [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        factor        /        wm.getPartial(parameters[j]);        jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	add
289	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]        =        factor        /        wm.getPartial(parameters[j]);        jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	add
290	[BUG]  [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        factor        /        wm.getPartial(parameters[j]);        jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	add
291	[BUG]  [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  Jacobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        factor        /        wm.getPartial(parameters[j]);        jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  cannot  find  symbol  Jacobian	59	None	add
292	[BUG]  [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  coefficient  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        factor        /        wm.getPartial(parameters[j]);        jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  cannot  find  symbol  coefficient	59	None	add
293	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(i,  index);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartials(i,  index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(i,  index);	  double[]    parameters    =    wm.getPartials(i,    j);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
294	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(i,  j,  cols);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartials(i,  j,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(i,  j,  cols);	  double[]    parameters    =    wm.getPartials(i,    j);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
295	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  residuals);  [CE]  no  suitable  method  found  for  fill(double[],int,int,double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  residuals);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  index,  residuals);	  Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,double[])	104	None	replace
296	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index  =  parameters[j].getIndex();  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index  =  parameters[j].getIndex();  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    int  index  =  parameters[j].getIndex();  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	4	None	add
297	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  double[]  =  cost  /  wm.getPartial(parameters[j]);  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  double[]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    double[]  =  cost  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  not  a  statement	4	None	add
298	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  cols);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	4	None	add
299	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols.length);  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols.length);  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  cols.length);  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	add
300	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  3;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  wm.getColumnCount()  *  3;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnCount()  *  3;	  int    cols    =    wm.getColumnCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
301	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  4;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  wm.getColumnCount()  *  4;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnCount()  *  4;	  int    cols    =    wm.getColumnCount()    *    2;    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
302	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(data[j]);  double[]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(data[j]);  double[]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(data[j]);  double[]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  not  a  statement	86	None	replace
303	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variants[j]);  double[]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variants[j]);  double[]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(variants[j]);  double[]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  not  a  statement	86	None	replace
304	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  factor  *  wm.getPartial(parameters[j]);  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  factor  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  not  a  statement	86	None	replace
305	[BUG]  [BUGGY]  double[]  parameters  =  parameters[j].getPartialValues(wm);  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  parameters[j].getPartialValues(wm);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  parameters[j].getPartialValues(wm);	  double[]    parameters    =    wm.getPartialValues(parameters[j]);    	non-compiled	[CE]  double  cannot  be  dereferenced	44	None	replace
306	[BUG]  [BUGGY]  double[]  parameters  =  parameters[j].getPartialValues(wm,  parameters[j]);  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  parameters[j].getPartialValues(wm,  parameters[j]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  parameters[j].getPartialValues(wm,  parameters[j]);	  double[]    parameters    =    wm.getPartialValues(parameters[j]);    	non-compiled	[CE]  double  cannot  be  dereferenced	44	None	replace
307	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  parameters.length,  j);	  Arrays.fill(jacobian,    0,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	1	replace
308	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length,  j);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  parameters.length,  j);	  Arrays.fill(jacobian,    0,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	1	replace
309	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j]  -  1],  costEvaluations);  [CE]  ')'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j]  -  1],  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j]  -  1],  costEvaluations);	  int    index    =    wm.getIndex(variants[j]    -    1);    	non-compiled	[CE]  ')'  expected	67	None	replace
310	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  costEvaluations  -  1);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j],  costEvaluations  -  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  costEvaluations  -  1);	  int    index    =    wm.getIndex(variants[j]    -    1);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	67	None	replace
311	[BUG]  [BUGGY]  double[]  parameters  =  cost.getPartialValues();  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  cost.getPartialValues();  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  cost.getPartialValues();	  double[]    parameters    =    wm,    cost.getPartialValues();    	non-compiled	[CE]  double  cannot  be  dereferenced	114	None	replace
312	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  j);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm,  j);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm[j]);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
313	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  parameters.getPartial(wm[j]);  [CE]  array  required,  but  WeightedMeasurement  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  parameters.getPartial(wm[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  parameters.getPartial(wm[j]);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm[j]);    	non-compiled	[CE]  array  required,  but  WeightedMeasurement  found	47	None	replace
314	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  i);  [CE]  array  required,  but  WeightedMeasurement  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  i);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  i);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm[j]);    	non-compiled	[CE]  array  required,  but  WeightedMeasurement  found	47	None	replace
315	[BUG]  [BUGGY]  Double[]  parameters  =  wm.getPartialStdValues();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Double[]  parameters  =  wm.getPartialStdValues();  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm.getPartialStdValues();	  Double[]    parameters    =    wm.getPartialValues();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
316	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  i]);  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  i]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(j,  i]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    j]);    	non-compiled	[CE]  ')'  expected	110	None	replace
317	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  parameters[j]);  [CE]  array  required,  but  WeightedMeasurement  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm[j],  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(data[j],    parameters[j]);    	non-compiled	[CE]  array  required,  but  WeightedMeasurement  found	94	None	replace
318	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  wm[j]);  [CE]  cannot  find  symbol  variants  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  wm[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  wm[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(data[j],    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	94	None	replace
319	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  coefficient  /  wm.getPartial(parameters[j]);  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  coefficient  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  coefficient  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ')'  expected	62	None	replace
320	[BUG]  [BUGGY]  int  cols  =  parameters.getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters.getColumnCount()  +  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters.getColumnCount()  +  1;	  int    cols    =    parameters.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
321	[BUG]  [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  }  [CE]  variable  i  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  }  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        cost        *        wm.getPartial(parameters[j]);        jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    for(int  i  =  0;  i  <  rows;  ++i)  {  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  updateJacobian()	37	None	add
322	[BUG]  [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  for(int  i  =  0;  i  <  cols;  ++i)  {  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  }  [CE]  variable  i  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  for(int  i  =  0;  i  <  cols;  ++i)  {  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  }  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        cost        *        wm.getPartial(parameters[j]);        jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    for(int  i  =  0;  i  <  cols;  ++i)  {  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  updateJacobian()	37	None	add
323	[BUG]  [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        cost        *        wm.getPartial(parameters[j]);        jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]	  	non-compiled	[CE]  ')'  expected	37	None	add
324	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j]);  Arrays.fill(jacobian,  0,  cols);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	88	None	replace
325	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(data[j]);  Arrays.fill(jacobian,  0,  cols);  [CE]  cannot  find  symbol  data  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(data[j]);  Arrays.fill(jacobian,  0,  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(data[j]);  Arrays.fill(jacobian,  0,  cols);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  data	88	None	replace
326	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j],  i);  Arrays.fill(jacobian,  0,  cols);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j],  i);  Arrays.fill(jacobian,  0,  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j],  i);  Arrays.fill(jacobian,  0,  cols);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	88	None	replace
327	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  coefficientEvaluations);  [CE]  cannot  find  symbol  variants  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  coefficientEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(variants[j],  coefficientEvaluations);	  double[]    parameters    =    wm.getPartialValues(variants[j],    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  variants	78	None	replace
328	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  parameters[j].getPartial(variables[j]);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  parameters[j].getPartial(variables[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  parameters[j].getPartial(variables[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(variables[j]);    	non-compiled	[CE]  cannot  find  symbol  	98	None	replace
329	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variables[j],  costEvaluations);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variables[j],  costEvaluations);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(variables[j],  costEvaluations);	  jacobian[index++]    =    factor    /    wm.getPartial(variables[j]);    	non-compiled	[CE]  cannot  find  symbol  	98	None	replace
330	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  arrays.fill(jacobian,  0,  cols,  index);  [CE]  cannot  find  symbol  arrays  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  arrays.fill(jacobian,  0,  cols,  index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    cols,    index);    arrays.fill(jacobian,  0,  cols,  index);	  	non-compiled	[CE]  cannot  find  symbol  arrays	15	None	add
331	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(join[j]);  [CE]  cannot  find  symbol  join  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(join[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(join[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  join	96	None	replace
332	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(data[j],  costEvaluations);  [CE]  cannot  find  symbol  data  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(data[j],  costEvaluations);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(data[j],  costEvaluations);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  data	21	None	replace
333	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  i);  [CE]  cannot  find  symbol  variants  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  i);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  i);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  variants	21	None	replace
334	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(cols[j],  factor);  [CE]  array  required,  but  int  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(cols[j],  factor);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  *  wm.getPartial(cols[j],  factor);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    cost);    	non-compiled	[CE]  array  required,  but  int  found	22	None	replace
335	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  cols[j],  cost);  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  cols[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  cols[j],  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    cost);    	non-compiled	[CE]  array  required,  but  int  found	22	None	replace
336	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(data[j],  cost);  [CE]  cannot  find  symbol  data  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(data[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(data[j],  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    cost);    	non-compiled	[CE]  cannot  find  symbol  data	22	None	replace
337	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ')'  expected	40	None	replace
338	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(i,  j,  cols);  [CE]  cannot  find  symbol  coefficient  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(i,  j,  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  *  wm.getPartial(i,  j,  cols);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    j);    	non-compiled	[CE]  cannot  find  symbol  coefficient	83	None	replace
339	[BUG]  [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  int  cols  =  parameters[j].getColumnCount();  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  int  cols  =  parameters[j].getColumnCount();  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    int  cols  =  parameters[j].getColumnCount();  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  cannot  find  symbol	68	None	add
340	[BUG]  [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  cols);  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	68	None	add
341	[BUG]  [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  cols);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	68	None	add
342	[BUG]  [BUGGY]  jacobian[index++]  =  factors  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  [CE]  cannot  find  symbol  factors  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factors  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factors  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(variants[j]);    	non-compiled	[CE]  cannot  find  symbol  factors	119	None	replace
343	[BUG]  [BUGGY]  jacobian[index++]  =  factors  *  parameters[j].getPartial(wm,  parameters[j]);  [CE]  cannot  find  symbol  factors  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factors  *  parameters[j].getPartial(wm,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factors  *  parameters[j].getPartial(wm,  parameters[j]);	  jacobian[index++]    =    factor    *    parameters[j].getPartial(wm,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  factors	93	None	replace
344	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  parameters[j],  costEvaluations);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  parameters[j],  costEvaluations);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  parameters[j],  costEvaluations);	  jacobian[index++]    =    factor    *    parameters[j].getPartial(wm,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
345	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(variants,  j);  [CE]  cannot  find  symbol  variants  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartials(variants,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(variants,  j);	  double[]    parameters    =    wm.getPartials(j);    	non-compiled	[CE]  cannot  find  symbol  variants	56	None	replace
346	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(variants);  [CE]  cannot  find  symbol  variants  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartials(variants);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(variants);	  double[]    parameters    =    wm.getPartials(j);    	non-compiled	[CE]  cannot  find  symbol  variants	56	None	replace
347	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(coefficients[j]);  [CE]  cannot  find  symbol  coefficients  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(coefficients[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(coefficients[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficients	8	None	replace
348	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(this,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(this,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(this,  parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(colons[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	8	None	replace
349	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  costEvaluations);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  costEvaluations);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  costEvaluations);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
350	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  cols);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  cols);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
351	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  coefficient);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  coefficient);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	29	None	replace
352	[BUG]  [BUGGY]  double[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ']'  expected	100	None	replace
353	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(values[j]);  [CE]  cannot  find  symbol  values  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(values[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(values[j]);	  jacobian[index++]    =    factors    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  values	70	None	replace
354	[BUG]  [BUGGY]  jacobian[index++]  =  factors  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factors  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factors  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ';'  expected	41	None	replace
355	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize(variants,  j);  [CE]  cannot  find  symbol  variants  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize(variants,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize(variants,  j);	  double[]    parameters    =    wm.getPartialSize(j);    	non-compiled	[CE]  cannot  find  symbol  variants	53	None	replace
356	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize(variants);  [CE]  cannot  find  symbol  variants  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize(variants);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize(variants);	  double[]    parameters    =    wm.getPartialSize(j);    	non-compiled	[CE]  cannot  find  symbol  variants	53	None	replace
357	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize(period);  [CE]  cannot  find  symbol  period  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize(period);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize(period);	  double[]    parameters    =    wm.getPartialSize(j);    	non-compiled	[CE]  cannot  find  symbol  period	53	None	replace
358	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j],  costEvaluations);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j],  costEvaluations);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j],  costEvaluations);	  jacobian[index++]    =    factor    *    wm.getPartial(jacobian[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	82	None	replace
359	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(jacobian[i],  j);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(jacobian[i],  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(jacobian[i],  j);	  jacobian[index++]    =    factor    *    wm.getPartial(jacobian[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	82	None	replace
360	[BUG]  [BUGGY]  int  index  =  parameters[j].getIndex(variants[i]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  parameters[j].getIndex(variants[i]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  parameters[j].getIndex(variants[i]);	  int    index    =    parameters[j].getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	65	None	replace
361	[BUG]  [BUGGY]  int  index  =  variables[j].getIndex(variants[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  variables[j].getIndex(variants[j]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  variables[j].getIndex(variants[j]);	  int    index    =    parameters[j].getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	65	None	replace
362	[BUG]  [BUGGY]  int  index  =  parameters[j].getIndex(variants[j]  -  1);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  parameters[j].getIndex(variants[j]  -  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  parameters[j].getIndex(variants[j]  -  1);	  int    index    =    parameters[j].getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	65	None	replace
363	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(variables[j],  coefficient);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(variables[j],  coefficient);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(variables[j],  coefficient);	  jacobian[index++]    =    factor    *    wm.getPartial(variables[j],    coefficient);    	non-compiled	[CE]  cannot  find  symbol  	108	None	replace
364	[BUG]  [BUGGY]  int  cols  =  measurements[j].getCols();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  measurements[j].getCols();  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  measurements[j].getCols();	  int    cols    =    measurements[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
365	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  arrays.fill(jacobian,  0,  index,  cols);  [CE]  cannot  find  symbol  arrays  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  arrays.fill(jacobian,  0,  index,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    index,    cols);    arrays.fill(jacobian,  0,  index,  cols);	  	non-compiled	[CE]  cannot  find  symbol  arrays	17	None	add
366	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variances[j]);  [CE]  cannot  find  symbol  variances  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variances[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variances[j]);	  jacobian[index++]    =    coefficient    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  variances	71	None	replace
367	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  j,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  j,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  j,  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	28	None	replace
368	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  parameters[j],  cols);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  parameters[j],  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  parameters[j],  cols);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	28	None	replace
369	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols  +  1,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  cols  +  1,  costEvaluations);	  Arrays.fill(jacobian,    0,    cols    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
370	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols  +  1,  costEvaluations);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols  +  1,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols  +  1,  costEvaluations);	  Arrays.fill(jacobian,    0,    cols    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
371	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols  *  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols  *  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols  *  1);	  Arrays.fill(jacobian,    0,    cols    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	75	None	replace
372	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants,  j);  [CE]  cannot  find  symbol  variants  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(variants,  j);	  double[]    parameters    =    wm.getPartialValues(j);    	non-compiled	[CE]  cannot  find  symbol  variants	33	None	replace
373	[BUG]  [BUGGY]  int  index  =  parameters[j].getIndex(variants[j],  cols);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  parameters[j].getIndex(variants[j],  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  parameters[j].getIndex(variants[j],  cols);	  int    index    =    wm.getIndex(variants[j],    cols);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	66	None	replace
374	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(variants[j]);  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(variants[j]);  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  *  wm.getPartial(variants[j]);  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(variants[j]);    jacobian[index++]    =    factor    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ')'  expected	120	None	replace
375	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  parameters[index]);  [CE]  no  suitable  method  found  for  fill(double[],int,EstimatedParameter)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  parameters[index]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  parameters[index]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,EstimatedParameter)	73	None	replace
376	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  parameters[index].intValue);  [CE]  cannot  find  symbol  intValue  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  parameters[index].intValue);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  parameters[index].intValue);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  cannot  find  symbol  intValue	73	None	replace
377	[BUG]  [BUGGY]  Integer  index  =  wm.getIndex();  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Integer  index  =  wm.getIndex();  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Integer  index  =  wm.getIndex();	  int    index    =    wm.getIndex()    -    2;    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	26	None	replace
378	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  i,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  i,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(j,  i,  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(j,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	31	None	replace
379	[BUG]  [BUGGY]  double[]  parameters  =  residuals.getPartials(i,  j);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  residuals.getPartials(i,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  residuals.getPartials(i,  j);	  double[]    parameters    =    wm.getPartials(i,    j);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
380	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize()  +  coefficient;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize()  +  coefficient;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize()  +  coefficient;	  double[]    parameters    =    wm.getPartialSize()    +    j;    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
381	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  cost);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(variants[j],    cost);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	109	None	replace
382	[BUG]  [BUGGY]  Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [CE]  cannot  find  symbol  Jacobian  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  Jacobian	72	None	replace
383	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j],  parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j],  parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j],  parameters[j]);  Arrays.fill(jacobian,  0,  cols);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	72	None	replace
384	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  Jacobian  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Jacobian[index++]  =  coefficient  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  Jacobian	61	None	replace
385	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	1	replace
386	[BUG]  [BUGGY]  jacobian[index]  =  factor  /  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	1	replace
387	[BUG]  [BUGGY]  int  cols  =  parameters[j].getCols()  *  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters[j].getCols()  *  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters[j].getCols()  *  1;	  int    cols    =    parameters[j].getCols()    -    1;    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
388	[BUG]  [BUGGY]  Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    double[index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ']'  expected	117	None	replace
389	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  cols[j]);  [CE]  array  required,  but  int  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  cols[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(cols,    parameters[j]);    	non-compiled	[CE]  array  required,  but  int  found	30	None	replace
390	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  columns[j]);  [CE]  cannot  find  symbol  columns  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  columns[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  columns[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(cols,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  columns	30	None	replace
391	[BUG]  [BUGGY]  jacobian[i++]  =  coefficient  *  wm.getPartial(index,  parameters[j]);  [CE]  cannot  find  symbol  coefficient  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  coefficient  *  wm.getPartial(index,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]  =  coefficient  *  wm.getPartial(index,  parameters[j]);	  jacobian[i++]    =    factor    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	112	None	replace
392	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  j,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  j,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(i,  j,  parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	80	None	replace
393	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j],  costEvaluations);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j],  costEvaluations);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j],  costEvaluations);	  jacobian[index++]    =    factor    /    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	80	None	replace
394	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  j,  cols[j]);  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  j,  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  j,  cols[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	89	None	replace
395	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(jacobian[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(jacobian[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(jacobian[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(variants[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	7	None	replace
396	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(tokens[j]);  [CE]  cannot  find  symbol  tokens  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(tokens[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(tokens[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(variants[j]);    	non-compiled	[CE]  cannot  find  symbol  tokens	7	None	replace
397	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  j);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(i,  j);	  jacobian[index++]    =    factor    /    wm.getPartial(variants[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	7	None	replace
398	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(parameters[j],  cost);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(parameters[j],  cost);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(parameters[j],  cost);	  double[]    parameters    =    wm.getPartialValues(variants[j],    cost);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
399	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  costEvaluations  +  1);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j],  costEvaluations  +  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  costEvaluations  +  1);	  int    index    =    wm.getIndex(variants[j]    +    1);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	64	None	replace
400	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  costEvaluations,  maxCostEval);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j],  costEvaluations,  maxCostEval);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  costEvaluations,  maxCostEval);	  int    index    =    wm.getIndex(variants[j],    costEvaluations);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	76	None	replace
401	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  arrays.fill(jacobian,  0,  cols,  costEvaluations);  [CE]  cannot  find  symbol  arrays  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  arrays.fill(jacobian,  0,  cols,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    arrays.fill(jacobian,  0,  cols,  costEvaluations);	  	non-compiled	[CE]  cannot  find  symbol  arrays	13	None	add
402	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variances[j]);  [CE]  cannot  find  symbol  variances  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variances[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(variances[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(data[j]);    	non-compiled	[CE]  cannot  find  symbol  variances	81	None	replace
403	[BUG]  [BUGGY]  double[]  parameters  =  residuals.getPartialValues(i,  j);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  residuals.getPartialValues(i,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  residuals.getPartialValues(i,  j);	  double[]    parameters    =    wm.getPartialValues(i,    j);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
404	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j],  cols);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j],  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j],  cols);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    index);    jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	101	None	replace
405	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(data[j],  parameters[j]);  [CE]  cannot  find  symbol  data  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(data[j],  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(data[j],  parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(branch,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  data	99	None	replace
406	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  dataArea,  cols);  [CE]  cannot  find  symbol  dataArea  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  dataArea,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(index,  dataArea,  cols);	  double[]    parameters    =    wm.getPartialValues(index,    cols);    	non-compiled	[CE]  cannot  find  symbol  dataArea	12	None	replace
407	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  maxCostEval);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  maxCostEval);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(index,  maxCostEval);	  double[]    parameters    =    wm.getPartialValues(index,    cols);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
408	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variants[j]);  int  index  =  wm.getIndex(parameters[j]);  [CE]  cannot  find  symbol  variants  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variants[j]);  int  index  =  wm.getIndex(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(variants[j]);  int  index  =  wm.getIndex(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	102	None	replace
409	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variables[j]);  int  index  =  wm.getIndex(parameters[j]);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variables[j]);  int  index  =  wm.getIndex(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(variables[j]);  int  index  =  wm.getIndex(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  	102	None	replace
410	[BUG]  [BUGGY]  int  cols  =  parameters[i].getCols().length  -  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters[i].getCols().length  -  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters[i].getCols().length  -  1;	  int    cols    =    parameters[i].getCols()    -    1;    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
411	[BUG]  [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  double[]  =  factor  *  wm.getPartial(parameters[j]);  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  double[]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    factor    *    wm.getPartial(parameters[j]);    double[]  =  factor  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  not  a  statement	111	None	add
412	[BUG]  [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    factor    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  cols);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	111	None	add
413	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  data.length);  [CE]  cannot  find  symbol  data  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  data.length);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  data.length);	  Arrays.fill(jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  data	105	None	replace
414	[BUG]  [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        factor        /        wm.getPartial(parameters[j]);        jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]	  	non-compiled	[CE]  ')'  expected	59	None	add
415	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize(i,  j);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize(i,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize(i,  j);	  double[]    parameters    =    wm.getPartialSize(i);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
416	[BUG]  [BUGGY]  int  cols  =  parameters[j].getCols()  /  2;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters[j].getCols()  /  2;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters[j].getCols()  /  2;	  int    cols    =    parameters[j].getCols()    -    2;    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
417	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jcobian,  0,  rows,  cols);  [CE]  cannot  find  symbol  jcobian  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jcobian,  0,  rows,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jcobian,  0,  rows,  cols);	  	non-compiled	[CE]  cannot  find  symbol  jcobian	19	None	add
418	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  arrays.fill(jacobian,  0,  rows,  cols);  [CE]  cannot  find  symbol  arrays  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  arrays.fill(jacobian,  0,  rows,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    arrays.fill(jacobian,  0,  rows,  cols);	  	non-compiled	[CE]  cannot  find  symbol  arrays	19	None	add
419	[BUG]  [BUGGY]  jacobian[index++]  =  factors  /  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  factors  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factors  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factors  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  factors	5	None	replace
420	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  3);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  cols,  3);	  Arrays.fill(jacobian,    0,    cols,    costEvaluations);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
421	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  3);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols,  3);	  Arrays.fill(jacobian,    0,    cols,    costEvaluations);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
422	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  coefficient,  cost);  [CE]  cannot  find  symbol  variants  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  coefficient,  cost);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(variants[j],  coefficient,  cost);	  double[]    parameters    =    wm.getPartialValues(variants[j],    coefficient);    	non-compiled	[CE]  cannot  find  symbol  variants	46	None	replace
423	[BUG]  [BUGGY]  Double[]  parameters  =  wm.getPartialValues(i);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Double[]  parameters  =  wm.getPartialValues(i);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm.getPartialValues(i);	  Double[]    parameters    =    wm.getPartialValues();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
424	[BUG]  [BUGGY]  Double[]  parameters  =  wm,  cost.getPartialValues();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Double[]  parameters  =  wm,  cost.getPartialValues();  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm,  cost.getPartialValues();	  Double[]    parameters    =    wm.getPartialValues();    	non-compiled	[CE]  ';'  expected	32	None	replace
425	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[0]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]        =        factor        /        wm.getPartial(parameters[j]);        jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[0]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	add
426	[BUG]  [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[0]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[0]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        factor        /        wm.getPartial(parameters[j]);        jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[0]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	add
427	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  cost);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  cost);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
428	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  j);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j],  j);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
429	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(i,  j  +  1);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartials(i,  j  +  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(i,  j  +  1);	  double[]    parameters    =    wm.getPartials(i,    j);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
430	[BUG]  [BUGGY]  double[]  parameters  =  parameters[j].getPartialValues(wm.getParmeters[j]);  [CE]  cannot  find  symbol  getParmeters  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  parameters[j].getPartialValues(wm.getParmeters[j]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  parameters[j].getPartialValues(wm.getParmeters[j]);	  double[]    parameters    =    wm.getPartialValues(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  getParmeters	44	None	replace
431	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  j]);  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(j,  j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    j]);    	non-compiled	[CE]  ')'  expected	110	None	replace
432	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(i,  j);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(i,  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  *  wm.getPartial(i,  j);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    j);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	83	None	replace
433	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(j,  i);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(j,  i);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(j,  i);	  double[]    parameters    =    wm.getPartialValues(i,    j);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
434	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  cost,  parameters[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j],  cost,  parameters[j]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  cost,  parameters[j]);	  int    index    =    wm.getIndex(variants[j],    cost);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	115	None	replace
435	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  factor);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j],  factor);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  factor);	  int    index    =    wm.getIndex(variants[j],    cost);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	115	None	replace
436	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(costEvaluations[j]);  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(costEvaluations[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(costEvaluations[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(coefficients[j]);    	non-compiled	[CE]  array  required,  but  int  found	95	None	replace
437	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j],  j);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j],  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j],  j);	  jacobian[index++]    =    factor    /    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	80	None	replace
438	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  measurements[j],  j);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  measurements[j],  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(i,  measurements[j],  j);	  jacobian[index++]    =    factor    /    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	80	None	replace
439	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j],  cost);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j],  cost);	  jacobian[index++]    =    factor    /    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	80	None	replace
440	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  parameters[j],  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  parameters[j],  coefficient);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  parameters[j],  coefficient);	  jacobian[index++]    =    factor    *    parameters[j].getPartial(wm,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	93	None	replace
441	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(factor,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(factor,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(factor,  parameters[j]);	  jacobian[index++]    =    factor    *    parameters[j].getPartial(wm,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	93	None	replace
442	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  columns[j]);  [CE]  cannot  find  symbol  columns  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  columns[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  columns[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(cols,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  columns	30	None	replace
443	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  cols,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  cols,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  cols,  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(cols,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	30	None	replace
444	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(index,  j,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(index,  j,  parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(index,  j,  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(j,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	31	None	replace
445	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  parameters[j],  cost);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  parameters[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(j,  parameters[j],  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(j,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	31	None	replace
446	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j]  +  coefficient);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j]  +  coefficient);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j]  +  coefficient);	  int    index    =    wm.getIndex(variants[j]    +    1);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	64	None	replace
447	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j]  +  factor);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j]  +  factor);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j]  +  factor);	  int    index    =    wm.getIndex(variants[j]    +    1);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	64	None	replace
448	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j]  +  1],  cost);  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j]  +  1],  cost);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j]  +  1],  cost);	  int    index    =    wm.getIndex(variants[j]    +    1);    	non-compiled	[CE]  ')'  expected	64	None	replace
449	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  factor  /  wm.getPartial(parameters[j].doubleValue());  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  factor  /  wm.getPartial(parameters[j].doubleValue());  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  factor  /  wm.getPartial(parameters[j].doubleValue());	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  not  a  statement	86	None	replace
450	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  coefficient,  cost);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  coefficient,  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  coefficient,  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(variables[j],    coefficient);    	non-compiled	[CE]  cannot  find  symbol  	108	None	replace
451	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[j++]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[j++]  =  factor  *  wm.getPartial(parameters[j]);	  jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	1	replace
452	[BUG]  [BUGGY]  jacobian[j++]  =  factor  *  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[j++]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[j++]  =  factor  *  wm.getPartial(parameters[j]);	  jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	1	replace
453	[BUG]  [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(variants[j]);  [CE]  cannot  find  symbol  variants  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(variants[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]  =  factor  *  wm.getPartial(variants[j]);	  jacobian[i++]    =    factor    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	112	None	replace
454	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  costEvaluations);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(index,  costEvaluations);	  double[]    parameters    =    wm.getPartialValues(index,    cols);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
455	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index    =    wm.getIndex(variants[j]);    jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	118	None	replace
456	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j]  -  1],  cost);  [CE]  ')'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j]  -  1],  cost);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j]  -  1],  cost);	  int    index    =    wm.getIndex(variants[j]    -    1);    	non-compiled	[CE]  ')'  expected	67	None	replace
457	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  cost  -  1);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j],  cost  -  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  cost  -  1);	  int    index    =    wm.getIndex(variants[j]    -    1);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	67	None	replace
458	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j]  -  1,  cols);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j]  -  1,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j]  -  1,  cols);	  int    index    =    wm.getIndex(variants[j]    -    1);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	67	None	replace
459	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  row,  index);  [CE]  cannot  find  symbol  row  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  row,  index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  row,  index);	  Arrays.fill(jacobian,    0,    cols,    index);    	non-compiled	[CE]  cannot  find  symbol  row	16	None	replace
460	[BUG]  [BUGGY]  Arrays.fill(jacobian,  index++]  =  coefficient  *  wm.getPartial(parameters[j]);  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  index++]  =  coefficient  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  index++]  =  coefficient  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ')'  expected	40	None	replace
461	[BUG]  [BUGGY]  Arrays.fill(jacobian,  index++]  =  factor  *  wm.getPartial(parameters[j]);  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  index++]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  index++]  =  factor  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ')'  expected	40	None	replace
462	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  costEvaluations,  coefficient);  [CE]  cannot  find  symbol  variants  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  costEvaluations,  coefficient);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(variants[j],  costEvaluations,  coefficient);	  double[]    parameters    =    wm.getPartialValues(variants[j],    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  variants	78	None	replace
463	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(index,  i);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartials(index,  i);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(index,  i);	  double[]    parameters    =    wm.getPartials(i);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
464	[BUG]  [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  ++i)  {  if(variants[i]  >  factor)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  ++i)  {  if(variants[i]  >  factor)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  ++i)  {  if(variants[i]  >  factor)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
465	[BUG]  [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  ++i)  {  if(remainings[i]  >  factor)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  ++i)  {  if(remainings[i]  >  factor)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    for(int  i  =  0,  cols  =  measurements.length;  i  <  cols;  ++i)  {  if(remainings[i]  >  factor)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
466	[BUG]  [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  for(int  i  =  0,  cols  =  measurements.length;  ++i)  {  if(variants[i]  >  factor)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  for(int  i  =  0,  cols  =  measurements.length;  ++i)  {  if(variants[i]  >  factor)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    cost    *    wm.getPartial(parameters[j]);    for(int  i  =  0,  cols  =  measurements.length;  ++i)  {  if(variants[i]  >  factor)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  	68	None	add
467	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize()  +  factor;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize()  +  factor;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize()  +  factor;	  double[]    parameters    =    wm.getPartialSize()    +    j;    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
468	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize(variables,  j);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize(variables,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize(variables,  j);	  double[]    parameters    =    wm.getPartialSize(j);    	non-compiled	[CE]  cannot  find  symbol  	53	None	replace
469	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  Arrays.fill(jacobian,  1,  cols,  index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,    0,    cols,    index);    Arrays.fill(jacobian,  1,  cols,  index);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
470	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  Arrays.fill(jacobian,  1,  cols,  index);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  Arrays.fill(jacobian,  1,  cols,  index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    cols,    index);    Arrays.fill(jacobian,  1,  cols,  index);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
471	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[i++]  =  cost  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	replace
472	[BUG]  [BUGGY]  jacobian[i++]  =  cost  /  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]  =  cost  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	replace
473	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  i);  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  i);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  i);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    costEvaluations);    	non-compiled	[CE]  array  required,  but  int  found	21	None	replace
474	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  costEvaluations);  [CE]  cannot  find  symbol  variants  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  costEvaluations);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  costEvaluations);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j],    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  variants	21	None	replace
475	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  1,  cols,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(jacobian,  1,  cols,  costEvaluations);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
476	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  1,  cols,  costEvaluations);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  1,  cols,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(jacobian,  1,  cols,  costEvaluations);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
477	[BUG]  [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  i);  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  i);  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    factor    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  i);  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	111	None	add
478	[BUG]  [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  j);  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  j);  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    factor    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  j);  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	111	None	add
479	[BUG]  [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  i);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  i);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]    =    factor    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  i);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	111	None	add
480	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(variables,  j,  cols);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(variables,  j,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(variables,  j,  cols);	  double[]    parameters    =    wm.getPartialValues(j,    cols);    	non-compiled	[CE]  cannot  find  symbol  	11	None	replace
481	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants,  j,  cols);  [CE]  cannot  find  symbol  variants  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants,  j,  cols);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(variants,  j,  cols);	  double[]    parameters    =    wm.getPartialValues(j,    cols);    	non-compiled	[CE]  cannot  find  symbol  variants	11	None	replace
482	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  costEvaluations,  parameters[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variants[j],  costEvaluations,  parameters[j]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  costEvaluations,  parameters[j]);	  int    index    =    wm.getIndex(variants[j],    costEvaluations);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	76	None	replace
483	[BUG]  [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  coefficient  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        cost        *        wm.getPartial(parameters[j]);        jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  cannot  find  symbol  coefficient	37	None	add
484	[BUG]  [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  result  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  result  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  result  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]        =        cost        *        wm.getPartial(parameters[j]);        jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  result  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  cannot  find  symbol  result	37	None	add
485	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize(index,  i);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialSize(index,  i);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize(index,  i);	  double[]    parameters    =    wm.getPartialSize(i);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
486	[BUG]  [BUGGY]  Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int    index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  ';'  expected	41	None	replace
487	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(variables,  j);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartialValues(variables,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(variables,  j);	  double[]    parameters    =    wm.getPartialValues(j);    	non-compiled	[CE]  cannot  find  symbol  	33	None	replace
488	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(variables[j],  wm);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(variables[j],  wm);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(variables[j],  wm);	  jacobian[index++]    =    factor    *    parameters[j].getPartial(variables[j]);    	non-compiled	[CE]  cannot  find  symbol  	48	None	replace
489	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  rows[j]);  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  rows[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  rows[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	89	None	replace
490	[BUG]  [BUGGY]  int  cols  =  measurements[index].getCols();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  measurements[index].getCols();  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  measurements[index].getCols();	  int    cols    =    measurements[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
491	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(data[j],  data[j]);  [CE]  cannot  find  symbol  data  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(data[j],  data[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(data[j],  data[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(data[j],    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  data	94	None	replace
492	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  measurements[j],  j);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  measurements[j],  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  measurements[j],  j);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	28	None	replace
493	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  parameters[j],  j);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  parameters[j],  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  parameters[j],  j);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	28	None	replace
494	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  parameters[j],  cost);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  parameters[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  parameters[j],  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(i,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	28	None	replace
495	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows  +  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows  +  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  rows  +  1);	  Arrays.fill(jacobian,    0,    cols    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	75	None	replace
496	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length  -  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length  -  1);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  parameters.length  -  1);	  Arrays.fill(jacobian,    0,    parameters.length);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	74	None	replace
497	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length  -  index);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length  -  index);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  parameters.length  -  index);	  Arrays.fill(jacobian,    0,    parameters.length);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	74	None	replace
498	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters[j].getPartial(j]));  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters[j].getPartial(j]));  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  parameters[j].getPartial(j]));	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  ')'  expected	72	None	replace
499	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters[j].getPartial(j]),  cost);  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters[j].getPartial(j]),  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  parameters[j].getPartial(j]),  cost);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  ')'  expected	72	None	replace
500	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(brace,  cols[j]);  [CE]  cannot  find  symbol  brace  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(brace,  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(brace,  cols[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(cols[j]);    	non-compiled	[CE]  cannot  find  symbol  brace	6	None	replace
501	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols[j],  j);  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols[j],  j);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(cols[j],  j);	  jacobian[index++]    =    factor    /    wm.getPartial(cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	6	None	replace
502	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variables[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  index  =  wm.getIndex(variables[j]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variables[j]);	  int    index    =    wm.getIndex(j);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	27	None	replace
503	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j],  factor);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j],  factor);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  *  wm.getPartial(parameters[j],  factor);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	38	None	replace
504	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(variables,  j);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartials(variables,  j);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(variables,  j);	  double[]    parameters    =    wm.getPartials(j);    	non-compiled	[CE]  cannot  find  symbol  	56	None	replace
505	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(period);  [CE]  cannot  find  symbol  period  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  double[]  parameters  =  wm.getPartials(period);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(period);	  double[]    parameters    =    wm.getPartials(j);    	non-compiled	[CE]  cannot  find  symbol  period	56	None	replace
506	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	1	replace
507	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	1	replace
508	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(coales[j]);  [CE]  cannot  find  symbol  coales  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(coales[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(coales[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  coales	96	None	replace
509	[BUG]  [BUGGY]  Double[]  parameters  =  wm.getPartials(i);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Double[]  parameters  =  wm.getPartials(i);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm.getPartials(i);	  Double[]    parameters    =    wm.getPartials();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
510	[BUG]  [BUGGY]  Double[]  parameters  =  wm,  cost.getPartials();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Double[]  parameters  =  wm,  cost.getPartials();  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm,  cost.getPartials();	  Double[]    parameters    =    wm.getPartials();    	non-compiled	[CE]  ';'  expected	57	None	replace
511	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	4	None	add
512	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    int  index  =  wm.getIndex(variants[j]);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	4	None	add
513	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  index);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  index);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  index);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	4	None	add
514	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index  +  1,  wm.getWeight());  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  index  +  1,  wm.getWeight());	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
515	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index  +  1,  wm.getWeight());  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index  +  1,  wm.getWeight());  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  index  +  1,  wm.getWeight());	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,    0,    index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
516	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  row,  costEvaluations);  [CE]  cannot  find  symbol  row  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Arrays.fill(jacobian,  0,  row,  costEvaluations);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  row,  costEvaluations);	  Arrays.fill(jacobian,    0,    cols,    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  row	14	None	replace
517	[BUG]  [BUGGY]  Double[]  parameters  =  wm.getPartialSize(i);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  Double[]  parameters  =  wm.getPartialSize(i);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm.getPartialSize(i);	  Double[]    parameters    =    wm.getPartialSize();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
518	[BUG]  [BUGGY]  int  cols  =  parameters[j].getCols()  *  factor  -  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  int  cols  =  parameters[j].getCols()  *  factor  -  1;  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters[j].getCols()  *  factor  -  1;	  int    cols    =    parameters[j].getCols()    -    1;    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
519	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(index,  cols[j]);  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(index,  cols[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(index,  cols[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	92	None	replace
520	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j],  i);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j],  i);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j],  i);	  jacobian[index++]    =    factor    *    wm.getPartial(jacobian[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	82	None	replace
521	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(jacobian[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(jacobian[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  *  wm.getPartial(jacobian[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(jacobian[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	82	None	replace
522	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(brace,  j,  cost);  [CE]  cannot  find  symbol  brace  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(brace,  j,  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(brace,  j,  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(variants[j],    cost);    	non-compiled	[CE]  cannot  find  symbol  brace	109	None	replace
523	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(factory[j]);  [CE]  cannot  find  symbol  factory  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(factory[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(factory[j]);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm[j]);    	non-compiled	[CE]  cannot  find  symbol  factory	47	None	replace
524	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  i);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  i);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm,  i);	  jacobian[index++]    =    factor    *    parameters.getPartial(wm[j]);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
525	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variants[j],  cost);  [CE]  cannot  find  symbol  variants  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variants[j],  cost);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(variants[j],  cost);	  jacobian[index++]    =    factor    /    wm.getPartial(variants[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	7	None	replace
526	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(colons[j]);  [CE]  cannot  find  symbol  colons  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(colons[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  /  wm.getPartial(colons[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  colons	8	None	replace
527	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cocobian[j]);  [CE]  cannot  find  symbol  cocobian  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cocobian[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(cocobian[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  cocobian	8	None	replace
528	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(coas[j]);  [CE]  cannot  find  symbol  coas  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(coas[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(coas[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  coas	8	None	replace
529	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variants[j]);  Jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  variants  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {      [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variants[j]);  Jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]      }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(variants[j]);  Jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	61	None	replace
