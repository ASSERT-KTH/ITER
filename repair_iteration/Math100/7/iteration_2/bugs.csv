bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  +  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  cols  =  wm.getColumnsCount()  +  1;  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnsCount()  +  1;	      int    cols    =    wm.getColumnsCount();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
2	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  cols  =  wm.getColumnsCount()  -  1;  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnsCount()  -  1;	      int    cols    =    wm.getColumnsCount();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
3	[BUG]  [BUGGY]  int  cols  =  parameters.getColumnsCount();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  cols  =  parameters.getColumnsCount();  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters.getColumnsCount();	      int    cols    =    wm.getColumnsCount();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
5	[BUG]  [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  /  wm.getPartial(parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
6	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols[j]);  [CE]  array  required,  but  int  found  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(cols[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(cols[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  array  required,  but  int  found	8	None	replace
7	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variants[j]);  [CE]  cannot  find  symbol  variants  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variants[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(variants[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	8	None	replace
8	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(colons[j]);  [CE]  cannot  find  symbol  colons  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(colons[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(colons[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  colons	8	None	replace
9	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(i,  index);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartialValues(i,  index);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(i,  index);	      double[]    parameters    =    wm.getPartialValues(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
10	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(i,  j);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartialValues(i,  j);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(i,  j);	      double[]    parameters    =    wm.getPartialValues(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
11	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(j,  cols);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartialValues(j,  cols);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(j,  cols);	      double[]    parameters    =    wm.getPartialValues(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
12	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  cols);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartialValues(index,  cols);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(index,  cols);	      double[]    parameters    =    wm.getPartialValues(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  cols,  costEvaluations);	      Arrays.fill(jacobian,    0,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
14	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols,  costEvaluations);	      Arrays.fill(jacobian,    0,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  cols,  index);	      Arrays.fill(jacobian,    0,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
16	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols,  index);	      Arrays.fill(jacobian,    0,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  index,  cols);	      Arrays.fill(jacobian,    0,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
18	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  index,  cols);	      Arrays.fill(jacobian,    0,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
19	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	Arrays.fill(jacobian,  0,  rows,  cols);	      Arrays.fill(jacobian,    0,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
20	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  rows,  cols);	      Arrays.fill(jacobian,    0,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
21	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  costEvaluations);  [CE]  array  required,  but  int  found  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  costEvaluations);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  costEvaluations);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	6	None	replace
22	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  cost);  [CE]  array  required,  but  int  found  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  cost);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	6	None	replace
23	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  coefficient);  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  coefficient);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols[j],  coefficient);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	6	None	replace
24	[BUG]  [BUGGY]  int  index  =  wm.getIndex()  +  1;  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  index  =  wm.getIndex()  +  1;  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex()  +  1;	      int    index    =    wm.getIndex();    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	15	None	replace
25	[BUG]  [BUGGY]  int  index  =  wm.getIndex()  -  1;  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  index  =  wm.getIndex()  -  1;  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex()  -  1;	      int    index    =    wm.getIndex();    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	15	None	replace
26	[BUG]  [BUGGY]  int  index  =  wm.getIndex()  -  2;  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  index  =  wm.getIndex()  -  2;  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex()  -  2;	      int    index    =    wm.getIndex();    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	15	None	replace
27	[BUG]  [BUGGY]  int  index  =  wm.getIndex(j);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  index  =  wm.getIndex(j);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(j);	      int    index    =    wm.getIndex();    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	15	None	replace
28	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	18	None	replace
29	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j]);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm,  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
30	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols,  parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols,  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	18	None	replace
31	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(j,  parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(j,  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	18	None	replace
32	[BUG]  [BUGGY]  Double[]  parameters  =  wm.getPartialValues();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Double[]  parameters  =  wm.getPartialValues();  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm.getPartialValues();	      double[]    parameters    =    wm.getPartialValues();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
33	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(j);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartialValues(j);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(j);	      double[]    parameters    =    wm.getPartialValues();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
34	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  cols  =  wm.getColumnCount()  +  1;  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnCount()  +  1;	      int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
35	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  cols  =  wm.getColumnCount()  -  1;  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnCount()  -  1;	      int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
36	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  2;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  cols  =  wm.getColumnCount()  *  2;  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getColumnCount()  *  2;	      int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
37	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
38	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
39	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  Jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  Jacobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  Jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  cannot  find  symbol  Jacobian	10	None	add
40	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  index++]  =  cost  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  ')'  expected	10	None	add
41	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  int  index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int  index++]  =  cost  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  ';'  expected	10	None	add
42	[BUG]  [BUGGY]  int  cols  =  measurements[i].getCols();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  cols  =  measurements[i].getCols();  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  measurements[i].getCols();	      int    cols    =    parameters[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
43	[BUG]  [BUGGY]  int  cols  =  wm.getCols();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  cols  =  wm.getCols();  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  wm.getCols();	      int    cols    =    parameters[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
44	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(parameters[j]);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartialValues(parameters[j]);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(parameters[j]);	      double[]    parameters    =    wm.getPartialValues(variants[j]);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
45	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  cost);  [CE]  cannot  find  symbol  variants  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  cost);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(variants[j],  cost);	      double[]    parameters    =    wm.getPartialValues(variants[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	12	None	replace
46	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  coefficient);  [CE]  cannot  find  symbol  variants  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  coefficient);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(variants[j],  coefficient);	      double[]    parameters    =    wm.getPartialValues(variants[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	12	None	replace
47	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j]);  [CE]  array  required,  but  WeightedMeasurement  found  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  parameters.getPartial(wm[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters.getPartial(wm[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(variables[j]);    	non-compiled	[CE]  array  required,  but  WeightedMeasurement  found	17	None	replace
48	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(variables[j]);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(variables[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(variables[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(variables[j]);    	non-compiled	[CE]  cannot  find  symbol  	17	None	replace
49	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  cost);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  cost);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(variables[j]);    	non-compiled	[CE]  cannot  find  symbol  	17	None	replace
50	[BUG]  [BUGGY]  int  cols  =  parameters[j].getCols()  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  cols  =  parameters[j].getCols()  -  1;  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters[j].getCols()  -  1;	      int    cols    =    parameters[j].getCols();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
51	[BUG]  [BUGGY]  int  cols  =  parameters[j].getCols()  -  2;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  cols  =  parameters[j].getCols()  -  2;  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters[j].getCols()  -  2;	      int    cols    =    parameters[j].getCols();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
52	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cos[j]);  [CE]  cannot  find  symbol  cos  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cos[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cos[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  cos	9	None	replace
53	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize(j);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartialSize(j);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize(j);	      double[]    parameters    =    wm.getPartialSize();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
54	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize()  +  j;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartialSize()  +  j;  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize()  +  j;	      double[]    parameters    =    wm.getPartialSize();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
55	[BUG]  [BUGGY]  Double[]  parameters  =  wm.getPartialSize();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Double[]  parameters  =  wm.getPartialSize();  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm.getPartialSize();	      double[]    parameters    =    wm.getPartialSize();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
56	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(j);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartials(j);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(j);	      double[]    parameters    =    wm.getPartials();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
57	[BUG]  [BUGGY]  Double[]  parameters  =  wm.getPartials();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Double[]  parameters  =  wm.getPartials();  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Double[]  parameters  =  wm.getPartials();	      double[]    parameters    =    wm.getPartials();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
58	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(factors[j]);  [CE]  cannot  find  symbol  factors  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(factors[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(factors[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(variants[j]);    	non-compiled	[CE]  cannot  find  symbol  factors	16	None	replace
59	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
60	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
61	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  Jacobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  cannot  find  symbol  Jacobian	7	None	add
62	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  index++]  =  factor  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  ')'  expected	7	None	add
63	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  int  index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  int  index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    int  index++]  =  factor  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  ';'  expected	7	None	add
64	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j]  +  1);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  index  =  wm.getIndex(variants[j]  +  1);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j]  +  1);	      int    index    =    wm.getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	13	None	replace
65	[BUG]  [BUGGY]  int  index  =  parameters[j].getIndex(variants[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  index  =  parameters[j].getIndex(variants[j]);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  parameters[j].getIndex(variants[j]);	      int    index    =    wm.getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	13	None	replace
66	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  cols);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  index  =  wm.getIndex(variants[j],  cols);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  cols);	      int    index    =    wm.getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	13	None	replace
67	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j]  -  1);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  index  =  wm.getIndex(variants[j]  -  1);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j]  -  1);	      int    index    =    wm.getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	13	None	replace
68	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
69	[BUG]  [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]  =  cost  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
70	[BUG]  [BUGGY]  jacobian[index++]  =  factors  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  factors  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factors  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factors  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  factors	11	None	replace
71	[BUG]  [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  [CE]  cannot  find  symbol  coefficient  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  coefficient  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	11	None	replace
72	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  cols);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	10	None	add
73	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  index);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  index);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  index);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	10	None	add
74	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  parameters.length);	      Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	3	None	replace
75	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols  +  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Arrays.fill(jacobian,  0,  cols  +  1);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  cols  +  1);	      Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	3	None	replace
76	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  costEvaluations);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  index  =  wm.getIndex(variants[j],  costEvaluations);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  costEvaluations);	      int    index    =    wm.getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	13	None	replace
77	[BUG]  [BUGGY]  int  cols  =  parameters.getColumnCount();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  cols  =  parameters.getColumnCount();  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters.getColumnCount();	      int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
78	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  costEvaluations);  [CE]  cannot  find  symbol  variants  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartialValues(variants[j],  costEvaluations);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(variants[j],  costEvaluations);	      double[]    parameters    =    wm.getPartialValues(variants[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	12	None	replace
79	[BUG]  [BUGGY]  int  cols  =  parameters[i].getCols()  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  cols  =  parameters[i].getCols()  -  1;  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters[i].getCols()  -  1;	      int    cols    =    parameters[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
80	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(i,  parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	8	None	replace
81	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(data[j]);  [CE]  cannot  find  symbol  data  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(data[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(data[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  data	8	None	replace
82	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j]);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(jacobian[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(variants[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	16	None	replace
83	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  j);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  j);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  j);	  jacobian[index++]    =    factor    *    wm.getPartial(variants[j]);    	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	16	None	replace
84	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(tokens[j]);  [CE]  cannot  find  symbol  tokens  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(tokens[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(tokens[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(variants[j]);    	non-compiled	[CE]  cannot  find  symbol  tokens	16	None	replace
85	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  int  index  =  parameters[j].getIndex();  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  int  index  =  parameters[j].getIndex();  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    int  index  =  parameters[j].getIndex();  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	7	None	add
86	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[]  =  factor  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  not  a  statement	7	None	add
87	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  cols);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	7	None	add
88	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  cols);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  cols);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	7	None	add
89	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  cols[j]);  [CE]  array  required,  but  int  found  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(i,  cols[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(i,  cols[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j]);    	non-compiled	[CE]  array  required,  but  int  found	6	None	replace
90	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(data[j]);  [CE]  cannot  find  symbol  data  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(data[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(data[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(cols[j]);    	non-compiled	[CE]  cannot  find  symbol  data	6	None	replace
91	[BUG]  [BUGGY]  int  cols  =  parameters[j].getCols()  +  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  cols  =  parameters[j].getCols()  +  1;  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  cols  =  parameters[j].getCols()  +  1;	      int    cols    =    parameters[j].getCols();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
92	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(brace,  cols[j]);  [CE]  cannot  find  symbol  brace  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(brace,  cols[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(brace,  cols[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  brace	9	None	replace
93	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  parameters[j]);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  parameters[j].getPartial(wm,  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
94	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(data[j],  parameters[j]);  [CE]  cannot  find  symbol  data  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(data[j],  parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(data[j],  parameters[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(brace,    parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  data	18	None	replace
95	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(coefficients[j]);  [CE]  cannot  find  symbol  coefficients  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(coefficients[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(coefficients[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  coefficients	9	None	replace
96	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(colons[j]);  [CE]  cannot  find  symbol  colons  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(colons[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  *  wm.getPartial(colons[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  colons	9	None	replace
97	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(coas[j]);  [CE]  cannot  find  symbol  coas  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(coas[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(coas[j]);	  jacobian[index++]    =    factor    *    wm.getPartial(colons[j]);    	non-compiled	[CE]  cannot  find  symbol  coas	9	None	replace
98	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variables[j]);  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(variables[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(variables[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  	8	None	replace
99	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(branch,  parameters[j]);  [CE]  cannot  find  symbol  branch  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(branch,  parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(branch,  parameters[j]);	  jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    	non-compiled	[CE]  cannot  find  symbol  branch	8	None	replace
100	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  double[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    double[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  ']'  expected	7	None	add
101	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  index);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  Arrays.fill(jacobian,  0,  index);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    Arrays.fill(jacobian,  0,  index);  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	7	None	add
102	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(parameters[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    factor    /    wm.getPartial(parameters[j]);    int  index  =  wm.getIndex(parameters[j]);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	7	None	add
103	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialSize(i);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartialSize(i);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialSize(i);	      double[]    parameters    =    wm.getPartialSize();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
104	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Arrays.fill(jacobian,  0,  index);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  index);	      Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	3	None	replace
105	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  Arrays.fill(jacobian,  0,  rows);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	Arrays.fill(jacobian,  0,  rows);	      Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	3	None	replace
106	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(i);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartials(i);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(i);	      double[]    parameters    =    wm.getPartials();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
107	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartials(i,  j);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartials(i,  j);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartials(i,  j);	      double[]    parameters    =    wm.getPartials();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
108	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  coefficient);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  coefficient);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variables[j],  coefficient);	  jacobian[index++]    =    factor    *    wm.getPartial(variables[j]);    	non-compiled	[CE]  cannot  find  symbol  	17	None	replace
109	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  cost);  [CE]  cannot  find  symbol  variants  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  cost);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variants[j],  cost);	  jacobian[index++]    =    factor    *    wm.getPartial(variants[j]);    	non-compiled	[CE]  cannot  find  symbol  variants	16	None	replace
110	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(brace,  j]);  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(brace,  j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(brace,  j]);	  jacobian[index++]    =    factor    *    wm.getPartial(variants[j]);    	non-compiled	[CE]  ')'  expected	16	None	replace
111	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
112	[BUG]  [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[i++]  =  factor  *  wm.getPartial(parameters[j]);	  jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
113	[BUG]  [BUGGY]  double[]  parameters  =  wm.getPartialValues(i);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm.getPartialValues(i);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm.getPartialValues(i);	      double[]    parameters    =    wm.getPartialValues();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
114	[BUG]  [BUGGY]  double[]  parameters  =  wm,  cost.getPartialValues();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  double[]  parameters  =  wm,  cost.getPartialValues();  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	double[]  parameters  =  wm,  cost.getPartialValues();	      double[]    parameters    =    wm.getPartialValues();    	non-compiled	[CE]  ';'  expected	19	None	replace
115	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  cost);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  index  =  wm.getIndex(variants[j],  cost);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  cost);	      int    index    =    wm.getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	13	None	replace
116	[BUG]  [BUGGY]  int  index  =  wm.getIndex(variants[j],  coefficient);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  int  index  =  wm.getIndex(variants[j],  coefficient);  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	int  index  =  wm.getIndex(variants[j],  coefficient);	      int    index    =    wm.getIndex(variants[j]);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	13	None	replace
117	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  double[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    double[index++]  =  cost  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  ']'  expected	10	None	add
118	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	10	None	add
119	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int  index  =  wm.getIndex(variants[j]);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	10	None	add
120	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {    [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  [BUGGY]    }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]    =    cost    *    wm.getPartial(parameters[j]);    int  index  =  wm.getIndex(variants[j]);  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	10	None	add
