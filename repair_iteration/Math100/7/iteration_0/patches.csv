bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  cols  =  wm.getColumnCount();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    int  cols  =  wm.getColumnCount();  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    int  cols  =  wm.getColumnCount();		non-compiled	[CE]  cannot  find  symbol	14	None	add
2	[BUG]  [BUGGY]    int  cols  =  wm.getColumnsCount();  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    int  cols  =  wm.getColumnsCount();  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    int  cols  =  wm.getColumnsCount();		non-compiled	[CE]  cannot  find  symbol	14	None	add
3	[BUG]  [BUGGY]    Arrays.fill(jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    Arrays.fill(jacobian,  0,  cols);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    Arrays.fill(jacobian,  0,  cols);		non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	14	None	add
4	[BUG]  [BUGGY]    int  cols  =  parameters[j].getCols();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    int  cols  =  parameters[j].getCols();  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    int  cols  =  parameters[j].getCols();		non-compiled	[CE]  cannot  find  symbol	14	None	add
5	[BUG]  [BUGGY]    int  cols  =  parameters[i].getCols();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    int  cols  =  parameters[i].getCols();  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    int  cols  =  parameters[i].getCols();		non-compiled	[CE]  cannot  find  symbol	14	None	add
6	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j]);  [CE]  array  required,  but  int  found  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(cols[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(cols[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	non-compiled	[CE]  array  required,  but  int  found	13	None	replace
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	replace
8	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	replace
9	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(colons[j]);  [CE]  cannot  find  symbol  colons  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(colons[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(colons[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	non-compiled	[CE]  cannot  find  symbol  colons	13	None	replace
10	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	replace
11	[BUG]  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  cost  *  wm.getPartial(parameters[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	replace
12	[BUG]  [BUGGY]    double[]  parameters  =  wm.getPartialValues(variants[j]);  [CE]  cannot  find  symbol  variants  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double[]  parameters  =  wm.getPartialValues(variants[j]);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    double[]  parameters  =  wm.getPartialValues(variants[j]);		non-compiled	[CE]  cannot  find  symbol  variants	14	None	add
13	[BUG]  [BUGGY]    int  index  =  wm.getIndex(variants[j]);  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    int  index  =  wm.getIndex(variants[j]);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    int  index  =  wm.getIndex(variants[j]);		non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	14	None	add
14	[BUG]  [BUGGY]    double[]  parameters  =  wm.getPartialValues(i,  cols);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double[]  parameters  =  wm.getPartialValues(i,  cols);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    double[]  parameters  =  wm.getPartialValues(i,  cols);		non-compiled	[CE]  cannot  find  symbol	14	None	add
15	[BUG]  [BUGGY]    int  index  =  wm.getIndex();  [CE]  variable  index  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    int  index  =  wm.getIndex();  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    int  index  =  wm.getIndex();		non-compiled	[CE]  variable  index  is  already  defined  in  method  updateJacobian()	14	None	add
16	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j]);  [CE]  cannot  find  symbol  variants  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variants[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variants[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	non-compiled	[CE]  cannot  find  symbol  variants	13	None	replace
17	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j]);  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(variables[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(variables[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	non-compiled	[CE]  cannot  find  symbol  	13	None	replace
18	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(brace,  parameters[j]);  [CE]  cannot  find  symbol  brace  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(brace,  parameters[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(brace,  parameters[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	non-compiled	[CE]  cannot  find  symbol  brace	13	None	replace
19	[BUG]  [BUGGY]    double[]  parameters  =  wm.getPartialValues();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double[]  parameters  =  wm.getPartialValues();  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    double[]  parameters  =  wm.getPartialValues();		non-compiled	[CE]  cannot  find  symbol	14	None	add
20	[BUG]  [BUGGY]    double[]  parameters  =  wm.getPartialSize();  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double[]  parameters  =  wm.getPartialSize();  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    double[]  parameters  =  wm.getPartialSize();		non-compiled	[CE]  cannot  find  symbol	14	None	add
21	[BUG]  [BUGGY]    double[]  parameters  =  wm.getPartials();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double[]  parameters  =  wm.getPartials();  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    double[]  parameters  =  wm.getPartials();		non-compiled	[CE]  cannot  find  symbol	14	None	add
