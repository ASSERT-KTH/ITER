projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=wm.getColumnCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=wm.getColumnsCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(jacobian,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=parameters[j].getCols();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=parameters[i].getCols();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(cols[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(colons[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=cost*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialValues(variants[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intindex=wm.getIndex(variants[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialValues(i,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intindex=wm.getIndex();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(variants[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(variables[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(brace,parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialValues();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialSize();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartials();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=wm.getColumnsCount()+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=wm.getColumnsCount()-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=parameters.getColumnsCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=cost/wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(cols[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(variants[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(colons[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialValues(i,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialValues(i,j);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialValues(j,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialValues(index,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(jacobian,0,cols,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(jacobian,0,cols,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(jacobian,0,index,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(jacobian,0,rows,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(cols[j],costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(cols[j],cost);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(cols[j],coefficient);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intindex=wm.getIndex()+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intindex=wm.getIndex()-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intindex=wm.getIndex()-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intindex=wm.getIndex(j);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(i,parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*parameters.getPartial(wm,parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(cols,parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(j,parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Double[]parameters=wm.getPartialValues();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialValues(j);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=wm.getColumnCount()+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=wm.getColumnCount()-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=wm.getColumnCount()*2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=cost*wm.getPartial(parameters[j]);jacobian[index++]=cost*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=cost*wm.getPartial(parameters[j]);Jacobian[index++]=cost*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=cost*wm.getPartial(parameters[j]);Arrays.fill(jacobian,index++]=cost*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=cost*wm.getPartial(parameters[j]);intindex++]=cost*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=measurements[i].getCols();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=wm.getCols();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialValues(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialValues(variants[j],cost);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialValues(variants[j],coefficient);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*parameters.getPartial(wm[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*parameters[j].getPartial(variables[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(variables[j],cost);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=parameters[j].getCols()-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=parameters[j].getCols()-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(cos[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialSize(j);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialSize()+j;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Double[]parameters=wm.getPartialSize();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartials(j);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Double[]parameters=wm.getPartials();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(factors[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(parameters[j]);jacobian[index++]=factor/wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(parameters[j]);Jacobian[index++]=factor/wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(parameters[j]);Arrays.fill(jacobian,index++]=factor/wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(parameters[j]);intindex++]=factor/wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intindex=wm.getIndex(variants[j]+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intindex=parameters[j].getIndex(variants[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intindex=wm.getIndex(variants[j],cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intindex=wm.getIndex(variants[j]-1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[i++]=cost*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factors*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=coefficient*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=cost*wm.getPartial(parameters[j]);Arrays.fill(jacobian,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=cost*wm.getPartial(parameters[j]);Arrays.fill(jacobian,0,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(jacobian,0,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(jacobian,0,cols+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intindex=wm.getIndex(variants[j],costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=parameters.getColumnCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialValues(variants[j],costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=parameters[i].getCols()-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(i,parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(data[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(jacobian[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(i,j);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(tokens[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(parameters[j]);intindex=parameters[j].getIndex();jacobian[index++]=factor/wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(parameters[j]);double[]=factor/wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(parameters[j]);Arrays.fill(jacobian,0,cols);jacobian[index++]=factor/wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(parameters[j]);Arrays.fill(jacobian,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(i,cols[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(data[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intcols=parameters[j].getCols()+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(brace,cols[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*parameters[j].getPartial(wm,parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(data[j],parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(coefficients[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=cost*wm.getPartial(colons[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(coas[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(variables[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(branch,parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(parameters[j]);double[index++]=factor/wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(parameters[j]);Arrays.fill(jacobian,0,index);jacobian[index++]=factor/wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(parameters[j]);intindex=wm.getIndex(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialSize(i);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(jacobian,0,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(jacobian,0,rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartials(i);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartials(i,j);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(variables[j],coefficient);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(variants[j],cost);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(brace,j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[i++]=factor*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm.getPartialValues(i);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79double[]parameters=wm,cost.getPartialValues();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intindex=wm.getIndex(variants[j],cost);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79intindex=wm.getIndex(variants[j],coefficient);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=cost*wm.getPartial(parameters[j]);double[index++]=cost*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=cost*wm.getPartial(parameters[j]);intindex=wm.getIndex(variants[j]);jacobian[index++]=cost*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=cost*wm.getPartial(parameters[j]);intindex=wm.getIndex(variants[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=cost*wm.getPartial(parameters[j]);intindex=wm.getIndex(variants[j]);jacobian[index++]=factor*wm.getPartial(parameters[j]);
