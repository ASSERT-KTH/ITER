bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.getAnnotation();  [CE]  method  getAnnotation  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.getAnnotation();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation();    	non-compiled	[CE]  method  getAnnotation  in  class  Class<T>  cannot  be  applied  to  given  types;	8	None	replace
2	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.getAnnotation();  [CE]  cannot  find  symbol  type  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.getAnnotation();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol  type	8	None	replace
3	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation(),  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation(),  fieldType);  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation(),  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation();    	non-compiled	[CE]  ';'  expected	8	None	replace
4	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value.getAnnotation();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value.getAnnotation();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	8	None	replace
5	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)value.getAnnotation();  [CE]  illegal  start  of  expression  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)value.getAnnotation();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)value.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
6	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.getAnnotation();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.getAnnotation();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation();    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	8	None	replace
7	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.clone();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value;    	non-compiled	[CE]  clone()  has  protected  access  in  Object	3	None	replace
8	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getValue();  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getValue();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getValue();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
9	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type;  [CE]  cannot  find  symbol  type  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value;    	non-compiled	[CE]  cannot  find  symbol  type	3	None	replace
10	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.fieldType;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.fieldType;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.fieldType;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	3	None	replace
11	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType;  [CE]  no  suitable  method  found  for  get(TypeAdapterFactory)  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value;    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapterFactory)	3	None	replace
12	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.value;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.value;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.value;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	3	None	replace
13	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  [CE]  inconvertible  types  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  inconvertible  types	4	None	replace
14	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.clone();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  clone()  has  protected  access  in  Object	4	None	replace
15	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter;  [CE]  no  suitable  method  found  for  get(TypeAdapterFactory)  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapterFactory)	4	None	replace
16	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter;  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	4	None	replace
17	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation();  [CE]  cannot  find  symbol  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
18	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.newInstance();  [CE]  cannot  find  symbol  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.newInstance();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
19	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson.typeAdapterFactory;  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson.typeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	9	None	replace
20	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.typeAdapterFactory;  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.typeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	9	None	replace
21	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.typeAdapterFactory;  [CE]  cannot  find  symbol  construct  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.typeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  construct	9	None	replace
22	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericTypeAdapterFactory;  [CE]  cannot  find  symbol  genericTypeAdapterFactory  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericTypeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericTypeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  genericTypeAdapterFactory	9	None	replace
23	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)f.typeAdapterFactory;  [CE]  cannot  find  symbol  f  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)f.typeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)f.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  f	9	None	replace
24	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.value;  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.value;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)this.value;    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	5	None	replace
25	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory;  [CE]  no  suitable  method  found  for  get(TypeAdapterFactory)  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)this.value;    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapterFactory)	5	None	replace
26	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType);  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType);	      	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	6	None	replace
27	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeFactory  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);	      	non-compiled	[CE]  cannot  find  symbol  typeFactory	6	None	replace
28	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  type  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType);  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType);	      	non-compiled	[CE]  cannot  find  symbol  type	6	None	replace
29	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType));  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType));  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType));	      	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	6	None	replace
30	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  annotation);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  annotation);  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  annotation);	      	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	6	None	replace
31	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeType)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeType  [FE]                            NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeType)).construct().create(gson,  fieldType);  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeType)).construct().create(gson,  fieldType);	      	non-compiled	[CE]  cannot  find  symbol  typeType	6	None	replace
32	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.clone();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory;    	non-compiled	[CE]  clone()  has  protected  access  in  Object	7	None	replace
33	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapterFactory;  [CE]  cannot  find  symbol  fieldTypeAdapterFactory  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapterFactory	7	None	replace
34	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.newInstance();  [CE]  inconvertible  types  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.newInstance();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory;    	non-compiled	[CE]  inconvertible  types	7	None	replace
35	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory;  [CE]  inconvertible  types  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory;    	non-compiled	[CE]  inconvertible  types	7	None	replace
36	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getType();  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getType();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getType();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
37	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type;  [CE]  cannot  find  symbol  type  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  cannot  find  symbol  type	1	None	replace
38	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;  [CE]  inconvertible  types  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  inconvertible  types	1	None	replace
39	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation();  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
40	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getRawClass();  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getRawClass();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getRawClass();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
41	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.clone();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  clone()  has  protected  access  in  Object	1	None	replace
42	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.clone();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.clone();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	2	None	replace
43	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.clone();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	2	None	replace
44	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)value.clone();  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)value.clone();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)value.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value.clone();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value.clone();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	2	None	replace
46	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.clone();  [CE]  cannot  find  symbol  type  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.clone();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  cannot  find  symbol  type	2	None	replace
47	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.typeAdapterFactory;  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.typeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.typeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value;    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	3	None	replace
48	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory;  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
49	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.typeAdapterFactory;  [CE]  cannot  find  symbol  reference  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.typeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  reference	9	None	replace
50	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.typeAdapterFactory;  [CE]  cannot  find  symbol  object  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.typeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  object	9	None	replace
51	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.typeAdapterFactory;  [CE]  cannot  find  symbol  type  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.typeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  type	9	None	replace
52	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter;  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
53	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  fieldType);  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  fieldType);	      	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	6	None	replace
54	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).create(gson,  fieldType);  [CE]  cannot  find  symbol  typeFactory  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).create(gson,  fieldType);  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).create(gson,  fieldType);	      	non-compiled	[CE]  cannot  find  symbol  typeFactory	6	None	replace
55	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();	      	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	6	None	replace
56	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)value.getAnnotation();  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)value.getAnnotation();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)value.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
57	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)value.clone();  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)value.clone();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)value.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
58	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)value.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)value.clone();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)value.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	2	None	replace
59	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.value;  [CE]  cannot  find  symbol  type  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.value;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)this.value;    	non-compiled	[CE]  cannot  find  symbol  type	5	None	replace
60	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_value;  [CE]  cannot  find  symbol  _value  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_value;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)this.value;    	non-compiled	[CE]  cannot  find  symbol  _value	5	None	replace
61	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.value;  [CE]  cannot  find  symbol  reference  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.value;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)this.value;    	non-compiled	[CE]  cannot  find  symbol  reference	5	None	replace
62	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)fieldType;  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)fieldType;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)fieldType;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
63	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapterFactory;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapterFactory;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	7	None	replace
64	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_value.clone();  [CE]  cannot  find  symbol  _value  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_value.clone();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_value.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  cannot  find  symbol  _value	2	None	replace
65	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_value;  [CE]  cannot  find  symbol  _value  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_value;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_value;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value;    	non-compiled	[CE]  cannot  find  symbol  _value	3	None	replace
66	[BUG]  [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)typeAdapter;  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)typeAdapter;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)typeAdapter;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
67	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invert();  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invert();  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invert();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
68	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)referenced.value;  [CE]  cannot  find  symbol  referenced  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)referenced.value;  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)referenced.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)this.value;    	non-compiled	[CE]  cannot  find  symbol  referenced	5	None	replace
69	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.invoke(null,  constructorConstructor);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.invoke(null,  constructorConstructor);  [BUGGY]    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.invoke(null,  constructorConstructor);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
