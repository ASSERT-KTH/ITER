bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_fieldType;  [CE]  cannot  find  symbol  _fieldType  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_fieldType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_fieldType;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)_value;    	non-compiled	[CE]  cannot  find  symbol  _fieldType	60	None	replace
2	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object;  [CE]  cannot  find  symbol  object  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)_value;    	non-compiled	[CE]  cannot  find  symbol  object	60	None	replace
3	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType,  annotation);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType,  annotation);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    annotation);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	30	None	replace
4	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  annotation,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  annotation,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  annotation,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    annotation);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	30	None	replace
5	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType).construct().create(gson,  annotation);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType).construct().create(gson,  annotation);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType).construct().create(gson,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    annotation);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	30	None	replace
6	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.value;  [CE]  cannot  find  symbol  value  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.value;    	non-compiled	[CE]  cannot  find  symbol  value	59	None	replace
7	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.value;  [CE]  cannot  find  symbol  object  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.value;    	non-compiled	[CE]  cannot  find  symbol  object	59	None	replace
8	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)baseType.value;  [CE]  cannot  find  symbol  baseType  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)baseType.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)baseType.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.value;    	non-compiled	[CE]  cannot  find  symbol  baseType	59	None	replace
9	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.value;  [CE]  cannot  find  symbol  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.value;    	non-compiled	[CE]  cannot  find  symbol  type	59	None	replace
10	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericType.value;  [CE]  cannot  find  symbol  genericType  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericType.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericType.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.value;    	non-compiled	[CE]  cannot  find  symbol  genericType	59	None	replace
11	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_fieldType.clone();  [CE]  cannot  find  symbol  _fieldType  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_fieldType.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_fieldType.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)_value.clone();    	non-compiled	[CE]  cannot  find  symbol  _fieldType	64	None	replace
12	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.clone();  [CE]  cannot  find  symbol  object  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)_value.clone();    	non-compiled	[CE]  cannot  find  symbol  object	64	None	replace
13	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  fieldType,  annotation);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  fieldType,  annotation);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  fieldType,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	53	None	replace
14	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	53	None	replace
15	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType,  annotation);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType,  annotation);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	53	None	replace
16	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  fieldType),  annotation);  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  fieldType),  annotation);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  fieldType),  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	53	None	replace
17	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  annotation,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  annotation,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  annotation,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	53	None	replace
18	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType,  fieldType)).create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>,TypeToken<CAP#2>)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType,  fieldType)).create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType,  fieldType)).create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>,TypeToken<CAP#2>)	53	None	replace
19	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)value.clone();  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)value.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
20	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)super.clone();  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)super.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)super.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
21	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.clone();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	44	None	replace
22	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)this.value.clone();  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)this.value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)this.value.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
23	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.clone();  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
24	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.getAnnotation();  [CE]  cannot  find  symbol  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol  type	1	None	replace
25	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.getAnnotation(),  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.getAnnotation(),  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.getAnnotation(),  fieldType);	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value.getAnnotation();    	non-compiled	[CE]  ';'  expected	1	None	replace
26	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.value.getAnnotation();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.value.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.value.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value.getAnnotation();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	1	None	replace
27	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.getAnnotation();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value.getAnnotation();    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	1	None	replace
28	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)gson.getAnnotation();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)gson.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)gson.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
29	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.clone();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  clone()  has  protected  access  in  Object	13	None	replace
30	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
31	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter;  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter;	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	13	None	replace
32	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.newInstance();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.newInstance();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
33	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.typeAdapterFactory;  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.typeAdapterFactory;	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	13	None	replace
34	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getRawClass();  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getRawClass();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getRawClass();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
35	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.value;  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.value;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)this.value;    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	12	None	replace
36	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.value.clone();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.value.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value.clone();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	7	None	replace
37	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.clone();  [CE]  cannot  find  symbol  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value.clone();    	non-compiled	[CE]  cannot  find  symbol  type	7	None	replace
38	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.fieldType.clone();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.fieldType.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.fieldType.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value.clone();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	7	None	replace
39	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)gson.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)gson.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)gson.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	7	None	replace
40	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.clone();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
41	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.cloneTree();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.cloneTree();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.cloneTree();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
42	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.newInstance();  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.newInstance();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
43	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.getConstructor();  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.getConstructor();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.getConstructor();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
44	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.build();  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.build();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.build();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
45	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getTypeAdapterFactory();  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getTypeAdapterFactory();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getTypeAdapterFactory();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
46	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.fieldType;  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.fieldType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.fieldType;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)this.fieldType;    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	10	None	replace
47	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.fieldType;  [CE]  cannot  find  symbol  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.fieldType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.fieldType;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)this.fieldType;    	non-compiled	[CE]  cannot  find  symbol  type	10	None	replace
48	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)referenced.fieldType;  [CE]  cannot  find  symbol  referenced  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)referenced.fieldType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)referenced.fieldType;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)this.fieldType;    	non-compiled	[CE]  cannot  find  symbol  referenced	10	None	replace
49	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)reference.fieldType;  [CE]  cannot  find  symbol  reference  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)reference.fieldType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)reference.fieldType;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)this.fieldType;    	non-compiled	[CE]  cannot  find  symbol  reference	10	None	replace
50	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.clone();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.clone();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	43	None	replace
51	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value.clone();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value.clone();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	43	None	replace
52	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.clone();  [CE]  cannot  find  symbol  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.clone();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  cannot  find  symbol  type	43	None	replace
53	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)getValue();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)getValue();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)getValue();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
54	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)value.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)value.clone();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	43	None	replace
55	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.fieldType.clone();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.fieldType.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.fieldType.clone();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	43	None	replace
56	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.getAnnotation();  [CE]  cannot  find  symbol  object  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol  object	2	None	replace
57	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericType.getAnnotation();  [CE]  cannot  find  symbol  genericType  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericType.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericType.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol  genericType	2	None	replace
58	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson.getAnnotation();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
59	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.fieldType.getAnnotation();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.fieldType.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.fieldType.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.getAnnotation();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	2	None	replace
60	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.getAnnotation();  [CE]  cannot  find  symbol  constructor  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol  constructor	2	None	replace
61	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getTypeAdapterFactory();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getTypeAdapterFactory();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getTypeAdapterFactory();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
62	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.typeAdapterFactory;  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	20	None	replace
63	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation(),  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation(),  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation(),  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation(),    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
64	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation(),  fieldType,  annotation);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation(),  fieldType,  annotation);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation(),  fieldType,  annotation);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation(),    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
65	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation(),  value);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation(),  value);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation(),  value);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation(),    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
66	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.getAnnotation(),  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.getAnnotation(),  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.getAnnotation(),  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation(),    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
67	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.getAnnotation(),  fieldType);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.getAnnotation(),  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.getAnnotation(),  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation(),    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
68	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  gson);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  gson);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType));    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	29	None	replace
69	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  annotation);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  annotation);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType));    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	29	None	replace
70	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(gson,  fieldType));  [CE]  no  suitable  method  found  for  get(Gson,TypeToken<CAP#1>)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(gson,  fieldType));  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(gson,  fieldType));	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType));    	non-compiled	[CE]  no  suitable  method  found  for  get(Gson,TypeToken<CAP#1>)	29	None	replace
71	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType));    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	29	None	replace
72	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType,  gson));  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>,Gson)  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType,  gson));  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType,  gson));	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType));    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>,Gson)	29	None	replace
73	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType,  annotation));  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>,JsonAdapter)  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType,  annotation));  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType,  annotation));	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType));    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>,JsonAdapter)	29	None	replace
74	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory));  [CE]  cannot  find  symbol  typeFactory  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory));  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory));	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType));    	non-compiled	[CE]  cannot  find  symbol  typeFactory	29	None	replace
75	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.clone();  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
76	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.newInstance();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.newInstance();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
77	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.build();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.build();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.build();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
78	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)getTypeAdapterFactory();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)getTypeAdapterFactory();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)getTypeAdapterFactory();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
79	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)fieldTypeAdapterFactory;  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)fieldTypeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)fieldTypeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
80	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.create();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.create();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.create();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
81	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type;  [CE]  cannot  find  symbol  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type;	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  cannot  find  symbol  type	38	None	replace
82	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
83	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getRawClass();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getRawClass();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getRawClass();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
84	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.clone();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  clone()  has  protected  access  in  Object	38	None	replace
85	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.restrictByNotNullOrUndefined();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.restrictByNotNullOrUndefined();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
86	[BUG]  [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory  <  TypeAdapterFactory>)typeAdapter;  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory  <  TypeAdapterFactory>)typeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory  <  TypeAdapterFactory>)typeAdapter;	  Constructor    <    TypeAdapterFactory>    constructorConstructor    =(Constructor    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
87	[BUG]  [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)typeAdapter.clone();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)typeAdapter.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)typeAdapter.clone();	  Constructor    <    TypeAdapterFactory>    constructorConstructor    =(Constructor    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
88	[BUG]  [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory  <  TypeAdapterFactory>)typeAdapter.clone();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory  <  TypeAdapterFactory>)typeAdapter.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory  <  TypeAdapterFactory>)typeAdapter.clone();	  Constructor    <    TypeAdapterFactory>    constructorConstructor    =(Constructor    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
89	[BUG]  [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory  <  TypeAdapterFactory>)fieldTypeAdapter;  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory  <  TypeAdapterFactory>)fieldTypeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory  <  TypeAdapterFactory>)fieldTypeAdapter;	  Constructor    <    TypeAdapterFactory>    constructorConstructor    =(Constructor    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
90	[BUG]  [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)fieldTypeAdapter;  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)fieldTypeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)fieldTypeAdapter;	  Constructor    <    TypeAdapterFactory>    constructorConstructor    =(Constructor    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
91	[BUG]  [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)typeAdapter.construct();  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)typeAdapter.construct();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)typeAdapter.construct();	  Constructor    <    TypeAdapterFactory>    constructorConstructor    =(Constructor    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
92	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.newInstance();  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.newInstance();    	non-compiled	[CE]  inconvertible  types	34	None	replace
93	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapterFactory.newInstance();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapterFactory.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapterFactory.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.newInstance();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	34	None	replace
94	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.newInstance(),  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.newInstance(),  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.newInstance(),  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.newInstance();    	non-compiled	[CE]  ';'  expected	34	None	replace
95	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericTypeAdapterFactory.clone();  [CE]  cannot  find  symbol  genericTypeAdapterFactory  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericTypeAdapterFactory.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericTypeAdapterFactory.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.clone();    	non-compiled	[CE]  cannot  find  symbol  genericTypeAdapterFactory	46	None	replace
96	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)gson.typeAdapterFactory;  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)gson.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)gson.typeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	47	None	replace
97	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.typeAdapterFactory;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.typeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)super.typeAdapterFactory;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	47	None	replace
98	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)constructor.typeAdapterFactory;  [CE]  cannot  find  symbol  constructor  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)constructor.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)constructor.typeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  constructor	47	None	replace
99	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.typeAdapterFactory;  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.typeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	47	None	replace
100	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)genericTypeAdapterFactory;  [CE]  cannot  find  symbol  genericTypeAdapterFactory  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)genericTypeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)genericTypeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  genericTypeAdapterFactory	47	None	replace
101	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)json.typeAdapterFactory;  [CE]  cannot  find  symbol  json  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)json.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)json.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)f.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  json	23	None	replace
102	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)getTypeAdapterFactory();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)getTypeAdapterFactory();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)getTypeAdapterFactory();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)f.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
103	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)annotation;  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)annotation;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)annotation;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldTypeAdapter;    	non-compiled	[CE]  inconvertible  types	16	None	replace
104	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter;  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldTypeAdapter;    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	16	None	replace
105	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  [CE]  inconvertible  types  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldTypeAdapter;    	non-compiled	[CE]  inconvertible  types	16	None	replace
106	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson;  [CE]  inconvertible  types  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldTypeAdapter;    	non-compiled	[CE]  inconvertible  types	16	None	replace
107	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory;  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldTypeAdapter;    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	16	None	replace
108	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.getAnnotation();  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
109	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation(),  fieldType);  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation(),  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation(),  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.getAnnotation();    	non-compiled	[CE]  ';'  expected	17	None	replace
110	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapter.getAnnotation();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapter.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapter.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.getAnnotation();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	17	None	replace
111	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation(),  annotation;  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation(),  annotation;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation(),  annotation;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
112	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation(),  fieldType;  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation(),  fieldType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getAnnotation(),  fieldType;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
113	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.type;  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.type;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.type;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type;    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	37	None	replace
114	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.clone();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.clone();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
115	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	42	None	replace
116	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.clone();  [CE]  cannot  find  symbol  constructor  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.clone();    	non-compiled	[CE]  cannot  find  symbol  constructor	42	None	replace
117	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeType.getRawClass();  [CE]  cannot  find  symbol  typeType  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeType.getRawClass();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeType.getRawClass();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  typeType	40	None	replace
118	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.getRawClass();  [CE]  cannot  find  symbol  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.getRawClass();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)type.getRawClass();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	40	None	replace
119	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getRawClass();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getRawClass();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getRawClass();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
120	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson.getRawClass();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson.getRawClass();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson.getRawClass();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
121	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.restrictByNotNullOrUndefined();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.restrictByNotNullOrUndefined();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
122	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.typeAdapterFactory;  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	51	None	replace
123	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeName  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct().create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeName	31	None	replace
124	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReference)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeReference  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReference)).construct().create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReference)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeReference	31	None	replace
125	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeElement)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeElement  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeElement)).construct().create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeElement)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeElement	31	None	replace
126	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	32	None	replace
127	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapterFactory.clone();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapterFactory.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapterFactory.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.clone();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	32	None	replace
128	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	32	None	replace
129	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapterFactory.clone();  [CE]  cannot  find  symbol  fieldTypeAdapterFactory  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapterFactory.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapterFactory.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.clone();    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapterFactory	32	None	replace
130	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapter;    	non-compiled	[CE]  clone()  has  protected  access  in  Object	15	None	replace
131	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.cloneTree();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.cloneTree();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.cloneTree();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
132	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.getTypeAdapterFactory();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.getTypeAdapterFactory();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.getTypeAdapterFactory();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapter;    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	15	None	replace
133	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldTypeAdapter;  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldTypeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldTypeAdapter;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	15	None	replace
134	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.newInstance();  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.newInstance();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
135	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.clone();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
136	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)fieldTypeAdapter;  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)fieldTypeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)fieldTypeAdapter;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
137	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.newInstance();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.newInstance();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
138	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.nullSafe();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.nullSafe();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.nullSafe();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
139	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.getAnnotation();  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
140	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)type.getAnnotation();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)type.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)type.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
141	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)super.getAnnotation();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)super.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)super.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
142	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.value.getAnnotation();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.value.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.value.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
143	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)gson.getAnnotation();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)gson.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)gson.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
144	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)getValue();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)getValue();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)getValue();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
145	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)org.json.typeAdapterFactory;  [CE]  package  org  does  not  exist  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)org.json.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)org.json.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)gson.typeAdapterFactory;    	non-compiled	[CE]  package  org  does  not  exist	19	None	replace
146	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gen.typeAdapterFactory;  [CE]  cannot  find  symbol  gen  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gen.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gen.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)gson.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  gen	19	None	replace
147	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson.getTypeAdapterFactory();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson.getTypeAdapterFactory();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)gson.getTypeAdapterFactory();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)gson.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
148	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)fieldType;    	non-compiled	[CE]  clone()  has  protected  access  in  Object	11	None	replace
149	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getAnnotation();  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)fieldType;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
150	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)gson;  [CE]  inconvertible  types  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)gson;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)gson;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)fieldType;    	non-compiled	[CE]  inconvertible  types	11	None	replace
151	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getAnnotation(JsonToken.FIELD_NAME);  [CE]  cannot  find  symbol  JsonToken  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getAnnotation(JsonToken.FIELD_NAME);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getAnnotation(JsonToken.FIELD_NAME);	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)fieldType;    	non-compiled	[CE]  cannot  find  symbol  JsonToken	11	None	replace
152	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getAnnotation(JsonToken.VALUE_TYPE);  [CE]  cannot  find  symbol  JsonToken  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getAnnotation(JsonToken.VALUE_TYPE);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getAnnotation(JsonToken.VALUE_TYPE);	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)fieldType;    	non-compiled	[CE]  cannot  find  symbol  JsonToken	11	None	replace
153	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapterFactory;  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldTypeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	33	None	replace
154	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.value;  [CE]  cannot  find  symbol  value  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)reference.value;    	non-compiled	[CE]  cannot  find  symbol  value	61	None	replace
155	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.value;  [CE]  cannot  find  symbol  value  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)reference.value;    	non-compiled	[CE]  cannot  find  symbol  value	61	None	replace
156	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.type;  [CE]  cannot  find  symbol  reference  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.type;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.type;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)reference.value;    	non-compiled	[CE]  cannot  find  symbol  reference	61	None	replace
157	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)object;  [CE]  cannot  find  symbol  object  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)object;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)object;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)type;    	non-compiled	[CE]  cannot  find  symbol  object	9	None	replace
158	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeToken;  [CE]  cannot  find  symbol  typeToken  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeToken;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeToken;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)type;    	non-compiled	[CE]  cannot  find  symbol  typeToken	9	None	replace
159	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)genericType;  [CE]  cannot  find  symbol  genericType  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)genericType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)genericType;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)type;    	non-compiled	[CE]  cannot  find  symbol  genericType	9	None	replace
160	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	26	None	replace
161	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType),  annotation);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType),  annotation);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType),  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	26	None	replace
162	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType,  fieldType)).construct().create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>,TypeToken<CAP#2>)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType,  fieldType)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>,TypeToken<CAP#2>)	26	None	replace
163	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)super.clone();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)super.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)super.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.clone();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
164	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.value.clone();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.value.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.clone();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
165	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)gson.clone();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)gson.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)gson.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.clone();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
166	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)reference.clone();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)reference.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)reference.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.clone();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
167	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getAnnotation();  [CE]  method  getAnnotation  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.getAnnotation();    	non-compiled	[CE]  method  getAnnotation  in  class  Class<T>  cannot  be  applied  to  given  types;	6	None	replace
168	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.typeAdapterFactory;  [CE]  cannot  find  symbol  constructor  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)construct.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  constructor	21	None	replace
169	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.getTypeAdapterFactory();  [CE]  cannot  find  symbol  construct  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.getTypeAdapterFactory();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.getTypeAdapterFactory();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)construct.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  construct	21	None	replace
170	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	14	None	replace
171	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter.clone();  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.clone();    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	14	None	replace
172	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.typeAdapterFactory.clone();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.typeAdapterFactory.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.typeAdapterFactory.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)this.value.clone();    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	45	None	replace
173	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.typeAdapterFactory.clone();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.typeAdapterFactory.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)super.typeAdapterFactory.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)this.value.clone();    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	45	None	replace
174	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(0)).construct().create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(0)).construct().create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(0)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(type)).construct().create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	28	None	replace
175	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.newInstance();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.newInstance();	  TypeAdapterFactory    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
176	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getType();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getType();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getType();	  TypeAdapterFactory    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
177	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_fieldType;  [CE]  cannot  find  symbol  _fieldType  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_fieldType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_fieldType;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)_value;    	non-compiled	[CE]  cannot  find  symbol  _fieldType	65	None	replace
178	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.newInstance();  [CE]  illegal  start  of  expression  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.newInstance();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
179	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.newInstance();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.newInstance();    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	18	None	replace
180	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.nullSafe();  [CE]  inconvertible  types  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.nullSafe();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.nullSafe();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.newInstance();    	non-compiled	[CE]  inconvertible  types	18	None	replace
181	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getInstance();  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.getInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.newInstance();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
182	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)super.clone();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)super.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)super.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory)value.clone();    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	58	None	replace
183	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)this.value.clone();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)this.value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)this.value.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory)value.clone();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	58	None	replace
184	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)getValue();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)getValue();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)getValue();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory)value.clone();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
185	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)value.getAnnotation();  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)value.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)value.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory>)value.getAnnotation();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
186	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)this.value.getAnnotation();  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)this.value.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)this.value.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory>)value.getAnnotation();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
187	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)super.getAnnotation();  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)super.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)super.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory>)value.getAnnotation();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
188	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)type.getAnnotation();  [CE]  illegal  start  of  expression  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)type.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)type.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory>)value.getAnnotation();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
189	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation(),  annotation;  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation(),  annotation;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation(),  annotation;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
190	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeType.getAnnotation();  [CE]  cannot  find  symbol  typeType  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeType.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeType.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol  typeType	39	None	replace
191	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)fieldType.getAnnotation();  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)fieldType.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)fieldType.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.getAnnotation();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
192	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(),  gson);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(),  gson);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(),  gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct();    	non-compiled	[CE]  ';'  expected	55	None	replace
193	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(gson);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(gson);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct();    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	55	None	replace
194	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType.construct(),  annotation);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType.construct(),  annotation);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType.construct(),  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct();    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	55	None	replace
195	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType).construct();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct();    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	55	None	replace
196	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(),  gson;  [CE]  ';'  expected  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(),  gson;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(),  gson;	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct();    	non-compiled	[CE]  ';'  expected	55	None	replace
197	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(),  gson,  fieldType);  [CE]  ';'  expected  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(),  gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct(),  gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct();    	non-compiled	[CE]  ';'  expected	55	None	replace
198	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getObject();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getObject();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getObject();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)getValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
199	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getValue(),  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getValue(),  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getValue(),  fieldType);	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
200	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getAnnotation();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)getValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
201	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.getValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.getValue();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)this.getValue();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)getValue();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	8	None	replace
202	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getValue().clone();  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getValue().clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getValue().clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)getValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
203	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getValue(),  constructorConstructor);  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getValue(),  constructorConstructor);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getValue(),  constructorConstructor);	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
204	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)type;  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)type;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)type;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)fieldType;    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
205	[BUG]  [BUGGY]  TypeAdapterFactory  fieldType  =(TypeAdapterFactoryFactory)fieldType;  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  fieldType  =(TypeAdapterFactoryFactory)fieldType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  fieldType  =(TypeAdapterFactoryFactory)fieldType;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)fieldType;    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	62	None	replace
206	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)fieldType.clone();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)fieldType.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)fieldType.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)fieldType;    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
207	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)super.typeAdapterFactory;  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)super.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)super.typeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)fieldType;    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
208	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)gson;  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)gson;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)gson;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)fieldType;    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
209	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)referencedType.value;  [CE]  cannot  find  symbol  referencedType  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)referencedType.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)referencedType.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)referenced.value;    	non-compiled	[CE]  cannot  find  symbol  referencedType	68	None	replace
210	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.getType();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.getType();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.getType();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.getType();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
211	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getRawType();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getRawType();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getRawType();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.getType();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
212	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getConstructor();  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getConstructor();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getConstructor();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.getType();    	non-compiled	[CE]  inconvertible  types	36	None	replace
213	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getReturnType();  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getReturnType();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getReturnType();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.getType();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
214	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructorConstructor.invoke(null,  fieldType);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructorConstructor.invoke(null,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructorConstructor.invoke(null,  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.invoke(null,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
215	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.invoke(null,  fieldType);  [CE]  cannot  find  symbol  constructor  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.invoke(null,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.invoke(null,  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.invoke(null,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  constructor	69	None	replace
216	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)factoryConstructor.invoke(null,  fieldType);  [CE]  cannot  find  symbol  factoryConstructor  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)factoryConstructor.invoke(null,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)factoryConstructor.invoke(null,  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.invoke(null,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  factoryConstructor	69	None	replace
217	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)constructorConstructor.invoke(null,  fieldType);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)constructorConstructor.invoke(null,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)constructorConstructor.invoke(null,  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.invoke(null,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
218	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.invoke(null,  constructorConstructor);  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.invoke(null,  constructorConstructor);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.invoke(null,  constructorConstructor);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.invoke(null,    constructorConstructor);    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	69	None	replace
219	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)fieldType.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)fieldType.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)fieldType.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	41	None	replace
220	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)fieldType.clone();  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)fieldType.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)fieldType.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.clone();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
221	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.invert();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.invert();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.invert();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.invert();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
222	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.invert();  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.invert();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.invert();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.invert();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
223	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invert(),  fieldType;  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invert(),  fieldType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invert(),  fieldType;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.invert();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
224	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter.invert();  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter.invert();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter.invert();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.invert();    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	67	None	replace
225	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invert(),  fieldType);  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invert(),  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invert(),  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.invert();    	non-compiled	[CE]  ';'  expected	67	None	replace
226	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.invert();  [CE]  illegal  start  of  expression  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.invert();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.invert();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.invert();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
227	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	27	None	replace
228	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeObjectFactory  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).construct().create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeObjectFactory	27	None	replace
229	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeProperty)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeProperty  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeProperty)).construct().create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeProperty)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeProperty	27	None	replace
230	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReferenceFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeReferenceFactory  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReferenceFactory)).construct().create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReferenceFactory)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeReferenceFactory	27	None	replace
231	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	54	None	replace
232	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).create(gson,  fieldType);  [CE]  cannot  find  symbol  typeObjectFactory  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeObjectFactory	54	None	replace
233	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeProperty)).create(gson,  fieldType);  [CE]  cannot  find  symbol  typeProperty  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeProperty)).create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeProperty)).create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeProperty	54	None	replace
234	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReferenceFactory)).create(gson,  fieldType);  [CE]  cannot  find  symbol  typeReferenceFactory  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReferenceFactory)).create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReferenceFactory)).create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeReferenceFactory	54	None	replace
235	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).create(gson,  fieldType);  [CE]  cannot  find  symbol  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  type	54	None	replace
236	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructorConstructor.typeAdapterFactory;  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructorConstructor.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructorConstructor.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)construct.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	21	None	replace
237	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)compiler.typeAdapterFactory;  [CE]  cannot  find  symbol  compiler  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)compiler.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)compiler.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)construct.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  compiler	21	None	replace
238	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.resolve(gson);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.resolve(gson);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.resolve(gson);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.clone();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
239	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeToken.clone();  [CE]  cannot  find  symbol  typeToken  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeToken.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeToken.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  typeToken	15	None	replace
240	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.nullSafe();  [CE]  no  suitable  method  found  for  get(TypeAdapterFactory)  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.nullSafe();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapter.nullSafe();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapter;    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapterFactory)	15	None	replace
241	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapters.clone();  [CE]  cannot  find  symbol  typeAdapters  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapters.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapters.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.clone();    	non-compiled	[CE]  cannot  find  symbol  typeAdapters	42	None	replace
242	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.clone();  [CE]  cannot  find  symbol  reference  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.clone();    	non-compiled	[CE]  cannot  find  symbol  reference	42	None	replace
243	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeRef.clone();  [CE]  cannot  find  symbol  typeRef  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeRef.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeRef.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.clone();    	non-compiled	[CE]  cannot  find  symbol  typeRef	46	None	replace
244	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getObject();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getObject();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getObject();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.getType();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
245	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getTypeRegistry();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getTypeRegistry();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.getTypeRegistry();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.getType();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
246	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeRegistry;  [CE]  cannot  find  symbol  typeRegistry  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeRegistry;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeRegistry;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)type;    	non-compiled	[CE]  cannot  find  symbol  typeRegistry	9	None	replace
247	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeToken.nullSafe();  [CE]  cannot  find  symbol  typeToken  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeToken.nullSafe();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeToken.nullSafe();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)type;    	non-compiled	[CE]  cannot  find  symbol  typeToken	9	None	replace
248	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)constructor;  [CE]  cannot  find  symbol  constructor  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)constructor;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)constructor;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)type;    	non-compiled	[CE]  cannot  find  symbol  constructor	9	None	replace
249	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  gson).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  gson).construct();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  gson).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct();    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	55	None	replace
250	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.value;  [CE]  cannot  find  symbol  construct  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.value;    	non-compiled	[CE]  cannot  find  symbol  construct	24	None	replace
251	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.nullSafe();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.nullSafe();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.nullSafe();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  inconvertible  types	13	None	replace
252	[BUG]  [BUGGY]  static  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  static  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	static  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
253	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapterFactory.clone();  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapterFactory.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapterFactory.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.clone();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
254	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  annotation);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  annotation);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	53	None	replace
255	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  fieldType,  reference);  [CE]  cannot  find  symbol  reference  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  fieldType,  reference);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  fieldType,  reference);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  reference	53	None	replace
256	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  objectType);  [CE]  cannot  find  symbol  objectType  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  objectType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).create(gson,  objectType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  objectType	53	None	replace
257	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)object.clone();  [CE]  cannot  find  symbol  object  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)object.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)object.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value.clone();    	non-compiled	[CE]  cannot  find  symbol  object	7	None	replace
258	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)org.apache.commons.json.typeAdapterFactory;  [CE]  package  org.apache.commons  does  not  exist  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)org.apache.commons.json.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)org.apache.commons.json.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)gson.typeAdapterFactory;    	non-compiled	[CE]  package  org.apache.commons  does  not  exist	19	None	replace
259	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)object.getAnnotation();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)object.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)object.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
260	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)factory.getAnnotation();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)factory.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)factory.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
261	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)model.value;  [CE]  cannot  find  symbol  model  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)model.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)model.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)reference.value;    	non-compiled	[CE]  cannot  find  symbol  model	61	None	replace
262	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)getAnnotation();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)super.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
263	[BUG]  [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory)typeAdapter;  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory)typeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory)typeAdapter;	  Constructor    <    TypeAdapterFactory>    constructorConstructor    =(Constructor    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
264	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.newInstance();  [CE]  cannot  find  symbol  constructor  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructor.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.newInstance();    	non-compiled	[CE]  cannot  find  symbol  constructor	18	None	replace
265	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_typeAdapterFactory;  [CE]  cannot  find  symbol  _typeAdapterFactory  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)reference.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  _typeAdapterFactory	49	None	replace
266	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.getAnnotation();  [CE]  cannot  find  symbol  reference  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)this.value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol  reference	4	None	replace
267	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.getAnnotation(),  constructorConstructor;  [CE]  method  getAnnotation  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.getAnnotation(),  constructorConstructor;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.getAnnotation(),  constructorConstructor;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value.getAnnotation();    	non-compiled	[CE]  method  getAnnotation  in  class  Class<T>  cannot  be  applied  to  given  types;	1	None	replace
268	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_value.getAnnotation();  [CE]  cannot  find  symbol  _value  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_value.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_value.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol  _value	1	None	replace
269	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType.construct().create(gson,  annotation);  [CE]  ')'  expected  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType.construct().create(gson,  annotation);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType.construct().create(gson,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    annotation);    	non-compiled	[CE]  ')'  expected	30	None	replace
270	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  reference);  [CE]  cannot  find  symbol  reference  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  reference);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  reference);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    annotation);    	non-compiled	[CE]  cannot  find  symbol  reference	30	None	replace
271	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)reference.typeAdapterFactory;  [CE]  cannot  find  symbol  reference  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)reference.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)reference.typeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  reference	47	None	replace
272	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)construct.typeAdapterFactory;  [CE]  cannot  find  symbol  construct  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)construct.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)construct.typeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  construct	47	None	replace
273	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.typeAdapterFactory;  [CE]  cannot  find  symbol  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.typeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  type	47	None	replace
274	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)object.typeAdapterFactory;  [CE]  cannot  find  symbol  object  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)object.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)object.typeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  object	47	None	replace
275	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.getAnnotation();  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)typeAdapter.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.getAnnotation();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
276	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeId)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeId  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeId)).construct().create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeId)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(type)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeId	28	None	replace
277	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)class.typeAdapterFactory;  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)class.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)class.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.typeAdapterFactory;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
278	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory;  [CE]  variable  typeAdapterFactory  might  not  have  been  initialized  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory;	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  variable  typeAdapterFactory  might  not  have  been  initialized	38	None	replace
279	[BUG]  [BUGGY]  static  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  static  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	static  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
280	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)super.typeAdapter;  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)super.typeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)super.typeAdapter;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
281	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.getObject();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.getObject();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.getObject();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
282	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.getObject();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.getObject();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.getObject();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
283	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  this);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  this);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  this);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType));    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	29	None	replace
284	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)constructorConstructor;  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)constructorConstructor;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)constructorConstructor;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)fieldType;    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
285	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)objectTypeAdapterFactory;  [CE]  cannot  find  symbol  objectTypeAdapterFactory  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)objectTypeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)objectTypeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)genericTypeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  objectTypeAdapterFactory	22	None	replace
286	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericTypeAdapterFactory.newInstance();  [CE]  cannot  find  symbol  genericTypeAdapterFactory  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericTypeAdapterFactory.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genericTypeAdapterFactory.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)genericTypeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  genericTypeAdapterFactory	22	None	replace
287	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeReferenceFactory;  [CE]  cannot  find  symbol  typeReferenceFactory  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeReferenceFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeReferenceFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)this.fieldType;    	non-compiled	[CE]  cannot  find  symbol  typeReferenceFactory	10	None	replace
288	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)constructorConstructor;  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)constructorConstructor;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)constructorConstructor;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)this.fieldType;    	non-compiled	[CE]  inconvertible  types	10	None	replace
289	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructTypeAdapterFactory;  [CE]  cannot  find  symbol  constructTypeAdapterFactory  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructTypeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructTypeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldTypeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  constructTypeAdapterFactory	33	None	replace
290	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.newInstance();  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.newInstance();    	non-compiled	[CE]  incompatible  types	34	None	replace
291	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReference)).create(gson,  fieldType);  [CE]  cannot  find  symbol  typeReference  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReference)).create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReference)).create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeReference	54	None	replace
292	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.create(gson);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.create(gson);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapterFactory.create(gson);	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
293	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.value.clone();  [CE]  package  reference  does  not  exist  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)reference.value.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)this.value.clone();    	non-compiled	[CE]  package  reference  does  not  exist	45	None	replace
294	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_value.clone();  [CE]  cannot  find  symbol  _value  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_value.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)_value;    	non-compiled	[CE]  cannot  find  symbol  _value	65	None	replace
295	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getAnnotationIntrospector();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getAnnotationIntrospector();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getAnnotationIntrospector();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)getValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
296	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getRawValue();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getRawValue();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getRawValue();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)getValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
297	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getAnnotationConstructor();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getAnnotationConstructor();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getAnnotationConstructor();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)getValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
298	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation(),  fieldType,  constructorConstructor);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation(),  fieldType,  constructorConstructor);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation(),  fieldType,  constructorConstructor);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation(),    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
299	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.getAnnotation(),  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.getAnnotation(),  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)object.getAnnotation(),  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation(),    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
300	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.newInstance();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.newInstance();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)fieldType;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
301	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeToken.get(fieldType);  [CE]  cannot  find  symbol  typeToken  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeToken.get(fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeToken.get(fieldType);	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)fieldType;    	non-compiled	[CE]  cannot  find  symbol  typeToken	11	None	replace
302	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getObject();  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getObject();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)fieldType.getObject();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)fieldType;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
303	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeObject.getAnnotation();  [CE]  cannot  find  symbol  typeObject  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeObject.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeObject.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol  typeObject	2	None	replace
304	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeToken.getAnnotation();  [CE]  cannot  find  symbol  typeToken  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeToken.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeToken.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol  typeToken	2	None	replace
305	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeDescriptor.getAnnotation();  [CE]  cannot  find  symbol  typeDescriptor  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeDescriptor.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeDescriptor.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol  typeDescriptor	2	None	replace
306	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)buildorConstructor.invoke(null,  fieldType);  [CE]  cannot  find  symbol  buildorConstructor  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)buildorConstructor.invoke(null,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)buildorConstructor.invoke(null,  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.invoke(null,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  buildorConstructor	69	None	replace
307	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)structorConstructor.invoke(null,  fieldType);  [CE]  cannot  find  symbol  structorConstructor  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)structorConstructor.invoke(null,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)structorConstructor.invoke(null,  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.invoke(null,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	69	None	replace
308	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)factory.clone();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)factory.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)factory.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.clone();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
309	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructTypeAdapter;  [CE]  cannot  find  symbol  constructTypeAdapter  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructTypeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructTypeAdapter;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldTypeAdapter;    	non-compiled	[CE]  cannot  find  symbol  constructTypeAdapter	16	None	replace
310	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)objectTypeAdapter;  [CE]  cannot  find  symbol  objectTypeAdapter  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)objectTypeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)objectTypeAdapter;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldTypeAdapter;    	non-compiled	[CE]  cannot  find  symbol  objectTypeAdapter	16	None	replace
311	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)class.value;  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)class.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)class.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type.value;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
312	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)class;  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)class;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)class;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
313	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeToken;  [CE]  cannot  find  symbol  typeToken  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeToken;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeToken;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type;    	non-compiled	[CE]  cannot  find  symbol  typeToken	37	None	replace
314	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructType;  [CE]  cannot  find  symbol  constructType  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructType;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type;    	non-compiled	[CE]  cannot  find  symbol  constructType	37	None	replace
315	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.value;  [CE]  cannot  find  symbol  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)type.value;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)this.value;    	non-compiled	[CE]  cannot  find  symbol  type	12	None	replace
316	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)reference.value;  [CE]  cannot  find  symbol  reference  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)reference.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)reference.value;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)this.value;    	non-compiled	[CE]  cannot  find  symbol  reference	12	None	replace
317	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)objectType.typeAdapterFactory;  [CE]  cannot  find  symbol  objectType  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)objectType.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)objectType.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  objectType	20	None	replace
318	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.valueAdapterFactory;  [CE]  cannot  find  symbol  valueAdapterFactory  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.valueAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.valueAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  valueAdapterFactory	20	None	replace
319	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.resourceAdapterFactory;  [CE]  cannot  find  symbol  resourceAdapterFactory  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.resourceAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.resourceAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  resourceAdapterFactory	20	None	replace
320	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ')'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ')'  expected	26	None	replace
321	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  objectType);  [CE]  cannot  find  symbol  objectType  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  objectType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  objectType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  objectType	26	None	replace
322	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.invert();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.invert();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)typeAdapter.invert();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.invert();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
323	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invertType();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invertType();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invertType();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.invert();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
324	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  annotation,  typeAdapterFactory);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  annotation,  typeAdapterFactory);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  annotation,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    annotation);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	30	None	replace
325	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter.getAnnotation();  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	17	None	replace
326	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.resolve();  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.resolve();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.resolve();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
327	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)baseType;  [CE]  cannot  find  symbol  baseType  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)baseType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)baseType;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)type;    	non-compiled	[CE]  cannot  find  symbol  baseType	37	None	replace
328	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.newTypeAdapterFactory();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.newTypeAdapterFactory();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.newTypeAdapterFactory();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
329	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)_value.clone();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)_value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)_value.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.clone();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
330	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)_factory.clone();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)_factory.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)_factory.clone();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.clone();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
331	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)_value.clone();  [CE]  cannot  find  symbol  _value  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)_value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory)_value.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory)value.clone();    	non-compiled	[CE]  cannot  find  symbol  _value	58	None	replace
332	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.fieldTypeAdapterFactory;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.fieldTypeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.fieldTypeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldTypeAdapterFactory;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	33	None	replace
333	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)objectTypeAdapterFactory;  [CE]  cannot  find  symbol  objectTypeAdapterFactory  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)objectTypeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  fieldTypeAdapterFactory  =(Class  <  TypeAdapterFactory>)objectTypeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldTypeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  objectTypeAdapterFactory	33	None	replace
334	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.typeAdapterFactory;  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.typeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
335	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.newTypeAdapterFactory();  [CE]  cannot  find  symbol  construct  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.newTypeAdapterFactory();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.newTypeAdapterFactory();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)construct.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  construct	21	None	replace
336	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.resolveTypeAdapterFactory;  [CE]  cannot  find  symbol  construct  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.resolveTypeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)construct.resolveTypeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)construct.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  construct	21	None	replace
337	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)referenced.value;  [CE]  cannot  find  symbol  referenced  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)referenced.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)referenced.value;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)this.value;    	non-compiled	[CE]  cannot  find  symbol  referenced	12	None	replace
338	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_typeAdapterFactory;  [CE]  cannot  find  symbol  _typeAdapterFactory  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)_typeAdapterFactory;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)super.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  _typeAdapterFactory	47	None	replace
339	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.clone(),  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.clone(),  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.clone(),  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation(),    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
340	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value.getAnnotation(),  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value.getAnnotation(),  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value.getAnnotation(),  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.getAnnotation(),    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
341	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAccessor)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAccessor  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAccessor)).construct().create(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAccessor)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAccessor	27	None	replace
342	[BUG]  [BUGGY]  if(fieldType  instanceof  Class  <  TypeAdapterFactory>)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;  }  [CE]  illegal  generic  type  for  instanceof  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType  instanceof  Class  <  TypeAdapterFactory>)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;  }  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	if(fieldType  instanceof  Class  <  TypeAdapterFactory>)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;  }	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  illegal  generic  type  for  instanceof	38	None	replace
343	[BUG]  [BUGGY]  if(fieldType  instanceof  Class  <  TypeAdapterFactory>)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  generic  type  for  instanceof  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType  instanceof  Class  <  TypeAdapterFactory>)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	if(fieldType  instanceof  Class  <  TypeAdapterFactory>)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType;    	non-compiled	[CE]  illegal  generic  type  for  instanceof	38	None	replace
344	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapter  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter;  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapter  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  fieldTypeAdapter  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldTypeAdapter;    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	16	None	replace
345	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapter  =(Class  <  TypeAdapterFactory>)typeAdapter;  [CE]  inconvertible  types  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  fieldTypeAdapter  =(Class  <  TypeAdapterFactory>)typeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  fieldTypeAdapter  =(Class  <  TypeAdapterFactory>)typeAdapter;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldTypeAdapter;    	non-compiled	[CE]  inconvertible  types	16	None	replace
346	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapter.invert();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapter.invert();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapter.invert();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.invert();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	67	None	replace
347	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.invert();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.invert();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.invert();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.invert();    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	67	None	replace
348	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invert();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invert();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.invert();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.invert();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
349	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapter.clone();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapter.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapter.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.clone();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	14	None	replace
350	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.typeAdapter;  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.typeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.typeAdapter;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
351	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)classAdapter;  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)classAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)classAdapter;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
352	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_typeAdapterFactory.typeAdapterFactory;  [CE]  cannot  find  symbol  _typeAdapterFactory  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_typeAdapterFactory.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_typeAdapterFactory.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)object.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  _typeAdapterFactory	50	None	replace
353	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.getParent();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.getParent();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.getParent();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
354	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.create();  [CE]  method  create  in  interface  TypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.create();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.create();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)typeAdapterFactory;    	non-compiled	[CE]  method  create  in  interface  TypeAdapterFactory  cannot  be  applied  to  given  types;	25	None	replace
355	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.fieldType.clone();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.fieldType.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.fieldType.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.clone();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	41	None	replace
356	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)_value.getAnnotation();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)_value.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)_value.getAnnotation();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)value.getAnnotation();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
357	[BUG]  [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_value.clone();  [CE]  cannot  find  symbol  _value  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)_value.clone();	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  cannot  find  symbol  _value	43	None	replace
358	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).findTypeAdapter(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).findTypeAdapter(gson,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).findTypeAdapter(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	53	None	replace
359	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructorConstructor.invoke(null,  fieldType);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructorConstructor.invoke(null,  fieldType);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)constructorConstructor.invoke(null,  fieldType);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.invoke(null,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
360	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)referencedObject.value;  [CE]  cannot  find  symbol  referencedObject  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)referencedObject.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)referencedObject.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)referenced.value;    	non-compiled	[CE]  cannot  find  symbol  referencedObject	68	None	replace
361	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)_value.getAnnotation();  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)_value.getAnnotation();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)_value.getAnnotation();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory>)value.getAnnotation();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
362	[BUG]  [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory>)typeAdapter;  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory>)typeAdapter;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory>)typeAdapter;	  Constructor    <    TypeAdapterFactory>    constructorConstructor    =(Constructor    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
363	[BUG]  [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory>)typeAdapter.clone();  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory>)typeAdapter.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Constructor  <  TypeAdapterFactory>  constructorConstructor  =(TypeAdapterFactory>)typeAdapter.clone();	  Constructor    <    TypeAdapterFactory>    constructorConstructor    =(Constructor    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
364	[BUG]  [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)constructor;  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)constructor;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Constructor  <  TypeAdapterFactory>  constructorConstructor  =(Constructor  <  TypeAdapterFactory>)constructor;	  Constructor    <    TypeAdapterFactory>    constructorConstructor    =(Constructor    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
365	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapter.newInstance();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapter.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.typeAdapter.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.newInstance();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	18	None	replace
366	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.newInstance();  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.newInstance();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
367	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)classAdapter.newInstance();  [CE]  cannot  find  symbol  classAdapter  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)classAdapter.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)classAdapter.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.newInstance();    	non-compiled	[CE]  cannot  find  symbol  classAdapter	18	None	replace
368	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter.newInstance();  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapter.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter.newInstance();    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	18	None	replace
369	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)data.value;  [CE]  cannot  find  symbol  data  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)data.value;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)data.value;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)reference.value;    	non-compiled	[CE]  cannot  find  symbol  data	61	None	replace
370	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)_value.clone();  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)_value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(TypeAdapterFactory>)_value.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(TypeAdapterFactory>)value.clone();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
371	[BUG]  [BUGGY]  TypeAdapterFactory  fieldType  =(TypeAdapterFactory)fieldType;  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  fieldType  =(TypeAdapterFactory)fieldType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  fieldType  =(TypeAdapterFactory)fieldType;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)fieldType;    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	11	None	replace
372	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getKey();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getKey();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)getKey();	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)getValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
373	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this._value.clone();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this._value.clone();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this._value.clone();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)_value.clone();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	64	None	replace
374	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.fieldType;  [CE]  cannot  find  symbol  fieldType  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.fieldType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)typeAdapterFactory.fieldType;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactory)this.fieldType;    	non-compiled	[CE]  cannot  find  symbol  fieldType	10	None	replace
375	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genon.typeAdapterFactory;  [CE]  cannot  find  symbol  genon  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genon.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genon.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)gson.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  genon	19	None	replace
376	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genson.typeAdapterFactory;  [CE]  cannot  find  symbol  genson  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genson.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)genson.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)gson.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  genson	19	None	replace
377	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)org.apache.json.typeAdapterFactory;  [CE]  package  org.apache  does  not  exist  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)org.apache.json.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)org.apache.json.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)gson.typeAdapterFactory;    	non-compiled	[CE]  package  org.apache  does  not  exist	19	None	replace
378	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation(),  constructorConstructor);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation(),  constructorConstructor);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.getAnnotation(),  constructorConstructor);	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.getAnnotation();    	non-compiled	[CE]  ';'  expected	39	None	replace
379	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapterFactory.getType();  [CE]  cannot  find  symbol  fieldTypeAdapterFactory  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapterFactory.getType();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldTypeAdapterFactory.getType();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory.getType();    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapterFactory	36	None	replace
380	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  }  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  }  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	if(typeAdapter!=  null)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  }	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  inconvertible  types	13	None	replace
381	[BUG]  [BUGGY]  if(typeAdapter  ==  null)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  }  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  }  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	if(typeAdapter  ==  null)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  }	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  inconvertible  types	13	None	replace
382	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	if(typeAdapter!=  null)  {  final  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapter;    	non-compiled	[CE]  inconvertible  types	13	None	replace
383	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.newInstance();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.newInstance();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType.newInstance();	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)fieldType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
384	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)referenced.typeAdapterFactory;  [CE]  cannot  find  symbol  referenced  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)referenced.typeAdapterFactory;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)referenced.typeAdapterFactory;	  Class    <    TypeAdapterFactory>    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)this.typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol  referenced	63	None	replace
385	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)objectType;  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)objectType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)objectType;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)fieldType;    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
386	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.fieldType;  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.fieldType;  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactoryFactory)this.fieldType;	  TypeAdapterFactory    typeAdapterFactory    =(TypeAdapterFactoryFactory)fieldType;    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
387	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.create();  [CE]  method  create  in  interface  TypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.create();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.create();	  TypeAdapterFactory    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory;    	non-compiled	[CE]  method  create  in  interface  TypeAdapterFactory  cannot  be  applied  to  given  types;	35	None	replace
388	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.convert();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.convert();  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory.convert();	  TypeAdapterFactory    typeAdapterFactory    =(Class    <    TypeAdapterFactory>)typeAdapterFactory;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
389	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType,  typeAdapterFactory);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType,  typeAdapterFactory);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	26	None	replace
390	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType,  reference);  [CE]  cannot  find  symbol  reference  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType,  reference);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType,  reference);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  reference	26	None	replace
391	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType,  typeAdapter);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType,  typeAdapter);  [BUGGY]      typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType,  typeAdapter);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	26	None	replace
