bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	1	None	replace
2	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  context);  [CE]  cannot  find  symbol  context  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  context);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  context);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  context	1	None	replace
3	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	1	None	replace
4	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  NAME  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  NAME	1	None	replace
5	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	6	None	replace
6	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  +  1);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  +  1);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  +  1);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	6	None	replace
7	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType));  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType));  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	6	None	replace
8	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  annotation);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  annotation);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	6	None	replace
9	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType));  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType));  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	6	None	replace
10	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	9	None	replace
11	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	9	None	replace
13	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  	9	None	replace
14	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	9	None	replace
15	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  SETPROP  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	8	None	replace
16	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  STRING  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  STRING	8	None	replace
17	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	8	None	replace
18	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.OBJECTLIT).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  OBJECTLIT  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.OBJECTLIT).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.OBJECTLIT).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  OBJECTLIT	8	None	replace
19	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.getTypeToken();  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.getTypeToken();  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  annotation.getTypeToken();	      	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	replace
20	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(gson,  fieldType);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
21	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType);	      	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	replace
22	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken();  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken();  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  getTypeToken();	      	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	replace
23	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(gson);  [CE]  cannot  find  symbol  [FE]                            NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor(gson);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(gson);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
24	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException    [CONTEXT]      [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(gson);	      	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	replace
25	[BUG]  [BUGGY]  typeAdapter  =  annotation.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                                NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  annotation.getTypeAdapter();  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  annotation.getTypeAdapter();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
26	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_OBJECT  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_OBJECT	5	None	replace
27	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECTLIT).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_OBJECTLIT  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECTLIT).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECTLIT).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_OBJECTLIT	5	None	replace
28	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_STRING).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_STRING  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_STRING).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_STRING).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_STRING	5	None	replace
29	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_NAME  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_NAME	5	None	replace
30	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_OBJECT  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT,  fieldType).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_OBJECT	5	None	replace
31	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	11	None	replace
32	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	11	None	replace
33	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
34	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  	3	None	replace
35	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  	3	None	replace
36	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
37	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
38	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	4	None	replace
39	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  NAME  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  NAME	4	None	replace
40	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  SETPROP  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	4	None	replace
41	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  STRING  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  STRING	4	None	replace
42	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	4	None	replace
43	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    typeAdapterFactory).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	2	None	replace
44	[BUG]  [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.FIELD_NAME,  constructorConstructor).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.FIELD_NAME,  constructorConstructor).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  typeAdapterFactory.get(TypeToken.FIELD_NAME,  constructorConstructor).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    typeAdapterFactory).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	2	None	replace
45	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapter);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapter);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapter);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    typeAdapterFactory).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	2	None	replace
46	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    typeAdapterFactory).construct().create(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	2	None	replace
47	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    typeAdapterFactory).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	2	None	replace
48	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    typeAdapterFactory).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	2	None	replace
49	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	12	None	replace
50	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	12	None	replace
51	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	12	None	replace
52	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  NAME  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  NAME	12	None	replace
53	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  SETPROP  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	10	None	replace
54	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  STRING  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  STRING	10	None	replace
55	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE	10	None	replace
56	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  START_OBJECT  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	4	None	replace
57	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  EMPTY  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	4	None	replace
58	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  EMPTY  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	8	None	replace
59	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  EXPR_TYPE  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  EXPR_TYPE	8	None	replace
60	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	12	None	replace
61	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  START_OBJECT  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	1	None	replace
62	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    	non-compiled	[CE]  	11	None	replace
63	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType);	      	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	replace
64	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  constructorConstructor(gson);	      	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	replace
65	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapter(fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  getTypeAdapter(fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapter(fieldType);	      	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
66	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  START_OBJECT  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	10	None	replace
67	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	9	None	replace
68	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	6	None	replace
69	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  1;  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  1;  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  1;	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	6	None	replace
70	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	8	None	replace
71	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  ASSIGN  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  ASSIGN	8	None	replace
72	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	4	None	replace
73	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	1	None	replace
74	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FOR  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FOR	1	None	replace
75	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
76	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
77	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
78	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.getTypeAdapter();  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.getTypeAdapter();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
79	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  FIELD_NAME  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	11	None	replace
80	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	9	None	replace
81	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	10	None	replace
82	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ALIASING).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_ALIASING  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ALIASING).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ALIASING).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_ALIASING	5	None	replace
83	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY),  fieldType.construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	5	None	replace
84	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ATTRIBUTE).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_ATTRIBUTE  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ATTRIBUTE).construct().create(gson,  fieldType);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ATTRIBUTE).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_ATTRIBUTE	5	None	replace
85	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	6	None	replace
86	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR);  [CE]  cannot  find  symbol  FOR  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR);  [BUGGY]    .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FOR);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FOR	6	None	replace
