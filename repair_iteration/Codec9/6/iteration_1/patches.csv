bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    >>    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	26	None	replace
2	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    >>    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	26	None	replace
3	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    >>    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	26	None	replace
4	[BUG]  [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  ==  STANDARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  ==  STANDARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  ==  STANDARD_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
5	[BUG]  [BUGGY]  if(modulus!=  STANDARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  STANDARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  STANDARD_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
6	[BUG]  [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module!=  STANDARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module!=  STANDARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module!=  STANDARD_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
7	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  ==  URL_SAFE_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  ==  URL_SAFE_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  ==  URL_SAFE_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
8	[BUG]  [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  modulus  ==  STANDARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  modulus  ==  STANDARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  modulus  ==  STANDARD_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
9	[BUG]  [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  >=  STANDARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  >=  STANDARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  >=  STANDARD_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
10	[BUG]  [BUGGY]  if(modulus!=  URL_SAFE_ENCODE_TABLE  ||  module  ==  STANDARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  URL_SAFE_ENCODE_TABLE  ||  module  ==  STANDARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  URL_SAFE_ENCODE_TABLE  ||  module  ==  STANDARD_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
11	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
12	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
13	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
14	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
15	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
16	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
17	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
18	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
19	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
20	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
21	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
22	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
23	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
24	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	20	None	replace
25	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	20	None	replace
26	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
27	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
28	[BUG]  [BUGGY]  if(modulus!=  Base64.UNKNOWN)  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  Base64.UNKNOWN)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  Base64.UNKNOWN)  {	  if(modulus    ==    Base64.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
29	[BUG]  [BUGGY]  if(modulus  ==  Base64.INVALID)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.INVALID)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.INVALID)  {	  if(modulus    ==    Base64.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
30	[BUG]  [BUGGY]  if(modulus  ==  Base64.UNINITIALIZED)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.UNINITIALIZED)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.UNINITIALIZED)  {	  if(modulus    ==    Base64.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
31	[BUG]  [BUGGY]  if(modulus  ==  Base64.NONE)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.NONE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.NONE)  {	  if(modulus    ==    Base64.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
32	[BUG]  [BUGGY]  if(modulus  ==  Base64.UNIKNOWN)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.UNIKNOWN)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.UNIKNOWN)  {	  if(modulus    ==    Base64.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
33	[BUG]  [BUGGY]  if(modulus  ==  Base64.NULL)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.NULL)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.NULL)  {	  if(modulus    ==    Base64.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
34	[BUG]  [BUGGY]  if(modulus  ==  Base64.UNINITIALIZED_BACKSLASH)  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.UNINITIALIZED_BACKSLASH)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.UNINITIALIZED_BACKSLASH)  {	  if(modulus    ==    Base64.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
35	[BUG]  [BUGGY]  if(inAvail  >  0)  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(inAvail  >  0)  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
36	[BUG]  [BUGGY]  if(!inAvail)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(!inAvail)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(!inAvail)  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
37	[BUG]  [BUGGY]  if(inAvail  >=  0)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >=  0)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(inAvail  >=  0)  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
38	[BUG]  [BUGGY]  if(inAvail  <  0)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  0)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(inAvail  <  0)  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
39	[BUG]  [BUGGY]  if(inPos  >  0)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(inPos  >  0)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(inPos  >  0)  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
40	[BUG]  [BUGGY]  if(eof)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(eof)  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
41	[BUG]  [BUGGY]  if(!eof)  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(!eof)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(!eof)  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
42	[BUG]  [BUGGY]  if(inAvail  ==  0)  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(inAvail  ==  0)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(inAvail  ==  0)  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
43	[BUG]  [BUGGY]  if(inAvail  >>  0)  {  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >>  0)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(inAvail  >>  0)  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
44	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
45	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_8BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
46	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
47	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
48	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
49	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    >>    4)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	24	None	replace
50	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    >>    4)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	24	None	replace
51	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    >>    4)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	24	None	replace
52	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    >>    4)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	24	None	replace
53	[BUG]  [BUGGY]  if(modulus!=  Base64Module.UNKNOWN)  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  Base64Module.UNKNOWN)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  Base64Module.UNKNOWN)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
54	[BUG]  [BUGGY]  if(modulus  ==  BasicModule.UNKNOWN)  {  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  BasicModule.UNKNOWN)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  BasicModule.UNKNOWN)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
55	[BUG]  [BUGGY]  if(modulus  >=  Base64Module.UNKNOWN)  {  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  >=  Base64Module.UNKNOWN)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  >=  Base64Module.UNKNOWN)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
56	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.UPDATE)  {  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.UPDATE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.UPDATE)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
57	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module  ==  Base64Module.UNKNOWN)  {  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module  ==  Base64Module.UNKNOWN)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.UNKNOWN  ||  module  ==  Base64Module.UNKNOWN)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
58	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module  ==  System.currentTimeMillis())  {  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module  ==  System.currentTimeMillis())  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.UNKNOWN  ||  module  ==  System.currentTimeMillis())  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
59	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.NONE)  {  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.NONE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.NONE)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
60	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
61	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
62	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
63	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
64	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
65	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
66	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
67	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
68	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
69	[BUG]  [BUGGY]  if(modulus  ==  Base64.POSITIVE_INFINITY)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.POSITIVE_INFINITY)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.POSITIVE_INFINITY)  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
70	[BUG]  [BUGGY]  if(modulus  ==  Base64.POSITIVE_INFINITY  ||  module  ==  Base64.VAR)  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.POSITIVE_INFINITY  ||  module  ==  Base64.VAR)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.POSITIVE_INFINITY  ||  module  ==  Base64.VAR)  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
71	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  ||  module!=  0)  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  ||  module!=  0)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  ||  module!=  0)  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
72	[BUG]  [BUGGY]  if(modulus  ==  Base64.POSITIVE_INFINITY  ||  module!=  Base64.VAR)  {  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.POSITIVE_INFINITY  ||  module!=  Base64.VAR)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.POSITIVE_INFINITY  ||  module!=  Base64.VAR)  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
73	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  ||  modulus  ==  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  ||  modulus  ==  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  ||  modulus  ==  Base64.DEFAULT)  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
74	[BUG]  [BUGGY]  if(modulus!=  Base64.VAR)  {  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  Base64.VAR)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  Base64.VAR)  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
75	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_8BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    >>    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	22	None	replace
76	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    >>    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	22	None	replace
77	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
78	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
79	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
80	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
81	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
82	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_DEFAULT)  {  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_DEFAULT)  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
83	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_INT  ||  module  ==  Base64.US_ASCII)  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_INT  ||  module  ==  Base64.US_ASCII)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_INT  ||  module  ==  Base64.US_ASCII)  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
84	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_DECEMBER)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_DECEMBER)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_DECEMBER)  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
85	[BUG]  [BUGGY]  if(modulus!=  Base64.US_ASCII)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  Base64.US_ASCII)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  Base64.US_ASCII)  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
86	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_HARD)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_HARD)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_HARD)  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
87	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_OBJECT)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_OBJECT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_OBJECT)  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
88	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  module!=  System.currentTimeMillis())  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  module!=  System.currentTimeMillis())  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_ASCII  ||  module!=  System.currentTimeMillis())  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
89	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  module!=  0)  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  module!=  0)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_ASCII  ||  module!=  0)  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
90	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
91	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
92	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
93	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
94	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
95	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
96	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    >>    12)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	21	None	replace
97	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    >>    12)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	21	None	replace
98	[BUG]  [BUGGY]  if(modulus!=  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  Base64.DEFAULT)  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
99	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_BUFFER_RESIZE_FACTOR)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_BUFFER_RESIZE_FACTOR)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_BUFFER_RESIZE_FACTOR)  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
100	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_BUFFER_RESIZE_FACTOR  ||  module  ==  Base64.DEFAULT_BUFFER_SIZE)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_BUFFER_RESIZE_FACTOR  ||  module  ==  Base64.DEFAULT_BUFFER_SIZE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_BUFFER_RESIZE_FACTOR  ||  module  ==  Base64.DEFAULT_BUFFER_SIZE)  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
101	[BUG]  [BUGGY]  if(modulus  ==  Base64.INTEGER  ||  module  ==  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.INTEGER  ||  module  ==  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.INTEGER  ||  module  ==  Base64.DEFAULT)  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
102	[BUG]  [BUGGY]  if(modulus  ==  Base64.BASE64  ||  module  ==  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.BASE64  ||  module  ==  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.BASE64  ||  module  ==  Base64.DEFAULT)  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
103	[BUG]  [BUGGY]  if(modulus  ==  Base64.VERSION_CODES[0]  ||  module  ==  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VERSION_CODES[0]  ||  module  ==  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VERSION_CODES[0]  ||  module  ==  Base64.DEFAULT)  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
104	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_BUFFER_RESIZE_FACTOR  ||  module  ==  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_BUFFER_RESIZE_FACTOR  ||  module  ==  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_BUFFER_RESIZE_FACTOR  ||  module  ==  Base64.DEFAULT)  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
105	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_BUFFER_RESIZE_FACTOR  ||  modulus  ==  Base64.DEFAULT_BUFFER_SIZE)  {  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_BUFFER_RESIZE_FACTOR  ||  modulus  ==  Base64.DEFAULT_BUFFER_SIZE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_BUFFER_RESIZE_FACTOR  ||  modulus  ==  Base64.DEFAULT_BUFFER_SIZE)  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
106	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
107	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
108	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
109	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
110	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
111	[BUG]  [BUGGY]  if(modulus  ==  Base64.STANDARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.STANDARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.STANDARD_ENCODE_TABLE)  {	  if(modulus    ==    Base64.DECODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
112	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_CAPACITY  ||  module  ==  Base64.DECODE_TABLE)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_CAPACITY  ||  module  ==  Base64.DECODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_CAPACITY  ||  module  ==  Base64.DECODE_TABLE)  {	  if(modulus    ==    Base64.DECODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
113	[BUG]  [BUGGY]  if(modulus  ==  Base64.STANDARD_ENCODE_TABLE  ||  module  ==  Base64.DECODE_TABLE)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.STANDARD_ENCODE_TABLE  ||  module  ==  Base64.DECODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.STANDARD_ENCODE_TABLE  ||  module  ==  Base64.DECODE_TABLE)  {	  if(modulus    ==    Base64.DECODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
114	[BUG]  [BUGGY]  if(modulus  ==  Base64.DECODE_TABLE  ||  module  ==  Base64.HARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DECODE_TABLE  ||  module  ==  Base64.HARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DECODE_TABLE  ||  module  ==  Base64.HARD_ENCODE_TABLE)  {	  if(modulus    ==    Base64.DECODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
115	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_CAPACITY)  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_CAPACITY)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_CAPACITY)  {	  if(modulus    ==    Base64.DECODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
116	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_PREFIX)  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_PREFIX)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_PREFIX)  {	  if(modulus    ==    Base64.DECODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
117	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	42	None	replace
118	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	42	None	replace
119	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	42	None	replace
120	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	42	None	replace
121	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	42	None	replace
122	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	42	None	replace
123	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	42	None	replace
124	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	42	None	replace
125	[BUG]  [BUGGY]  if(modulus  ==  Base64.VERSION_CODES[0]  ||  module  ==  Base64.VERSION_CODES[1])  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VERSION_CODES[0]  ||  module  ==  Base64.VERSION_CODES[1])  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VERSION_CODES[0]  ||  module  ==  Base64.VERSION_CODES[1])  {	  if(modulus    ==    Base64.encodeBase64())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
126	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_CAPACITY  ||  module  ==  Base64.DEFAULT_CAPACITY)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_CAPACITY  ||  module  ==  Base64.DEFAULT_CAPACITY)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_CAPACITY  ||  module  ==  Base64.DEFAULT_CAPACITY)  {	  if(modulus    ==    Base64.encodeBase64())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
127	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_CAPACITY  ||  module  ==  Base64.encodeBase64())  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_CAPACITY  ||  module  ==  Base64.encodeBase64())  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_CAPACITY  ||  module  ==  Base64.encodeBase64())  {	  if(modulus    ==    Base64.encodeBase64())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
128	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_PREFIX  ||  module  ==  Base64.DEFAULT_PREFIX)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_PREFIX  ||  module  ==  Base64.DEFAULT_PREFIX)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_PREFIX  ||  module  ==  Base64.DEFAULT_PREFIX)  {	  if(modulus    ==    Base64.encodeBase64())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
129	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_PAD)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_PAD)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_PAD)  {	  if(modulus    ==    Base64.encodeBase64())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
130	[BUG]  [BUGGY]  if(modulus  ==  Base64.POSITIVE_INFINITY  ||  module  ==  Base64.BASE64)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.POSITIVE_INFINITY  ||  module  ==  Base64.BASE64)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.POSITIVE_INFINITY  ||  module  ==  Base64.BASE64)  {	  if(modulus    ==    Base64.BASE64)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
131	[BUG]  [BUGGY]  if(modulus  ==  Base64.INTEGER)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.INTEGER)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.INTEGER)  {	  if(modulus    ==    Base64.BASE64)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
132	[BUG]  [BUGGY]  if(modulus  ==  Base64.UNINITIALIZED_BASE64)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.UNINITIALIZED_BASE64)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.UNINITIALIZED_BASE64)  {	  if(modulus    ==    Base64.BASE64)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
133	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_8BITS];  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	1	None	replace
134	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {	  if(modulus    ==    STANDARD_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
135	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  ==  STANDARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  ==  STANDARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  ==  STANDARD_ENCODE_TABLE)  {	  if(modulus    ==    STANDARD_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
136	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module!=  STANDARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module!=  STANDARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module!=  STANDARD_ENCODE_TABLE)  {	  if(modulus    ==    STANDARD_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
137	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  modulus  ==  STANDARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  modulus  ==  STANDARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE  ||  modulus  ==  STANDARD_ENCODE_TABLE)  {	  if(modulus    ==    STANDARD_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
138	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  >=  STANDARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  >=  STANDARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  >=  STANDARD_ENCODE_TABLE)  {	  if(modulus    ==    STANDARD_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
139	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  ==  DECODE_TABLE)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  ==  DECODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  ==  DECODE_TABLE)  {	  if(modulus    ==    STANDARD_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
140	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module!=  DECODE_TABLE)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module!=  DECODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module!=  DECODE_TABLE)  {	  if(modulus    ==    STANDARD_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
141	[BUG]  [BUGGY]  if(modulus!=  Base64.EMPTY)  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  Base64.EMPTY)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  Base64.EMPTY)  {	  if(modulus    ==    Base64.EMPTY)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
142	[BUG]  [BUGGY]  if(modulus  ==  Base64.POSITIVE_INFINITY  ||  module  ==  Base64.EMPTY)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.POSITIVE_INFINITY  ||  module  ==  Base64.EMPTY)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.POSITIVE_INFINITY  ||  module  ==  Base64.EMPTY)  {	  if(modulus    ==    Base64.EMPTY)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
143	[BUG]  [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  module!=  System.arraycopy(x,  0,  buffer,  pos))  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  module!=  System.arraycopy(x,  0,  buffer,  pos))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.EMPTY  ||  module!=  System.arraycopy(x,  0,  buffer,  pos))  {	  if(modulus    ==    Base64.EMPTY)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
144	[BUG]  [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  module  ==  System.arraycopy(x,  0,  buffer,  pos))  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  module  ==  System.arraycopy(x,  0,  buffer,  pos))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.EMPTY  ||  module  ==  System.arraycopy(x,  0,  buffer,  pos))  {	  if(modulus    ==    Base64.EMPTY)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
145	[BUG]  [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  module!=  System.arraycopy(x,  0,  buffer,  pos  +  1))  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  module!=  System.arraycopy(x,  0,  buffer,  pos  +  1))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.EMPTY  ||  module!=  System.arraycopy(x,  0,  buffer,  pos  +  1))  {	  if(modulus    ==    Base64.EMPTY)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
146	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT  ||  module  ==  Base64.UTF8)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT  ||  module  ==  Base64.UTF8)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT  ||  module  ==  Base64.UTF8)  {	  if(modulus    ==    Base64.UTF8)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
147	[BUG]  [BUGGY]  if(modulus  ==  Base64.BASE64  ||  module  ==  Base64.UTF8)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.BASE64  ||  module  ==  Base64.UTF8)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.BASE64  ||  module  ==  Base64.UTF8)  {	  if(modulus    ==    Base64.UTF8)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
148	[BUG]  [BUGGY]  if(modulus  ==  Base64.INTEGER  ||  module  ==  Base64.UTF8)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.INTEGER  ||  module  ==  Base64.UTF8)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.INTEGER  ||  module  ==  Base64.UTF8)  {	  if(modulus    ==    Base64.UTF8)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
149	[BUG]  [BUGGY]  if(modulus!=  Base64.UTF8)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  Base64.UTF8)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  Base64.UTF8)  {	  if(modulus    ==    Base64.UTF8)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
150	[BUG]  [BUGGY]  if(modulus  ==  Base64.BASE64_VALUE)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.BASE64_VALUE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.BASE64_VALUE)  {	  if(modulus    ==    Base64.UTF8)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
151	[BUG]  [BUGGY]  if(modulus  ==  Base64.NEGATIVE)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.NEGATIVE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.NEGATIVE)  {	  if(modulus    ==    Base64.WRITE)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
152	[BUG]  [BUGGY]  if(modulus  ==  Base64.INT  ||  module  ==  Base64.WRITE)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.INT  ||  module  ==  Base64.WRITE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.INT  ||  module  ==  Base64.WRITE)  {	  if(modulus    ==    Base64.WRITE)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
153	[BUG]  [BUGGY]  if(modulus  ==  Base64.INT  ||  module!=  Base64.WRITE)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.INT  ||  module!=  Base64.WRITE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.INT  ||  module!=  Base64.WRITE)  {	  if(modulus    ==    Base64.WRITE)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
154	[BUG]  [BUGGY]  if(modulus  ==  Base64.START)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.START)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.START)  {	  if(modulus    ==    Base64.WRITE)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
155	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
156	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
157	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
158	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
159	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
160	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
161	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
162	[BUG]  [BUGGY]  if(buffer!=  null)  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer!=  null)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer!=  null)  {	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
163	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  2)  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  2)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer  ==  null  ||  buffer.length  <  2)  {	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
164	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer  ==  null  ||  buffer.length  >  0)  {	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
165	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2)  {  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer!=  null  ||  buffer.length  <  2)  {	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
166	[BUG]  [BUGGY]  if(b!=  null)  {  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(b!=  null)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(b!=  null)  {	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
167	[BUG]  [BUGGY]  if(b  ==  null  ||  buffer.length  <  2)  {  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(b  ==  null  ||  buffer.length  <  2)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(b  ==  null  ||  buffer.length  <  2)  {	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
168	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  2)  {  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  2)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer  ==  null  ||  buffer.length!=  2)  {	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
169	[BUG]  [BUGGY]  if(buffer[pos++]  ==  PAD)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer[pos++]  ==  PAD)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer[pos++]  ==  PAD)  {	  if(buffer    ==    null)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
170	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer!=  null  ||  buffer.length  >  0)  {	  if(buffer    ==    null)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
171	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  4)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  4)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer!=  null  ||  buffer.length  >  4)  {	  if(buffer    ==    null)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
172	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  4)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  4)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer  ==  null  ||  buffer.length  >  4)  {	  if(buffer    ==    null)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
173	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_7BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_7BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_7BITS];	      buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
174	[BUG]  [BUGGY]  if(modulus!=  Base64Module.DEFAULT)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  Base64Module.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  Base64Module.DEFAULT)  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
175	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT_BUFFER_RESIZE_FACTOR)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT_BUFFER_RESIZE_FACTOR)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT_BUFFER_RESIZE_FACTOR)  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
176	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  module  ==  Base64Module.DEFAULT)  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  module  ==  Base64Module.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT  ||  module  ==  Base64Module.DEFAULT)  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
177	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  modulus  ==  Base64Module.DEFAULT)  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  modulus  ==  Base64Module.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT  ||  modulus  ==  Base64Module.DEFAULT)  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
178	[BUG]  [BUGGY]  if(modulus  ==  BasicModule.DEFAULT)  {  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  BasicModule.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  BasicModule.DEFAULT)  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
179	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  module  ==  BasicModule.DEFAULT)  {  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  module  ==  BasicModule.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT  ||  module  ==  BasicModule.DEFAULT)  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
180	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  module!=  Base64Module.DEFAULT)  {  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  module!=  Base64Module.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT  ||  module!=  Base64Module.DEFAULT)  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
181	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  module!=  BasicModule.DEFAULT)  {  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  module!=  BasicModule.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT  ||  module!=  BasicModule.DEFAULT)  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
182	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	23	None	replace
183	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	27	None	replace
184	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	27	None	replace
185	[BUG]  [BUGGY]  if(modulus  ==  Base64.ID)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.ID)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.ID)  {	  if(modulus    ==    Base64.UTF8)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
186	[BUG]  [BUGGY]  if(modulus  ==  Base64.BASE64  ||  moduleus  ==  Base64.US_ASCII)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.BASE64  ||  moduleus  ==  Base64.US_ASCII)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.BASE64  ||  moduleus  ==  Base64.US_ASCII)  {	  if(modulus    ==    Base64.BASE64)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
187	[BUG]  [BUGGY]  if(modulus  ==  Base64.SOURCENAME)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.SOURCENAME)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.SOURCENAME)  {	  if(modulus    ==    Base64.BASE64)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
188	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_BUFFER_SIZE)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_BUFFER_SIZE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_BUFFER_SIZE)  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
189	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT  ||  moduleUS  ==  Base64.VERSION_CODES[0])  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT  ||  moduleUS  ==  Base64.VERSION_CODES[0])  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT  ||  moduleUS  ==  Base64.VERSION_CODES[0])  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
190	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT  ||  moduleUS  ==  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT  ||  moduleUS  ==  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT  ||  moduleUS  ==  Base64.DEFAULT)  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
191	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT  ||  moduleUS  ==  Base64.SOURCENAME)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT  ||  moduleUS  ==  Base64.SOURCENAME)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT  ||  moduleUS  ==  Base64.SOURCENAME)  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
192	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT  ||  moduleum  ==  Base64.VERSION_CODES[0])  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT  ||  moduleum  ==  Base64.VERSION_CODES[0])  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT  ||  moduleum  ==  Base64.VERSION_CODES[0])  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
193	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
194	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  6)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  ==  6)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
195	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
196	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
197	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
198	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
199	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
200	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_OPTIONAL_SIZE  ||  module  ==  Base64.DEFAULT_OPTIONAL_SIZE)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_OPTIONAL_SIZE  ||  module  ==  Base64.DEFAULT_OPTIONAL_SIZE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_OPTIONAL_SIZE  ||  module  ==  Base64.DEFAULT_OPTIONAL_SIZE)  {	  if(modulus    ==    Base64.encodeBase64())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
201	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_PARAMETER_SIZE  ||  module  ==  Base64.DEFAULT_PARAMETER_SIZE)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_PARAMETER_SIZE  ||  module  ==  Base64.DEFAULT_PARAMETER_SIZE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_PARAMETER_SIZE  ||  module  ==  Base64.DEFAULT_PARAMETER_SIZE)  {	  if(modulus    ==    Base64.encodeBase64())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
202	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_PREFIX  ||  module!=  Base64.DEFAULT_PREFIX)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_PREFIX  ||  module!=  Base64.DEFAULT_PREFIX)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_PREFIX  ||  module!=  Base64.DEFAULT_PREFIX)  {	  if(modulus    ==    Base64.encodeBase64())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
203	[BUG]  [BUGGY]  if(modulus  ==  Base64.INHERITED)  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.INHERITED)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.INHERITED)  {	  if(modulus    ==    Base64.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
204	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
205	[BUG]  [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  moduleum  ==  Base64.WHOLE_COLLECTION)  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  moduleum  ==  Base64.WHOLE_COLLECTION)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.EMPTY  ||  moduleum  ==  Base64.WHOLE_COLLECTION)  {	  if(modulus    ==    Base64.EMPTY)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
206	[BUG]  [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  moduleum  ==  Base64.US_ASCII)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  moduleum  ==  Base64.US_ASCII)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.EMPTY  ||  moduleum  ==  Base64.US_ASCII)  {	  if(modulus    ==    Base64.EMPTY)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
207	[BUG]  [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  moduleUS  ==  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  moduleUS  ==  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.EMPTY  ||  moduleUS  ==  Base64.DEFAULT)  {	  if(modulus    ==    Base64.EMPTY)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
208	[BUG]  [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  moduleUS  ==  Base64.VAR)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  moduleUS  ==  Base64.VAR)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.EMPTY  ||  moduleUS  ==  Base64.VAR)  {	  if(modulus    ==    Base64.EMPTY)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
209	[BUG]  [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  modulus  ==  Base64.US_ASCII)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.EMPTY  ||  modulus  ==  Base64.US_ASCII)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.EMPTY  ||  modulus  ==  Base64.US_ASCII)  {	  if(modulus    ==    Base64.EMPTY)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
210	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	23	None	replace
211	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  moduleum  ==  Base64Module.US_ASCII)  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  moduleum  ==  Base64Module.US_ASCII)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.UNKNOWN  ||  moduleum  ==  Base64Module.US_ASCII)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
212	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  moduleUS  ==  Base64Module.US_ASCII)  {  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  moduleUS  ==  Base64Module.US_ASCII)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.UNKNOWN  ||  moduleUS  ==  Base64Module.US_ASCII)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
213	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  moduleum  ==  Base64Module.SCRIPT)  {  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  moduleum  ==  Base64Module.SCRIPT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.UNKNOWN  ||  moduleum  ==  Base64Module.SCRIPT)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
214	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.OPTIONAL_ARRAY  ||  module!=  Base64Module.UNKNOWN)  {  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.OPTIONAL_ARRAY  ||  module!=  Base64Module.UNKNOWN)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.OPTIONAL_ARRAY  ||  module!=  Base64Module.UNKNOWN)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
215	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.OPTIONAL_ARRAY  ||  module  ==  Base64Module.UNKNOWN)  {  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.OPTIONAL_ARRAY  ||  module  ==  Base64Module.UNKNOWN)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.OPTIONAL_ARRAY  ||  module  ==  Base64Module.UNKNOWN)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
216	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.UPPER)  {  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.UPPER)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.UPPER)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
217	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.US_ASCII)  {  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.US_ASCII)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.US_ASCII)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
218	[BUG]  [BUGGY]  if(modulus  ==  HANDARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  HANDARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  HANDARD_ENCODE_TABLE)  {	  if(modulus    ==    STANDARD_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
219	[BUG]  [BUGGY]  if(modulus  ==  CHUNK_SEPARATOR)  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  CHUNK_SEPARATOR)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  CHUNK_SEPARATOR)  {	  if(modulus    ==    STANDARD_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
220	[BUG]  [BUGGY]  if(modulus  ==  HOUR_SEPARATOR)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  HOUR_SEPARATOR)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  HOUR_SEPARATOR)  {	  if(modulus    ==    STANDARD_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
221	[BUG]  [BUGGY]  if(modulus  ==  TABLE)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  TABLE)  {	  if(modulus    ==    STANDARD_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
222	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
223	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
224	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
225	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
226	[BUG]  [BUGGY]  if(modulus  ==  Base64.START_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.START_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.START_ENCODE_TABLE)  {	  if(modulus    ==    Base64.DECODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
227	[BUG]  [BUGGY]  if(modulus  ==  Base64.UNINITIALIZED_CHUNK)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.UNINITIALIZED_CHUNK)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.UNINITIALIZED_CHUNK)  {	  if(modulus    ==    Base64.DECODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
228	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  2)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  2)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	6	None	replace
229	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
230	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
231	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
232	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
233	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
234	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
235	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	1	None	replace
236	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer  ==  null  ||  buffer.length  <  0)  {	  if(buffer    ==    null)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
237	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
238	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  moduleHelper.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  moduleHelper.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_ASCII  ||  moduleHelper.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
239	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_OPTIONAL_SIZE)  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_OPTIONAL_SIZE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_OPTIONAL_SIZE)  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
240	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  moduleum  ==  Base64.US_ASCII)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  moduleum  ==  Base64.US_ASCII)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_ASCII  ||  moduleum  ==  Base64.US_ASCII)  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
241	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  module  dépends[0])  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  module  dépends[0])  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_ASCII  ||  module  dépends[0])  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
242	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  moduleus  ==  Base64.VERSION_CODES[0])  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  moduleus  ==  Base64.VERSION_CODES[0])  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_ASCII  ||  moduleus  ==  Base64.VERSION_CODES[0])  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
243	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  7)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  7)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  7)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	42	None	replace
244	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
245	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
246	[BUG]  [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  >  URL_SAFE_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  >  URL_SAFE_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  >  URL_SAFE_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
247	[BUG]  [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  pretul  ==  URL_SAFE_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  pretul  ==  URL_SAFE_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  pretul  ==  URL_SAFE_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
248	[BUG]  [BUGGY]  if(modulus!=  URL_SAFE_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  URL_SAFE_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  URL_SAFE_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
249	[BUG]  [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  modulus  ==  URL_SAFE_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  modulus  ==  URL_SAFE_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  modulus  ==  URL_SAFE_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
250	[BUG]  [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  moduleum  ==  URL_SAFE_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  moduleum  ==  URL_SAFE_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  moduleum  ==  URL_SAFE_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
251	[BUG]  [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  moduleUS  ==  URL_SAFE_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  moduleUS  ==  URL_SAFE_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  moduleUS  ==  URL_SAFE_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
252	[BUG]  [BUGGY]  if(modulus  ==  Base64.WRITE  ||  moduleus  ==  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.WRITE  ||  moduleus  ==  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.WRITE  ||  moduleus  ==  Base64.DEFAULT)  {	  if(modulus    ==    Base64.WRITE)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
253	[BUG]  [BUGGY]  if(modulus  ==  Base64.START  ||  moduleus  ==  Base64.WRITE)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.START  ||  moduleus  ==  Base64.WRITE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.START  ||  moduleus  ==  Base64.WRITE)  {	  if(modulus    ==    Base64.WRITE)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
254	[BUG]  [BUGGY]  if(modulus  ==  Base64.WRITE  ||  moduleus  ==  Base64.US_ASCII)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.WRITE  ||  moduleus  ==  Base64.US_ASCII)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.WRITE  ||  moduleus  ==  Base64.US_ASCII)  {	  if(modulus    ==    Base64.WRITE)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
255	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  ||  moduleum  ==  Base64.WHOLE_COLLECTION)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  ||  moduleum  ==  Base64.WHOLE_COLLECTION)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  ||  moduleum  ==  Base64.WHOLE_COLLECTION)  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
256	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  ||  moduleUS  ==  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  ||  moduleUS  ==  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  ||  moduleUS  ==  Base64.DEFAULT)  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
257	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  ||  moduleus  ==  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  ||  moduleus  ==  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  ||  moduleus  ==  Base64.DEFAULT)  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
258	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  ||  moduleum  ==  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  ||  moduleum  ==  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  ||  moduleum  ==  Base64.DEFAULT)  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
259	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  ||  module  dépends[0])  {  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  ||  module  dépends[0])  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  ||  module  dépends[0])  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
260	[BUG]  [BUGGY]  if(modulus  ==  null)  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  null)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  null)  {	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
261	[BUG]  [BUGGY]  if(b  ==  null  ||  buffer.length  >  0)  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(b  ==  null  ||  buffer.length  >  0)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(b  ==  null  ||  buffer.length  >  0)  {	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
262	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
263	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
264	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
265	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
266	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
267	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
268	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
269	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
270	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  moduleHelper.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  moduleHelper.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT  ||  moduleHelper.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
271	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT_BUFFER_SIZE)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT_BUFFER_SIZE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT_BUFFER_SIZE)  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
272	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  moduleUS  ==  Base64Module.DEFAULT)  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  moduleUS  ==  Base64Module.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT  ||  moduleUS  ==  Base64Module.DEFAULT)  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
273	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  moduleum  ==  Base64Module.US_ASCII)  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  moduleum  ==  Base64Module.US_ASCII)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT  ||  moduleum  ==  Base64Module.US_ASCII)  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
274	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  moduleum  ==  Base64Module.SCRIPT)  {  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  ||  moduleum  ==  Base64Module.SCRIPT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT  ||  moduleum  ==  Base64Module.SCRIPT)  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
275	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  <  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >=  <  8)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
276	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	5	None	replace
277	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  6)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  ==  6)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	5	None	replace
278	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  6)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x!=  6)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	5	None	replace
279	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
280	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
281	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
282	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
283	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)|  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)|  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)|  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
284	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MIME_CHUNK_SIZE];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MIME_CHUNK_SIZE];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  MIME_CHUNK_SIZE];	      buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
285	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
286	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  if(inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
287	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
288	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
289	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
290	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
291	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
292	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
293	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
294	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
295	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
296	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
297	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	40	None	replace
298	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  6)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x!=  6)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
299	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
300	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
301	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
302	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
303	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
304	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
305	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
306	[BUG]  [BUGGY]  if(modulus  ==  Base64.UNKNOWN  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.UNKNOWN  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.UNKNOWN  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(modulus    ==    Base64.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
307	[BUG]  [BUGGY]  if(modulus  ==  Base64.UNKNOWN  ||  module!=  Base64.US_ASCII)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.UNKNOWN  ||  module!=  Base64.US_ASCII)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.UNKNOWN  ||  module!=  Base64.US_ASCII)  {	  if(modulus    ==    Base64.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
308	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  8)&  MASK_6BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  ==  8)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
309	[BUG]  [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
310	[BUG]  [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
311	[BUG]  [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
312	[BUG]  [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
313	[BUG]  [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
314	[BUG]  [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NUMB  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NUMB  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NUMB	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
315	[BUG]  [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(b  ==  null  ||!b.isEnabled(Feature.QUOTE_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  if(b    ==    null)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
316	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
317	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT  &&!modulus.isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT  &&!modulus.isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT  &&!modulus.isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
318	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT  &&!modulus.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT  &&!modulus.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT  &&!modulus.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
319	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT  ||  moduleum  ==  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT  ||  moduleum  ==  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT  ||  moduleum  ==  Base64.DEFAULT)  {	  if(modulus    ==    Base64.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
320	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
321	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
322	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
323	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
324	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
325	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_8BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_8BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
326	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module!=  TABLE_SAFE_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module!=  TABLE_SAFE_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module!=  TABLE_SAFE_ENCODE_TABLE)  {	  if(modulus    ==    STANDARD_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
327	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  ==  TABLE_SAFE_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  ==  TABLE_SAFE_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE  ||  module  ==  TABLE_SAFE_ENCODE_TABLE)  {	  if(modulus    ==    STANDARD_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
328	[BUG]  [BUGGY]  if(modulus  ==  Base64.WRITE  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.WRITE  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.WRITE  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(modulus    ==    Base64.WRITE)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
329	[BUG]  [BUGGY]  if(modulus!=  Base64.WRITE)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  Base64.WRITE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  Base64.WRITE)  {	  if(modulus    ==    Base64.WRITE)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
330	[BUG]  [BUGGY]  if(modulus  ==  Base64.WRITE  ||  moduleum  ==  Base64.DEFAULT)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.WRITE  ||  moduleum  ==  Base64.DEFAULT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.WRITE  ||  moduleum  ==  Base64.DEFAULT)  {	  if(modulus    ==    Base64.WRITE)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
331	[BUG]  [BUGGY]  if(modulus  ==  Base64.WRITE  &&!modulus.equals( "java.lang.Object "))  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.WRITE  &&!modulus.equals( "java.lang.Object "))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.WRITE  &&!modulus.equals( "java.lang.Object "))  {	  if(modulus    ==    Base64.WRITE)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
332	[BUG]  [BUGGY]  if(modulus  ==  Base64.WRITE  &&  inAvail  >  0)  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.WRITE  &&  inAvail  >  0)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.WRITE  &&  inAvail  >  0)  {	  if(modulus    ==    Base64.WRITE)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
333	[BUG]  [BUGGY]  if(modulus  ==  Base64.WRITE  &&!modulus.isEnabled(Feature.QUOTE_NULL_OBJECT))  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.WRITE  &&!modulus.isEnabled(Feature.QUOTE_NULL_OBJECT))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.WRITE  &&!modulus.isEnabled(Feature.QUOTE_NULL_OBJECT))  {	  if(modulus    ==    Base64.WRITE)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
334	[BUG]  [BUGGY]  if(modulus!=  Base64.DECODE_TABLE)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  Base64.DECODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  Base64.DECODE_TABLE)  {	  if(modulus    ==    Base64.DECODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
335	[BUG]  [BUGGY]  if(modulus  ==  Base64.DISCONTINUATION)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DISCONTINUATION)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DISCONTINUATION)  {	  if(modulus    ==    Base64.DECODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
336	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
337	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
338	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
339	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
340	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
341	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
342	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
343	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
344	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)|  MASK_6BITS];  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
345	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  >>  10)&  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
346	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  8)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  ==  8)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	1	None	replace
347	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  8)&  MASK_8BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x!=  8)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	1	None	replace
348	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_ASCII  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_ASCII  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_ASCII  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
349	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  module!=  System.identityHashCode(modulus))  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  module!=  System.identityHashCode(modulus))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_ASCII  ||  module!=  System.identityHashCode(modulus))  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
350	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_ASCII  &&!modulus.equals(Base64.encodeBase64(modulus)))  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_ASCII  &&!modulus.equals(Base64.encodeBase64(modulus)))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_ASCII  &&!modulus.equals(Base64.encodeBase64(modulus)))  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
351	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  module  pretul  ==  Base64.VERSION_CODES[0])  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  module  pretul  ==  Base64.VERSION_CODES[0])  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_ASCII  ||  module  pretul  ==  Base64.VERSION_CODES[0])  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
352	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  module  Hristos  Hristos)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_ASCII  ||  module  Hristos  Hristos)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_ASCII  ||  module  Hristos  Hristos)  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
353	[BUG]  [BUGGY]  if(modulus  ==  Base64.US_ASCII  &&!modulus.isSupported())  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US_ASCII  &&!modulus.isSupported())  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US_ASCII  &&!modulus.isSupported())  {	  if(modulus    ==    Base64.US_ASCII)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
354	[BUG]  [BUGGY]  if(modulus  ==  Base64.EMPTY  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.EMPTY  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.EMPTY  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(modulus    ==    Base64.EMPTY)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
355	[BUG]  [BUGGY]  if(modulus  ==  Base64.EMPTY  &&!modulus.equals( "java.lang.Object "))  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.EMPTY  &&!modulus.equals( "java.lang.Object "))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.EMPTY  &&!modulus.equals( "java.lang.Object "))  {	  if(modulus    ==    Base64.EMPTY)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
356	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.SCRIPT  ||  module  ==  Base64Module.UNKNOWN)  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.SCRIPT  ||  module  ==  Base64Module.UNKNOWN)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.SCRIPT  ||  module  ==  Base64Module.UNKNOWN)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
357	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  Base64Module.US_ASCII)  {  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  Base64Module.US_ASCII)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  Base64Module.US_ASCII)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
358	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  Base64Module.UNKNOWN)  {  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  Base64Module.UNKNOWN)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  Base64Module.UNKNOWN)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
359	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  Base64Module.SCRIPT)  {  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  Base64Module.SCRIPT)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  Base64Module.SCRIPT)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
360	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  null)  {  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  null)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  null)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
361	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  1)  {  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  1)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.UNKNOWN  ||  module!=  1)  {	  if(modulus    ==    Base64Module.UNKNOWN)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
362	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_7BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_7BITS];  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_7BITS];	      buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	6	None	replace
363	[BUG]  [BUGGY]  if(modulus  ==  Base64.US)  {  [CE]  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.US)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.US)  {	  if(modulus    ==    Base64.UTF8)    {    	non-compiled	[CE]  	30	None	replace
364	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_HANDARD_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_HANDARD_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_HANDARD_ENCODE_TABLE)  {	  if(modulus    ==    Base64.UTF8)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
365	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_LOAD_FACTOR  ||  module  ==  Base64.UTF8)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_LOAD_FACTOR  ||  module  ==  Base64.UTF8)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_LOAD_FACTOR  ||  module  ==  Base64.UTF8)  {	  if(modulus    ==    Base64.UTF8)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
366	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
367	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  &&!modulus.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  &&!modulus.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT  &&!modulus.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
368	[BUG]  [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  &&!modulus.isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64Module.DEFAULT  &&!modulus.isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64Module.DEFAULT  &&!modulus.isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(modulus    ==    Base64Module.DEFAULT)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
369	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  2  ||  buffer.length  >  4)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  2  ||  buffer.length  >  4)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer  ==  null  ||  buffer.length  <  2  ||  buffer.length  >  4)  {	  if(buffer    ==    null)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
370	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  4)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  4)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer  ==  null  ||  buffer.length  <  4)  {	  if(buffer    ==    null)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
371	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  3  ||  buffer.length  >  4)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  3  ||  buffer.length  >  4)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer  ==  null  ||  buffer.length  <  3  ||  buffer.length  >  4)  {	  if(buffer    ==    null)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
372	[BUG]  [BUGGY]  if(buffer!=  buffer.length)  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(buffer!=  buffer.length)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(buffer!=  buffer.length)  {	  if(buffer    ==    null)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
373	[BUG]  [BUGGY]  if(modulus!=  Base64.BASE64)  {  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus!=  Base64.BASE64)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus!=  Base64.BASE64)  {	  if(modulus    ==    Base64.BASE64)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
374	[BUG]  [BUGGY]  if(modulus  ==  Base64.PRIVATE)  {  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.PRIVATE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.PRIVATE)  {	  if(modulus    ==    Base64.BASE64)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
375	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	42	None	replace
376	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	42	None	replace
377	[BUG]  [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }  [BUGGY]    if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }	      if(modulus    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	42	None	replace
378	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_CAMERA_SEPARATOR  ||  module  ==  Base64.DEFAULT_CAMERA_SEPARATOR)  {  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_CAMERA_SEPARATOR  ||  module  ==  Base64.DEFAULT_CAMERA_SEPARATOR)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_CAMERA_SEPARATOR  ||  module  ==  Base64.DEFAULT_CAMERA_SEPARATOR)  {	  if(modulus    ==    Base64.encodeBase64())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
379	[BUG]  [BUGGY]  if(modulus  ==  Base64.DEFAULT_CAPACITY  ||  module!=  Base64.DEFAULT_CAPACITY)  {  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.DEFAULT_CAPACITY  ||  module!=  Base64.DEFAULT_CAPACITY)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.DEFAULT_CAPACITY  ||  module!=  Base64.DEFAULT_CAPACITY)  {	  if(modulus    ==    Base64.encodeBase64())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
380	[BUG]  [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module!=  URL_SAFE_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module!=  URL_SAFE_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module!=  URL_SAFE_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
381	[BUG]  [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  ==  URL_SAFE_ENCODE_TABLE)  {  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  ==  URL_SAFE_ENCODE_TABLE)  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  URL_SAFE_ENCODE_TABLE  ||  module  ==  URL_SAFE_ENCODE_TABLE)  {	  if(modulus    ==    URL_SAFE_ENCODE_TABLE)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
382	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
383	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
384	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.equals( "java.lang.Object "))  {  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.equals( "java.lang.Object "))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  &&!modulus.equals( "java.lang.Object "))  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
385	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.QUOTE_NULL_OBJECT))  {  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.QUOTE_NULL_OBJECT))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.QUOTE_NULL_OBJECT))  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
386	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.equals(BASE64_SEPARATOR))  {  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.equals(BASE64_SEPARATOR))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  &&!modulus.equals(BASE64_SEPARATOR))  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
387	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.QUOTE_NULL_VALUE))  {  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.QUOTE_NULL_VALUE))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.QUOTE_NULL_VALUE))  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
388	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
389	[BUG]  [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];      [BUGGY]  if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]    buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	if(modulus  ==  Base64.VAR  &&!modulus.isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(modulus    ==    Base64.VAR)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
