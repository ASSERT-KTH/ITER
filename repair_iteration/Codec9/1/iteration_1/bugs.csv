bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  variable  len  is  already  defined  in  method  encodeBase64(byte[],boolean,boolean,int)  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);		non-compiled	[CE]  variable  len  is  already  defined  in  method  encodeBase64(byte[],boolean,boolean,int)	2	None	add
2	[BUG]  [BUGGY]    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);		non-compiled	[CE]  not  a  statement	2	None	add
3	[BUG]  [BUGGY]    result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);		non-compiled	[CE]  not  a  statement	2	None	add
4	[BUG]  [BUGGY]    byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);		non-compiled	[CE]  not  a  statement	2	None	add
5	[BUG]  [BUGGY]    byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);		non-compiled	[CE]  not  a  statement	2	None	add
6	[BUG]  [BUGGY]    byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);		non-compiled	[CE]  not  a  statement	2	None	add
7	[BUG]  [BUGGY]    byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe);  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe);		non-compiled	[CE]  not  a  statement	2	None	add
8	[BUG]  [BUGGY]    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);		non-compiled	[CE]  not  a  statement	2	None	add
9	[BUG]  [BUGGY]    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);		non-compiled	[CE]  not  a  statement	2	None	add
10	[BUG]  [BUGGY]    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);		non-compiled	[CE]  not  a  statement	2	None	add
11	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")to  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")to  the  specified  maxium  size  of "  +  [BUGGY]  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")to  the  specified  maxium  size  of "  +	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +     ")  than  the  specified  maxium  size  of   "  +  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  [BUGGY]  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +     ")  than  the  specified  maxium  size  of   "  +  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of "  +  [BUGGY]  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of "  +	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +     ")  than  the  specified  maxium  size  of   "  +  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")before  the  specified  maxium  size  of "  +  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")before  the  specified  maxium  size  of "  +  [BUGGY]  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")before  the  specified  maxium  size  of "  +	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +     ")  than  the  specified  maxium  size  of   "  +  	non-compiled	[CE]  not  a  statement	1	None	replace
15	[BUG]  [BUGGY]    if(isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    if(isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    if(isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
16	[BUG]  [BUGGY]    if(isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    if(isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    if(isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
17	[BUG]  [BUGGY]    System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize);  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize);		non-compiled	[CE]  not  a  statement	2	None	add
18	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")  than  the  specified  maxium  size  of "  +  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")  than  the  specified  maxium  size  of "  +  [BUGGY]  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")  than  the  specified  maxium  size  of "  +	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +     ")  than  the  specified  maxium  size  of   "  +  	non-compiled	[CE]  not  a  statement	1	None	replace
19	[BUG]  [BUGGY]    Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);		non-compiled	[CE]  not  a  statement	2	None	add
20	[BUG]  [BUGGY]    if(isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    if(isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    if(isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }		non-compiled	[CE]  not  a  statement	2	None	add
21	[BUG]  [BUGGY]    Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {  [BUGGY]    Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +    len  +         ")  than  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	    Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);		non-compiled	[CE]  not  a  statement	2	None	add
